// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module regblock (
        input wire clk,
        input wire rst,

        input wire s_apb_psel,
        input wire s_apb_pwrite,
        input wire s_apb_penable,
        input wire [2:0] s_apb_pprot,
        input wire [2:0] s_apb_paddr,
        input wire [7:0] s_apb_pwdata,
        input wire [0:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [7:0] s_apb_prdata,
        output logic s_apb_pslverr,

        input wire [0:0] hwif_in_r1_f_swwe,
        input wire [0:0] hwif_in_r2_f_swwel
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [2:0] cpuif_addr;
    logic [7:0] cpuif_wr_data;
    logic [7:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [7:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;


    // Request
    logic is_active;
    always_ff @(posedge clk) begin
        if(rst) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= s_apb_paddr[2:0];
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<1; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    logic [0:0] decoded_reg_strb_lock;
    logic [0:0] decoded_reg_strb_r1;
    logic [0:0] decoded_reg_strb_r2;
    logic [0:0] decoded_reg_strb_r3;
    logic [0:0] decoded_reg_strb_r4;
    logic [0:0] decoded_reg_strb_r5;
    logic [0:0] decoded_reg_strb_r6;
    logic decoded_req;
    logic decoded_req_is_wr;
    /* verilator lint_off UNUSEDSIGNAL */
    logic [7:0] decoded_wr_data;
    logic [7:0] decoded_wr_biten;
    /* verilator lint_on UNUSEDSIGNAL */

    always @(*) begin
        /* verilator lint_off UNUSEDSIGNAL */
        integer next_cpuif_addr;
        /* verilator lint_on UNUSEDSIGNAL */
        decoded_reg_strb_lock = cpuif_req_masked & (cpuif_addr == 3'h0);
        decoded_reg_strb_r1 = cpuif_req_masked & (cpuif_addr == 3'h1);
        decoded_reg_strb_r2 = cpuif_req_masked & (cpuif_addr == 3'h2);
        decoded_reg_strb_r3 = cpuif_req_masked & (cpuif_addr == 3'h3);
        decoded_reg_strb_r4 = cpuif_req_masked & (cpuif_addr == 3'h4);
        decoded_reg_strb_r5 = cpuif_req_masked & (cpuif_addr == 3'h5);
        decoded_reg_strb_r6 = cpuif_req_masked & (cpuif_addr == 3'h6);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;


    //--------------------------------------------------------------------------
    // Field storage declarations
    //--------------------------------------------------------------------------

    // Field: regblock.lock.r3_swwe
    logic [0:0] field_storage_lock_r3_swwe_value;
    logic [0:0] field_combo_lock_r3_swwe_next;
    logic field_combo_lock_r3_swwe_load_next;
    // Field: regblock.lock.r4_swwel
    logic [0:0] field_storage_lock_r4_swwel_value;
    logic [0:0] field_combo_lock_r4_swwel_next;
    logic field_combo_lock_r4_swwel_load_next;
    // Field: regblock.r1.f
    logic [7:0] field_storage_r1_f_value;
    logic [7:0] field_combo_r1_f_next;
    logic field_combo_r1_f_load_next;
    // Field: regblock.r2.f
    logic [7:0] field_storage_r2_f_value;
    logic [7:0] field_combo_r2_f_next;
    logic field_combo_r2_f_load_next;
    // Field: regblock.r3.f
    logic [7:0] field_storage_r3_f_value;
    logic [7:0] field_combo_r3_f_next;
    logic field_combo_r3_f_load_next;
    // Field: regblock.r4.f
    logic [7:0] field_storage_r4_f_value;
    logic [7:0] field_combo_r4_f_next;
    logic field_combo_r4_f_load_next;
    // Field: regblock.r5.f
    logic [7:0] field_storage_r5_f_value;
    logic [7:0] field_combo_r5_f_next;
    logic field_combo_r5_f_load_next;
    // Field: regblock.r6.f
    logic [7:0] field_storage_r6_f_value;
    logic [7:0] field_combo_r6_f_next;
    logic field_combo_r6_f_load_next;
    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_lock_r3_swwe_value;
        load_next_c = '0;
        if(decoded_reg_strb_lock && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_lock_r3_swwe_value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo_lock_r3_swwe_next = next_c;
        field_combo_lock_r3_swwe_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_lock_r3_swwe_value <= 1'h1;
        end else if(field_combo_lock_r3_swwe_load_next) begin
            field_storage_lock_r3_swwe_value <= field_combo_lock_r3_swwe_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_lock_r4_swwel_value;
        load_next_c = '0;
        if(decoded_reg_strb_lock && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_lock_r4_swwel_value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo_lock_r4_swwel_next = next_c;
        field_combo_lock_r4_swwel_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_lock_r4_swwel_value <= 1'h0;
        end else if(field_combo_lock_r4_swwel_load_next) begin
            field_storage_lock_r4_swwel_value <= field_combo_lock_r4_swwel_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_r1_f_value;
        load_next_c = '0;
        if(decoded_reg_strb_r1 && decoded_req_is_wr && hwif_in_r1_f_swwe) begin // SW write
            next_c = (field_storage_r1_f_value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo_r1_f_next = next_c;
        field_combo_r1_f_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r1_f_value <= 8'h11;
        end else if(field_combo_r1_f_load_next) begin
            field_storage_r1_f_value <= field_combo_r1_f_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_r2_f_value;
        load_next_c = '0;
        if(decoded_reg_strb_r2 && decoded_req_is_wr && !(hwif_in_r2_f_swwel)) begin // SW write
            next_c = (field_storage_r2_f_value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo_r2_f_next = next_c;
        field_combo_r2_f_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r2_f_value <= 8'h22;
        end else if(field_combo_r2_f_load_next) begin
            field_storage_r2_f_value <= field_combo_r2_f_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_r3_f_value;
        load_next_c = '0;
        if(decoded_reg_strb_r3 && decoded_req_is_wr && field_storage_lock_r3_swwe_value) begin // SW write
            next_c = (field_storage_r3_f_value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo_r3_f_next = next_c;
        field_combo_r3_f_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r3_f_value <= 8'h33;
        end else if(field_combo_r3_f_load_next) begin
            field_storage_r3_f_value <= field_combo_r3_f_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_r4_f_value;
        load_next_c = '0;
        if(decoded_reg_strb_r4 && decoded_req_is_wr && !(field_storage_lock_r4_swwel_value)) begin // SW write
            next_c = (field_storage_r4_f_value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo_r4_f_next = next_c;
        field_combo_r4_f_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r4_f_value <= 8'h44;
        end else if(field_combo_r4_f_load_next) begin
            field_storage_r4_f_value <= field_combo_r4_f_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_r5_f_value;
        load_next_c = '0;
        if(decoded_reg_strb_r5 && decoded_req_is_wr && field_storage_lock_r3_swwe_value) begin // SW write
            next_c = (field_storage_r5_f_value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo_r5_f_next = next_c;
        field_combo_r5_f_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r5_f_value <= 8'h55;
        end else if(field_combo_r5_f_load_next) begin
            field_storage_r5_f_value <= field_combo_r5_f_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_r6_f_value;
        load_next_c = '0;
        if(decoded_reg_strb_r6 && decoded_req_is_wr && field_storage_lock_r4_swwel_value) begin // SW write
            next_c = (field_storage_r6_f_value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo_r6_f_next = next_c;
        field_combo_r6_f_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r6_f_value <= 8'h66;
        end else if(field_combo_r6_f_load_next) begin
            field_storage_r6_f_value <= field_combo_r6_f_next;
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

//--------------------------------------------------------------------------
// Readback
//--------------------------------------------------------------------------
    logic readback_external_rd_ack;
    assign readback_external_rd_ack = 0;

    logic readback_err;
    logic readback_done;
    logic [7:0] readback_data;

    // Assign readback values to a flattened array
    logic [7:0] readback_array[7];
    assign readback_array[0][0:0] = (decoded_reg_strb_lock && !decoded_req_is_wr) ? field_storage_lock_r3_swwe_value : '0;
    assign readback_array[0][1:1] = (decoded_reg_strb_lock && !decoded_req_is_wr) ? field_storage_lock_r4_swwel_value : '0;
    assign readback_array[0][7:2] = '0;
    assign readback_array[1][7:0] = (decoded_reg_strb_r1 && !decoded_req_is_wr) ? field_storage_r1_f_value : '0;
    assign readback_array[2][7:0] = (decoded_reg_strb_r2 && !decoded_req_is_wr) ? field_storage_r2_f_value : '0;
    assign readback_array[3][7:0] = (decoded_reg_strb_r3 && !decoded_req_is_wr) ? field_storage_r3_f_value : '0;
    assign readback_array[4][7:0] = (decoded_reg_strb_r4 && !decoded_req_is_wr) ? field_storage_r4_f_value : '0;
    assign readback_array[5][7:0] = (decoded_reg_strb_r5 && !decoded_req_is_wr) ? field_storage_r5_f_value : '0;
    assign readback_array[6][7:0] = (decoded_reg_strb_r6 && !decoded_req_is_wr) ? field_storage_r6_f_value : '0;

    // Reduce the array
    // always_comb begin
    always @(*) begin
        logic [7:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<7; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
