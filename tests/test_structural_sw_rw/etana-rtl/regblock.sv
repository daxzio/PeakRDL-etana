// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module regblock (
        input wire clk,
        input wire rst,

        input wire s_apb_psel,
        input wire s_apb_pwrite,
        input wire s_apb_penable,
        input wire [2:0] s_apb_pprot,
        input wire [13:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,

        output logic [7:0] hwif_out_r0_a,
        output logic [0:0] hwif_out_r0_b,
        output logic [0:0] hwif_out_r0_c,
        output logic [1:0] [2:0] [3:0] [7:0] hwif_out_r1_a,
        output logic [1:0] [2:0] [3:0] [0:0] hwif_out_r1_b,
        output logic [1:0] [2:0] [3:0] [0:0] hwif_out_r1_c,
        output logic [7:0] hwif_out_r2_a,
        output logic [0:0] hwif_out_r2_b,
        output logic [0:0] hwif_out_r2_c,
        output logic [1:0] [3:0] [3:0] hwif_out_sub2_r1_x,
        output logic [1:0] [1:0] [3:0] hwif_out_sub2_sub_r1_x,
        output logic [1:0] [1:0] [1:0] [3:0] hwif_out_sub2_sub_r2_x,
        output logic [1:0] [1:0] [3:0] hwif_out_sub2_sub_r3_x,
        output logic [1:0] [3:0] [3:0] hwif_out_sub2_r2_x,
        output logic [3:0] hwif_out_r3_x,
        output logic [7:0] hwif_out_rw_reg_f1,
        output logic [10:0] hwif_out_rw_reg_f2,
        output logic [7:0] hwif_out_rw_reg_lsb0_f1,
        output logic [10:0] hwif_out_rw_reg_lsb0_f2
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [13:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;


    // Request
    logic is_active;
    always_ff @(posedge clk) begin
        if(rst) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= {s_apb_paddr[13:2], 2'b0};
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<4; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    logic [0:0] decoded_reg_strb_r0;
    logic [0:0] decoded_reg_strb_r1 [2][3][4];
    logic [0:0] decoded_reg_strb_r2;
    logic [0:0] decoded_reg_strb_sub2_r1 [2][4];
    logic [0:0] decoded_reg_strb_sub2_sub_r1 [2][2];
    logic [0:0] decoded_reg_strb_sub2_sub_r2 [2][2][2];
    logic [0:0] decoded_reg_strb_sub2_sub_r3 [2][2];
    logic [0:0] decoded_reg_strb_sub2_r2 [2][4];
    logic [0:0] decoded_reg_strb_r3;
    logic [0:0] decoded_reg_strb_rw_reg;
    logic [0:0] decoded_reg_strb_rw_reg_lsb0;
    logic decoded_req;
    logic decoded_req_is_wr;
    /* verilator lint_off UNUSEDSIGNAL */
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;
    /* verilator lint_on UNUSEDSIGNAL */

    always @(*) begin
        /* verilator lint_off UNUSEDSIGNAL */
        integer next_cpuif_addr;
        /* verilator lint_on UNUSEDSIGNAL */
        decoded_reg_strb_r0 = cpuif_req_masked & (cpuif_addr == 14'h0);
        for(int i0=0; i0<2; i0++) begin : gen_loop_17
            for(int i1=0; i1<3; i1++) begin : gen_loop_18
                for(int i2=0; i2<4; i2++) begin : gen_loop_19
                    next_cpuif_addr = 32'h10 + i0*14'h60 + i1*14'h20 + i2*14'h8;
                    decoded_reg_strb_r1[i0][i1][i2] = cpuif_req_masked & (cpuif_addr == next_cpuif_addr[13:0]);
                end
            end
        end
        decoded_reg_strb_r2 = cpuif_req_masked & (cpuif_addr == 14'h1000);
        for(int i0=0; i0<2; i0++) begin : gen_loop_20
            for(int i1=0; i1<4; i1++) begin : gen_loop_21
                next_cpuif_addr = 32'h2000 + i0*14'h40 + i1*14'h4;
                decoded_reg_strb_sub2_r1[i0][i1] = cpuif_req_masked & (cpuif_addr == next_cpuif_addr[13:0]);
            end
            for(int i1=0; i1<2; i1++) begin : gen_loop_22
                next_cpuif_addr = 32'h2010 + i0*14'h40 + i1*14'h10;
                decoded_reg_strb_sub2_sub_r1[i0][i1] = cpuif_req_masked & (cpuif_addr == next_cpuif_addr[13:0]);
                for(int i2=0; i2<2; i2++) begin : gen_loop_23
                    next_cpuif_addr = 32'h2014 + i0*14'h40 + i1*14'h10 + i2*14'h4;
                    decoded_reg_strb_sub2_sub_r2[i0][i1][i2] = cpuif_req_masked & (cpuif_addr == next_cpuif_addr[13:0]);
                end
                next_cpuif_addr = 32'h201c + i0*14'h40 + i1*14'h10;
                decoded_reg_strb_sub2_sub_r3[i0][i1] = cpuif_req_masked & (cpuif_addr == next_cpuif_addr[13:0]);
            end
            for(int i1=0; i1<4; i1++) begin : gen_loop_24
                next_cpuif_addr = 32'h2030 + i0*14'h40 + i1*14'h4;
                decoded_reg_strb_sub2_r2[i0][i1] = cpuif_req_masked & (cpuif_addr == next_cpuif_addr[13:0]);
            end
        end
        decoded_reg_strb_r3 = cpuif_req_masked & (cpuif_addr == 14'h2080);
        decoded_reg_strb_rw_reg = cpuif_req_masked & (cpuif_addr == 14'h3000);
        decoded_reg_strb_rw_reg_lsb0 = cpuif_req_masked & (cpuif_addr == 14'h3004);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    // bitswap for use by fields with msb0 ordering
    logic [31:0] decoded_wr_data_bswap;
    logic [31:0] decoded_wr_biten_bswap;
    // Explicit bit reversal for Icarus Verilog compatibility
    genvar bitswap_i;
    generate
        for(bitswap_i = 0; bitswap_i < 32; bitswap_i = bitswap_i + 1) begin : gen_bitswap
            assign decoded_wr_data_bswap[bitswap_i] = decoded_wr_data[31 - bitswap_i];
            assign decoded_wr_biten_bswap[bitswap_i] = decoded_wr_biten[31 - bitswap_i];
        end
    endgenerate

    //--------------------------------------------------------------------------
    // Field storage declarations
    //--------------------------------------------------------------------------

    // Field: regblock.r0.a
    logic [7:0] field_storage_r0_a_value;
    logic [7:0] field_combo_r0_a_next;
    logic field_combo_r0_a_load_next;
    // Field: regblock.r0.b
    logic [0:0] field_storage_r0_b_value;
    logic [0:0] field_combo_r0_b_next;
    logic field_combo_r0_b_load_next;
    // Field: regblock.r0.c
    logic [0:0] field_storage_r0_c_value;
    logic [0:0] field_combo_r0_c_next;
    logic field_combo_r0_c_load_next;
    // Field: regblock.r1[][][].a
    logic [7:0] field_storage_r1_a_value [2][3][4] ;
    logic [7:0] field_combo_r1_a_next [2][3][4] ;
    logic field_combo_r1_a_load_next [2][3][4] ;
    // Field: regblock.r1[][][].b
    logic [0:0] field_storage_r1_b_value [2][3][4] ;
    logic [0:0] field_combo_r1_b_next [2][3][4] ;
    logic field_combo_r1_b_load_next [2][3][4] ;
    // Field: regblock.r1[][][].c
    logic [0:0] field_storage_r1_c_value [2][3][4] ;
    logic [0:0] field_combo_r1_c_next [2][3][4] ;
    logic field_combo_r1_c_load_next [2][3][4] ;
    // Field: regblock.r2.a
    logic [7:0] field_storage_r2_a_value;
    logic [7:0] field_combo_r2_a_next;
    logic field_combo_r2_a_load_next;
    // Field: regblock.r2.b
    logic [0:0] field_storage_r2_b_value;
    logic [0:0] field_combo_r2_b_next;
    logic field_combo_r2_b_load_next;
    // Field: regblock.r2.c
    logic [0:0] field_storage_r2_c_value;
    logic [0:0] field_combo_r2_c_next;
    logic field_combo_r2_c_load_next;
    // Field: regblock.sub2[].r1[].x
    logic [3:0] field_storage_sub2_r1_x_value [2][4] ;
    logic [3:0] field_combo_sub2_r1_x_next [2][4] ;
    logic field_combo_sub2_r1_x_load_next [2][4] ;
    // Field: regblock.sub2[].sub[].r1.x
    logic [3:0] field_storage_sub2_sub_r1_x_value [2][2] ;
    logic [3:0] field_combo_sub2_sub_r1_x_next [2][2] ;
    logic field_combo_sub2_sub_r1_x_load_next [2][2] ;
    // Field: regblock.sub2[].sub[].r2[].x
    logic [3:0] field_storage_sub2_sub_r2_x_value [2][2][2] ;
    logic [3:0] field_combo_sub2_sub_r2_x_next [2][2][2] ;
    logic field_combo_sub2_sub_r2_x_load_next [2][2][2] ;
    // Field: regblock.sub2[].sub[].r3.x
    logic [3:0] field_storage_sub2_sub_r3_x_value [2][2] ;
    logic [3:0] field_combo_sub2_sub_r3_x_next [2][2] ;
    logic field_combo_sub2_sub_r3_x_load_next [2][2] ;
    // Field: regblock.sub2[].r2[].x
    logic [3:0] field_storage_sub2_r2_x_value [2][4] ;
    logic [3:0] field_combo_sub2_r2_x_next [2][4] ;
    logic field_combo_sub2_r2_x_load_next [2][4] ;
    // Field: regblock.r3.x
    logic [3:0] field_storage_r3_x_value;
    logic [3:0] field_combo_r3_x_next;
    logic field_combo_r3_x_load_next;
    // Field: regblock.rw_reg.f1
    logic [7:0] field_storage_rw_reg_f1_value;
    logic [7:0] field_combo_rw_reg_f1_next;
    logic field_combo_rw_reg_f1_load_next;
    // Field: regblock.rw_reg.f2
    logic [10:0] field_storage_rw_reg_f2_value;
    logic [10:0] field_combo_rw_reg_f2_next;
    logic field_combo_rw_reg_f2_load_next;
    // Field: regblock.rw_reg_lsb0.f1
    logic [7:0] field_storage_rw_reg_lsb0_f1_value;
    logic [7:0] field_combo_rw_reg_lsb0_f1_next;
    logic field_combo_rw_reg_lsb0_f1_load_next;
    // Field: regblock.rw_reg_lsb0.f2
    logic [10:0] field_storage_rw_reg_lsb0_f2_value;
    logic [10:0] field_combo_rw_reg_lsb0_f2_next;
    logic field_combo_rw_reg_lsb0_f2_load_next;
    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_r0_a_value;
        load_next_c = '0;
        if(decoded_reg_strb_r0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_r0_a_value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo_r0_a_next = next_c;
        field_combo_r0_a_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r0_a_value <= 8'h42;
        end else if(field_combo_r0_a_load_next) begin
            field_storage_r0_a_value <= field_combo_r0_a_next;
        end
    end
    assign hwif_out_r0_a = field_storage_r0_a_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_r0_b_value;
        load_next_c = '0;
        if(decoded_reg_strb_r0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_r0_b_value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo_r0_b_next = next_c;
        field_combo_r0_b_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r0_b_value <= 1'h0;
        end else if(field_combo_r0_b_load_next) begin
            field_storage_r0_b_value <= field_combo_r0_b_next;
        end
    end
    assign hwif_out_r0_b = field_storage_r0_b_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_r0_c_value;
        load_next_c = '0;
        if(decoded_reg_strb_r0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_r0_c_value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end
        field_combo_r0_c_next = next_c;
        field_combo_r0_c_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r0_c_value <= 1'h1;
        end else if(field_combo_r0_c_load_next) begin
            field_storage_r0_c_value <= field_combo_r0_c_next;
        end
    end
    assign hwif_out_r0_c = field_storage_r0_c_value;
    for(genvar i0=0; i0<2; i0++) begin : gen_loop_33
        for(genvar i1=0; i1<3; i1++) begin : gen_loop_34
            for(genvar i2=0; i2<4; i2++) begin : gen_loop_35
                // always_comb begin
                always @(*) begin
                    logic [7:0] next_c;
                    logic load_next_c;
                    next_c = field_storage_r1_a_value[i0][i1][i2];
                    load_next_c = '0;
                    if(decoded_reg_strb_r1[i0][i1][i2] && decoded_req_is_wr) begin // SW write
                        next_c = (field_storage_r1_a_value[i0][i1][i2] & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
                        load_next_c = '1;
                    end
                    field_combo_r1_a_next[i0][i1][i2] = next_c;
                    field_combo_r1_a_load_next[i0][i1][i2] = load_next_c;
                end
                always_ff @(posedge clk) begin
                    if(rst) begin
                        field_storage_r1_a_value[i0][i1][i2] <= 8'h23;
                    end else if(field_combo_r1_a_load_next[i0][i1][i2]) begin
                        field_storage_r1_a_value[i0][i1][i2] <= field_combo_r1_a_next[i0][i1][i2];
                    end
                end
                assign hwif_out_r1_a[i0][i1][i2] = field_storage_r1_a_value[i0][i1][i2];
                // always_comb begin
                always @(*) begin
                    logic [0:0] next_c;
                    logic load_next_c;
                    next_c = field_storage_r1_b_value[i0][i1][i2];
                    load_next_c = '0;
                    if(decoded_reg_strb_r1[i0][i1][i2] && decoded_req_is_wr) begin // SW write
                        next_c = (field_storage_r1_b_value[i0][i1][i2] & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
                        load_next_c = '1;
                    end
                    field_combo_r1_b_next[i0][i1][i2] = next_c;
                    field_combo_r1_b_load_next[i0][i1][i2] = load_next_c;
                end
                always_ff @(posedge clk) begin
                    if(rst) begin
                        field_storage_r1_b_value[i0][i1][i2] <= 1'h0;
                    end else if(field_combo_r1_b_load_next[i0][i1][i2]) begin
                        field_storage_r1_b_value[i0][i1][i2] <= field_combo_r1_b_next[i0][i1][i2];
                    end
                end
                assign hwif_out_r1_b[i0][i1][i2] = field_storage_r1_b_value[i0][i1][i2];
                // always_comb begin
                always @(*) begin
                    logic [0:0] next_c;
                    logic load_next_c;
                    next_c = field_storage_r1_c_value[i0][i1][i2];
                    load_next_c = '0;
                    if(decoded_reg_strb_r1[i0][i1][i2] && decoded_req_is_wr) begin // SW write
                        next_c = (field_storage_r1_c_value[i0][i1][i2] & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
                        load_next_c = '1;
                    end
                    field_combo_r1_c_next[i0][i1][i2] = next_c;
                    field_combo_r1_c_load_next[i0][i1][i2] = load_next_c;
                end
                always_ff @(posedge clk) begin
                    if(rst) begin
                        field_storage_r1_c_value[i0][i1][i2] <= 1'h1;
                    end else if(field_combo_r1_c_load_next[i0][i1][i2]) begin
                        field_storage_r1_c_value[i0][i1][i2] <= field_combo_r1_c_next[i0][i1][i2];
                    end
                end
                assign hwif_out_r1_c[i0][i1][i2] = field_storage_r1_c_value[i0][i1][i2];
            end
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_r2_a_value;
        load_next_c = '0;
        if(decoded_reg_strb_r2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_r2_a_value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo_r2_a_next = next_c;
        field_combo_r2_a_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r2_a_value <= 8'h11;
        end else if(field_combo_r2_a_load_next) begin
            field_storage_r2_a_value <= field_combo_r2_a_next;
        end
    end
    assign hwif_out_r2_a = field_storage_r2_a_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_r2_b_value;
        load_next_c = '0;
        if(decoded_reg_strb_r2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_r2_b_value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo_r2_b_next = next_c;
        field_combo_r2_b_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r2_b_value <= 1'h0;
        end else if(field_combo_r2_b_load_next) begin
            field_storage_r2_b_value <= field_combo_r2_b_next;
        end
    end
    assign hwif_out_r2_b = field_storage_r2_b_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_r2_c_value;
        load_next_c = '0;
        if(decoded_reg_strb_r2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_r2_c_value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end
        field_combo_r2_c_next = next_c;
        field_combo_r2_c_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r2_c_value <= 1'h1;
        end else if(field_combo_r2_c_load_next) begin
            field_storage_r2_c_value <= field_combo_r2_c_next;
        end
    end
    assign hwif_out_r2_c = field_storage_r2_c_value;
    for(genvar i0=0; i0<2; i0++) begin : gen_loop_36
        for(genvar i1=0; i1<4; i1++) begin : gen_loop_37
            // always_comb begin
            always @(*) begin
                logic [3:0] next_c;
                logic load_next_c;
                next_c = field_storage_sub2_r1_x_value[i0][i1];
                load_next_c = '0;
                if(decoded_reg_strb_sub2_r1[i0][i1] && decoded_req_is_wr) begin // SW write
                    next_c = (field_storage_sub2_r1_x_value[i0][i1] & ~decoded_wr_biten[7:4]) | (decoded_wr_data[7:4] & decoded_wr_biten[7:4]);
                    load_next_c = '1;
                end
                field_combo_sub2_r1_x_next[i0][i1] = next_c;
                field_combo_sub2_r1_x_load_next[i0][i1] = load_next_c;
            end
            always_ff @(posedge clk) begin
                if(rst) begin
                    field_storage_sub2_r1_x_value[i0][i1] <= 4'h1;
                end else if(field_combo_sub2_r1_x_load_next[i0][i1]) begin
                    field_storage_sub2_r1_x_value[i0][i1] <= field_combo_sub2_r1_x_next[i0][i1];
                end
            end
            assign hwif_out_sub2_r1_x[i0][i1] = field_storage_sub2_r1_x_value[i0][i1];
        end
        for(genvar i1=0; i1<2; i1++) begin : gen_loop_38
            // always_comb begin
            always @(*) begin
                logic [3:0] next_c;
                logic load_next_c;
                next_c = field_storage_sub2_sub_r1_x_value[i0][i1];
                load_next_c = '0;
                if(decoded_reg_strb_sub2_sub_r1[i0][i1] && decoded_req_is_wr) begin // SW write
                    next_c = (field_storage_sub2_sub_r1_x_value[i0][i1] & ~decoded_wr_biten[7:4]) | (decoded_wr_data[7:4] & decoded_wr_biten[7:4]);
                    load_next_c = '1;
                end
                field_combo_sub2_sub_r1_x_next[i0][i1] = next_c;
                field_combo_sub2_sub_r1_x_load_next[i0][i1] = load_next_c;
            end
            always_ff @(posedge clk) begin
                if(rst) begin
                    field_storage_sub2_sub_r1_x_value[i0][i1] <= 4'h1;
                end else if(field_combo_sub2_sub_r1_x_load_next[i0][i1]) begin
                    field_storage_sub2_sub_r1_x_value[i0][i1] <= field_combo_sub2_sub_r1_x_next[i0][i1];
                end
            end
            assign hwif_out_sub2_sub_r1_x[i0][i1] = field_storage_sub2_sub_r1_x_value[i0][i1];
            for(genvar i2=0; i2<2; i2++) begin : gen_loop_39
                // always_comb begin
                always @(*) begin
                    logic [3:0] next_c;
                    logic load_next_c;
                    next_c = field_storage_sub2_sub_r2_x_value[i0][i1][i2];
                    load_next_c = '0;
                    if(decoded_reg_strb_sub2_sub_r2[i0][i1][i2] && decoded_req_is_wr) begin // SW write
                        next_c = (field_storage_sub2_sub_r2_x_value[i0][i1][i2] & ~decoded_wr_biten[7:4]) | (decoded_wr_data[7:4] & decoded_wr_biten[7:4]);
                        load_next_c = '1;
                    end
                    field_combo_sub2_sub_r2_x_next[i0][i1][i2] = next_c;
                    field_combo_sub2_sub_r2_x_load_next[i0][i1][i2] = load_next_c;
                end
                always_ff @(posedge clk) begin
                    if(rst) begin
                        field_storage_sub2_sub_r2_x_value[i0][i1][i2] <= 4'h1;
                    end else if(field_combo_sub2_sub_r2_x_load_next[i0][i1][i2]) begin
                        field_storage_sub2_sub_r2_x_value[i0][i1][i2] <= field_combo_sub2_sub_r2_x_next[i0][i1][i2];
                    end
                end
                assign hwif_out_sub2_sub_r2_x[i0][i1][i2] = field_storage_sub2_sub_r2_x_value[i0][i1][i2];
            end
            // always_comb begin
            always @(*) begin
                logic [3:0] next_c;
                logic load_next_c;
                next_c = field_storage_sub2_sub_r3_x_value[i0][i1];
                load_next_c = '0;
                if(decoded_reg_strb_sub2_sub_r3[i0][i1] && decoded_req_is_wr) begin // SW write
                    next_c = (field_storage_sub2_sub_r3_x_value[i0][i1] & ~decoded_wr_biten[7:4]) | (decoded_wr_data[7:4] & decoded_wr_biten[7:4]);
                    load_next_c = '1;
                end
                field_combo_sub2_sub_r3_x_next[i0][i1] = next_c;
                field_combo_sub2_sub_r3_x_load_next[i0][i1] = load_next_c;
            end
            always_ff @(posedge clk) begin
                if(rst) begin
                    field_storage_sub2_sub_r3_x_value[i0][i1] <= 4'h1;
                end else if(field_combo_sub2_sub_r3_x_load_next[i0][i1]) begin
                    field_storage_sub2_sub_r3_x_value[i0][i1] <= field_combo_sub2_sub_r3_x_next[i0][i1];
                end
            end
            assign hwif_out_sub2_sub_r3_x[i0][i1] = field_storage_sub2_sub_r3_x_value[i0][i1];
        end
        for(genvar i1=0; i1<4; i1++) begin : gen_loop_40
            // always_comb begin
            always @(*) begin
                logic [3:0] next_c;
                logic load_next_c;
                next_c = field_storage_sub2_r2_x_value[i0][i1];
                load_next_c = '0;
                if(decoded_reg_strb_sub2_r2[i0][i1] && decoded_req_is_wr) begin // SW write
                    next_c = (field_storage_sub2_r2_x_value[i0][i1] & ~decoded_wr_biten[7:4]) | (decoded_wr_data[7:4] & decoded_wr_biten[7:4]);
                    load_next_c = '1;
                end
                field_combo_sub2_r2_x_next[i0][i1] = next_c;
                field_combo_sub2_r2_x_load_next[i0][i1] = load_next_c;
            end
            always_ff @(posedge clk) begin
                if(rst) begin
                    field_storage_sub2_r2_x_value[i0][i1] <= 4'h1;
                end else if(field_combo_sub2_r2_x_load_next[i0][i1]) begin
                    field_storage_sub2_r2_x_value[i0][i1] <= field_combo_sub2_r2_x_next[i0][i1];
                end
            end
            assign hwif_out_sub2_r2_x[i0][i1] = field_storage_sub2_r2_x_value[i0][i1];
        end
    end
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_r3_x_value;
        load_next_c = '0;
        if(decoded_reg_strb_r3 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_r3_x_value & ~decoded_wr_biten[7:4]) | (decoded_wr_data[7:4] & decoded_wr_biten[7:4]);
            load_next_c = '1;
        end
        field_combo_r3_x_next = next_c;
        field_combo_r3_x_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r3_x_value <= 4'h1;
        end else if(field_combo_r3_x_load_next) begin
            field_storage_r3_x_value <= field_combo_r3_x_next;
        end
    end
    assign hwif_out_r3_x = field_storage_r3_x_value;
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_rw_reg_f1_value;
        load_next_c = '0;
        if(decoded_reg_strb_rw_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_rw_reg_f1_value & ~decoded_wr_biten[19:12]) | (decoded_wr_data[19:12] & decoded_wr_biten[19:12]);
            load_next_c = '1;
        end
        field_combo_rw_reg_f1_next = next_c;
        field_combo_rw_reg_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_rw_reg_f1_value <= 8'h0;
        end else if(field_combo_rw_reg_f1_load_next) begin
            field_storage_rw_reg_f1_value <= field_combo_rw_reg_f1_next;
        end
    end
    assign hwif_out_rw_reg_f1 = field_storage_rw_reg_f1_value;
    // always_comb begin
    always @(*) begin
        logic [10:0] next_c;
        logic load_next_c;
        next_c = field_storage_rw_reg_f2_value;
        load_next_c = '0;
        if(decoded_reg_strb_rw_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_rw_reg_f2_value & ~decoded_wr_biten[30:20]) | (decoded_wr_data[30:20] & decoded_wr_biten[30:20]);
            load_next_c = '1;
        end
        field_combo_rw_reg_f2_next = next_c;
        field_combo_rw_reg_f2_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_rw_reg_f2_value <= 11'h0;
        end else if(field_combo_rw_reg_f2_load_next) begin
            field_storage_rw_reg_f2_value <= field_combo_rw_reg_f2_next;
        end
    end
    assign hwif_out_rw_reg_f2 = field_storage_rw_reg_f2_value;
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_rw_reg_lsb0_f1_value;
        load_next_c = '0;
        if(decoded_reg_strb_rw_reg_lsb0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_rw_reg_lsb0_f1_value & ~decoded_wr_biten_bswap[19:12]) | (decoded_wr_data_bswap[19:12] & decoded_wr_biten_bswap[19:12]);
            load_next_c = '1;
        end
        field_combo_rw_reg_lsb0_f1_next = next_c;
        field_combo_rw_reg_lsb0_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_rw_reg_lsb0_f1_value <= 8'h0;
        end else if(field_combo_rw_reg_lsb0_f1_load_next) begin
            field_storage_rw_reg_lsb0_f1_value <= field_combo_rw_reg_lsb0_f1_next;
        end
    end
    assign hwif_out_rw_reg_lsb0_f1 = field_storage_rw_reg_lsb0_f1_value;
    // always_comb begin
    always @(*) begin
        logic [10:0] next_c;
        logic load_next_c;
        next_c = field_storage_rw_reg_lsb0_f2_value;
        load_next_c = '0;
        if(decoded_reg_strb_rw_reg_lsb0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_rw_reg_lsb0_f2_value & ~decoded_wr_biten_bswap[11:1]) | (decoded_wr_data_bswap[11:1] & decoded_wr_biten_bswap[11:1]);
            load_next_c = '1;
        end
        field_combo_rw_reg_lsb0_f2_next = next_c;
        field_combo_rw_reg_lsb0_f2_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_rw_reg_lsb0_f2_value <= 11'h0;
        end else if(field_combo_rw_reg_lsb0_f2_load_next) begin
            field_storage_rw_reg_lsb0_f2_value <= field_combo_rw_reg_lsb0_f2_next;
        end
    end
    assign hwif_out_rw_reg_lsb0_f2 = field_storage_rw_reg_lsb0_f2_value;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

//--------------------------------------------------------------------------
// Readback
//--------------------------------------------------------------------------
    logic readback_external_rd_ack;
    assign readback_external_rd_ack = 0;

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[61];
    assign readback_array[0][7:0] = (decoded_reg_strb_r0 && !decoded_req_is_wr) ? field_storage_r0_a_value : '0;
    assign readback_array[0][8:8] = (decoded_reg_strb_r0 && !decoded_req_is_wr) ? field_storage_r0_b_value : '0;
    assign readback_array[0][30:9] = '0;
    assign readback_array[0][31:31] = (decoded_reg_strb_r0 && !decoded_req_is_wr) ? field_storage_r0_c_value : '0;
    for(genvar i0=0; i0<2; i0++) begin : gen_loop_1
        for(genvar i1=0; i1<3; i1++) begin : gen_loop_2
            for(genvar i2=0; i2<4; i2++) begin : gen_loop_3
                assign readback_array[i0*12 + i1*4 + i2*1 + 1][7:0] = (decoded_reg_strb_r1[i0][i1][i2] && !decoded_req_is_wr) ? field_storage_r1_a_value[i0][i1][i2] : '0;
                assign readback_array[i0*12 + i1*4 + i2*1 + 1][8:8] = (decoded_reg_strb_r1[i0][i1][i2] && !decoded_req_is_wr) ? field_storage_r1_b_value[i0][i1][i2] : '0;
                assign readback_array[i0*12 + i1*4 + i2*1 + 1][30:9] = '0;
                assign readback_array[i0*12 + i1*4 + i2*1 + 1][31:31] = (decoded_reg_strb_r1[i0][i1][i2] && !decoded_req_is_wr) ? field_storage_r1_c_value[i0][i1][i2] : '0;
            end
        end
    end
    assign readback_array[25][7:0] = (decoded_reg_strb_r2 && !decoded_req_is_wr) ? field_storage_r2_a_value : '0;
    assign readback_array[25][8:8] = (decoded_reg_strb_r2 && !decoded_req_is_wr) ? field_storage_r2_b_value : '0;
    assign readback_array[25][30:9] = '0;
    assign readback_array[25][31:31] = (decoded_reg_strb_r2 && !decoded_req_is_wr) ? field_storage_r2_c_value : '0;
    for(genvar i0=0; i0<2; i0++) begin : gen_loop_4
        for(genvar i1=0; i1<4; i1++) begin : gen_loop_5
            assign readback_array[i0*16 + i1*1 + 26][3:0] = '0;
            assign readback_array[i0*16 + i1*1 + 26][7:4] = (decoded_reg_strb_sub2_r1[i0][i1] && !decoded_req_is_wr) ? field_storage_sub2_r1_x_value[i0][i1] : '0;
            assign readback_array[i0*16 + i1*1 + 26][31:8] = '0;
        end
        for(genvar i1=0; i1<2; i1++) begin : gen_loop_6
            assign readback_array[i0*16 + i1*4 + 30][3:0] = '0;
            assign readback_array[i0*16 + i1*4 + 30][7:4] = (decoded_reg_strb_sub2_sub_r1[i0][i1] && !decoded_req_is_wr) ? field_storage_sub2_sub_r1_x_value[i0][i1] : '0;
            assign readback_array[i0*16 + i1*4 + 30][31:8] = '0;
            for(genvar i2=0; i2<2; i2++) begin : gen_loop_7
                assign readback_array[i0*16 + i1*4 + i2*1 + 31][3:0] = '0;
                assign readback_array[i0*16 + i1*4 + i2*1 + 31][7:4] = (decoded_reg_strb_sub2_sub_r2[i0][i1][i2] && !decoded_req_is_wr) ? field_storage_sub2_sub_r2_x_value[i0][i1][i2] : '0;
                assign readback_array[i0*16 + i1*4 + i2*1 + 31][31:8] = '0;
            end
            assign readback_array[i0*16 + i1*4 + 33][3:0] = '0;
            assign readback_array[i0*16 + i1*4 + 33][7:4] = (decoded_reg_strb_sub2_sub_r3[i0][i1] && !decoded_req_is_wr) ? field_storage_sub2_sub_r3_x_value[i0][i1] : '0;
            assign readback_array[i0*16 + i1*4 + 33][31:8] = '0;
        end
        for(genvar i1=0; i1<4; i1++) begin : gen_loop_8
            assign readback_array[i0*16 + i1*1 + 38][3:0] = '0;
            assign readback_array[i0*16 + i1*1 + 38][7:4] = (decoded_reg_strb_sub2_r2[i0][i1] && !decoded_req_is_wr) ? field_storage_sub2_r2_x_value[i0][i1] : '0;
            assign readback_array[i0*16 + i1*1 + 38][31:8] = '0;
        end
    end
    assign readback_array[58][3:0] = '0;
    assign readback_array[58][7:4] = (decoded_reg_strb_r3 && !decoded_req_is_wr) ? field_storage_r3_x_value : '0;
    assign readback_array[58][31:8] = '0;
    assign readback_array[59][11:0] = '0;
    assign readback_array[59][19:12] = (decoded_reg_strb_rw_reg && !decoded_req_is_wr) ? field_storage_rw_reg_f1_value : '0;
    assign readback_array[59][30:20] = (decoded_reg_strb_rw_reg && !decoded_req_is_wr) ? field_storage_rw_reg_f2_value : '0;
    assign readback_array[59][31:31] = '0;
    assign readback_array[60][11:0] = '0;
    assign readback_array[60][19:12] = (decoded_reg_strb_rw_reg_lsb0 && !decoded_req_is_wr) ? {field_storage_rw_reg_lsb0_f1_value[0], field_storage_rw_reg_lsb0_f1_value[1], field_storage_rw_reg_lsb0_f1_value[2], field_storage_rw_reg_lsb0_f1_value[3], field_storage_rw_reg_lsb0_f1_value[4], field_storage_rw_reg_lsb0_f1_value[5], field_storage_rw_reg_lsb0_f1_value[6], field_storage_rw_reg_lsb0_f1_value[7]} : '0;
    assign readback_array[60][30:20] = (decoded_reg_strb_rw_reg_lsb0 && !decoded_req_is_wr) ? {field_storage_rw_reg_lsb0_f2_value[0], field_storage_rw_reg_lsb0_f2_value[1], field_storage_rw_reg_lsb0_f2_value[2], field_storage_rw_reg_lsb0_f2_value[3], field_storage_rw_reg_lsb0_f2_value[4], field_storage_rw_reg_lsb0_f2_value[5], field_storage_rw_reg_lsb0_f2_value[6], field_storage_rw_reg_lsb0_f2_value[7], field_storage_rw_reg_lsb0_f2_value[8], field_storage_rw_reg_lsb0_f2_value[9], field_storage_rw_reg_lsb0_f2_value[10]} : '0;
    assign readback_array[60][31:31] = '0;

    // Reduce the array
    // always_comb begin
    always @(*) begin
        logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<61; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
