// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module regblock (
        input wire clk,
        input wire rst,

        input wire s_apb_psel,
        input wire s_apb_penable,
        input wire s_apb_pwrite,
        input wire [2:0] s_apb_pprot,
        input wire [13:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,

        output regblock_pkg::regblock__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [13:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    // Request
    logic is_active;
    always_ff @(posedge clk) begin
        if(rst) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= {s_apb_paddr[13:2], 2'b0};
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<4; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic r0;
        logic r1[2][3][4];
        logic r2;
        struct {
            logic r1[4];
            struct {
                logic r1;
                logic r2[2];
                logic r3;
            } sub[2];
            logic r2[4];
        } sub2[2];
        logic r3;
        logic rw_reg;
        logic rw_reg_lsb0;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        decoded_reg_strb.r0 = cpuif_req_masked & (cpuif_addr == 14'h0);
        for(int i0=0; i0<2; i0++) begin
            for(int i1=0; i1<3; i1++) begin
                for(int i2=0; i2<4; i2++) begin
                    decoded_reg_strb.r1[i0][i1][i2] = cpuif_req_masked & (cpuif_addr == 14'h10 + (14)'(i0) * 14'h60 + (14)'(i1) * 14'h20 + (14)'(i2) * 14'h8);
                end
            end
        end
        decoded_reg_strb.r2 = cpuif_req_masked & (cpuif_addr == 14'h1000);
        for(int i0=0; i0<2; i0++) begin
            for(int i1=0; i1<4; i1++) begin
                decoded_reg_strb.sub2[i0].r1[i1] = cpuif_req_masked & (cpuif_addr == 14'h2000 + (14)'(i0) * 14'h40 + (14)'(i1) * 14'h4);
            end
            for(int i1=0; i1<2; i1++) begin
                decoded_reg_strb.sub2[i0].sub[i1].r1 = cpuif_req_masked & (cpuif_addr == 14'h2010 + (14)'(i0) * 14'h40 + (14)'(i1) * 14'h10);
                for(int i2=0; i2<2; i2++) begin
                    decoded_reg_strb.sub2[i0].sub[i1].r2[i2] = cpuif_req_masked & (cpuif_addr == 14'h2014 + (14)'(i0) * 14'h40 + (14)'(i1) * 14'h10 + (14)'(i2) * 14'h4);
                end
                decoded_reg_strb.sub2[i0].sub[i1].r3 = cpuif_req_masked & (cpuif_addr == 14'h201c + (14)'(i0) * 14'h40 + (14)'(i1) * 14'h10);
            end
            for(int i1=0; i1<4; i1++) begin
                decoded_reg_strb.sub2[i0].r2[i1] = cpuif_req_masked & (cpuif_addr == 14'h2030 + (14)'(i0) * 14'h40 + (14)'(i1) * 14'h4);
            end
        end
        decoded_reg_strb.r3 = cpuif_req_masked & (cpuif_addr == 14'h2080);
        decoded_reg_strb.rw_reg = cpuif_req_masked & (cpuif_addr == 14'h3000);
        decoded_reg_strb.rw_reg_lsb0 = cpuif_req_masked & (cpuif_addr == 14'h3004);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    // bitswap for use by fields with msb0 ordering
    logic [31:0] decoded_wr_data_bswap;
    logic [31:0] decoded_wr_biten_bswap;
    assign decoded_wr_data_bswap = {<<{decoded_wr_data}};
    assign decoded_wr_biten_bswap = {<<{decoded_wr_biten}};
    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } a;
            struct {
                logic next;
                logic load_next;
            } b;
            struct {
                logic next;
                logic load_next;
            } c;
        } r0;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } a;
            struct {
                logic next;
                logic load_next;
            } b;
            struct {
                logic next;
                logic load_next;
            } c;
        } r1[2][3][4];
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } a;
            struct {
                logic next;
                logic load_next;
            } b;
            struct {
                logic next;
                logic load_next;
            } c;
        } r2;
        struct {
            struct {
                struct {
                    logic [3:0] next;
                    logic load_next;
                } x;
            } r1[4];
            struct {
                struct {
                    struct {
                        logic [3:0] next;
                        logic load_next;
                    } x;
                } r1;
                struct {
                    struct {
                        logic [3:0] next;
                        logic load_next;
                    } x;
                } r2[2];
                struct {
                    struct {
                        logic [3:0] next;
                        logic load_next;
                    } x;
                } r3;
            } sub[2];
            struct {
                struct {
                    logic [3:0] next;
                    logic load_next;
                } x;
            } r2[4];
        } sub2[2];
        struct {
            struct {
                logic [3:0] next;
                logic load_next;
            } x;
        } r3;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } f1;
            struct {
                logic [10:0] next;
                logic load_next;
            } f2;
        } rw_reg;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } f1;
            struct {
                logic [10:0] next;
                logic load_next;
            } f2;
        } rw_reg_lsb0;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic [7:0] value;
            } a;
            struct {
                logic value;
            } b;
            struct {
                logic value;
            } c;
        } r0;
        struct {
            struct {
                logic [7:0] value;
            } a;
            struct {
                logic value;
            } b;
            struct {
                logic value;
            } c;
        } r1[2][3][4];
        struct {
            struct {
                logic [7:0] value;
            } a;
            struct {
                logic value;
            } b;
            struct {
                logic value;
            } c;
        } r2;
        struct {
            struct {
                struct {
                    logic [3:0] value;
                } x;
            } r1[4];
            struct {
                struct {
                    struct {
                        logic [3:0] value;
                    } x;
                } r1;
                struct {
                    struct {
                        logic [3:0] value;
                    } x;
                } r2[2];
                struct {
                    struct {
                        logic [3:0] value;
                    } x;
                } r3;
            } sub[2];
            struct {
                struct {
                    logic [3:0] value;
                } x;
            } r2[4];
        } sub2[2];
        struct {
            struct {
                logic [3:0] value;
            } x;
        } r3;
        struct {
            struct {
                logic [7:0] value;
            } f1;
            struct {
                logic [10:0] value;
            } f2;
        } rw_reg;
        struct {
            struct {
                logic [7:0] value;
            } f1;
            struct {
                logic [10:0] value;
            } f2;
        } rw_reg_lsb0;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: regblock.r0.a
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.r0.a.value;
        load_next_c = '0;
        if(decoded_reg_strb.r0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.r0.a.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo.r0.a.next = next_c;
        field_combo.r0.a.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.r0.a.value <= 8'h42;
        end else begin
            if(field_combo.r0.a.load_next) begin
                field_storage.r0.a.value <= field_combo.r0.a.next;
            end
        end
    end
    assign hwif_out.r0.a.value = field_storage.r0.a.value;
    // Field: regblock.r0.b
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.r0.b.value;
        load_next_c = '0;
        if(decoded_reg_strb.r0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.r0.b.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo.r0.b.next = next_c;
        field_combo.r0.b.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.r0.b.value <= 1'h0;
        end else begin
            if(field_combo.r0.b.load_next) begin
                field_storage.r0.b.value <= field_combo.r0.b.next;
            end
        end
    end
    assign hwif_out.r0.b.value = field_storage.r0.b.value;
    // Field: regblock.r0.c
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.r0.c.value;
        load_next_c = '0;
        if(decoded_reg_strb.r0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.r0.c.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end
        field_combo.r0.c.next = next_c;
        field_combo.r0.c.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.r0.c.value <= 1'h1;
        end else begin
            if(field_combo.r0.c.load_next) begin
                field_storage.r0.c.value <= field_combo.r0.c.next;
            end
        end
    end
    assign hwif_out.r0.c.value = field_storage.r0.c.value;
    for(genvar i0=0; i0<2; i0++) begin
        for(genvar i1=0; i1<3; i1++) begin
            for(genvar i2=0; i2<4; i2++) begin
                // Field: regblock.r1[][][].a
                always_comb begin
                    automatic logic [7:0] next_c;
                    automatic logic load_next_c;
                    next_c = field_storage.r1[i0][i1][i2].a.value;
                    load_next_c = '0;
                    if(decoded_reg_strb.r1[i0][i1][i2] && decoded_req_is_wr) begin // SW write
                        next_c = (field_storage.r1[i0][i1][i2].a.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
                        load_next_c = '1;
                    end
                    field_combo.r1[i0][i1][i2].a.next = next_c;
                    field_combo.r1[i0][i1][i2].a.load_next = load_next_c;
                end
                always_ff @(posedge clk) begin
                    if(rst) begin
                        field_storage.r1[i0][i1][i2].a.value <= 8'h23;
                    end else begin
                        if(field_combo.r1[i0][i1][i2].a.load_next) begin
                            field_storage.r1[i0][i1][i2].a.value <= field_combo.r1[i0][i1][i2].a.next;
                        end
                    end
                end
                assign hwif_out.r1[i0][i1][i2].a.value = field_storage.r1[i0][i1][i2].a.value;
                // Field: regblock.r1[][][].b
                always_comb begin
                    automatic logic [0:0] next_c;
                    automatic logic load_next_c;
                    next_c = field_storage.r1[i0][i1][i2].b.value;
                    load_next_c = '0;
                    if(decoded_reg_strb.r1[i0][i1][i2] && decoded_req_is_wr) begin // SW write
                        next_c = (field_storage.r1[i0][i1][i2].b.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
                        load_next_c = '1;
                    end
                    field_combo.r1[i0][i1][i2].b.next = next_c;
                    field_combo.r1[i0][i1][i2].b.load_next = load_next_c;
                end
                always_ff @(posedge clk) begin
                    if(rst) begin
                        field_storage.r1[i0][i1][i2].b.value <= 1'h0;
                    end else begin
                        if(field_combo.r1[i0][i1][i2].b.load_next) begin
                            field_storage.r1[i0][i1][i2].b.value <= field_combo.r1[i0][i1][i2].b.next;
                        end
                    end
                end
                assign hwif_out.r1[i0][i1][i2].b.value = field_storage.r1[i0][i1][i2].b.value;
                // Field: regblock.r1[][][].c
                always_comb begin
                    automatic logic [0:0] next_c;
                    automatic logic load_next_c;
                    next_c = field_storage.r1[i0][i1][i2].c.value;
                    load_next_c = '0;
                    if(decoded_reg_strb.r1[i0][i1][i2] && decoded_req_is_wr) begin // SW write
                        next_c = (field_storage.r1[i0][i1][i2].c.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
                        load_next_c = '1;
                    end
                    field_combo.r1[i0][i1][i2].c.next = next_c;
                    field_combo.r1[i0][i1][i2].c.load_next = load_next_c;
                end
                always_ff @(posedge clk) begin
                    if(rst) begin
                        field_storage.r1[i0][i1][i2].c.value <= 1'h1;
                    end else begin
                        if(field_combo.r1[i0][i1][i2].c.load_next) begin
                            field_storage.r1[i0][i1][i2].c.value <= field_combo.r1[i0][i1][i2].c.next;
                        end
                    end
                end
                assign hwif_out.r1[i0][i1][i2].c.value = field_storage.r1[i0][i1][i2].c.value;
            end
        end
    end
    // Field: regblock.r2.a
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.r2.a.value;
        load_next_c = '0;
        if(decoded_reg_strb.r2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.r2.a.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo.r2.a.next = next_c;
        field_combo.r2.a.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.r2.a.value <= 8'h11;
        end else begin
            if(field_combo.r2.a.load_next) begin
                field_storage.r2.a.value <= field_combo.r2.a.next;
            end
        end
    end
    assign hwif_out.r2.a.value = field_storage.r2.a.value;
    // Field: regblock.r2.b
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.r2.b.value;
        load_next_c = '0;
        if(decoded_reg_strb.r2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.r2.b.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo.r2.b.next = next_c;
        field_combo.r2.b.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.r2.b.value <= 1'h0;
        end else begin
            if(field_combo.r2.b.load_next) begin
                field_storage.r2.b.value <= field_combo.r2.b.next;
            end
        end
    end
    assign hwif_out.r2.b.value = field_storage.r2.b.value;
    // Field: regblock.r2.c
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.r2.c.value;
        load_next_c = '0;
        if(decoded_reg_strb.r2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.r2.c.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end
        field_combo.r2.c.next = next_c;
        field_combo.r2.c.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.r2.c.value <= 1'h1;
        end else begin
            if(field_combo.r2.c.load_next) begin
                field_storage.r2.c.value <= field_combo.r2.c.next;
            end
        end
    end
    assign hwif_out.r2.c.value = field_storage.r2.c.value;
    for(genvar i0=0; i0<2; i0++) begin
        for(genvar i1=0; i1<4; i1++) begin
            // Field: regblock.sub2[].r1[].x
            always_comb begin
                automatic logic [3:0] next_c;
                automatic logic load_next_c;
                next_c = field_storage.sub2[i0].r1[i1].x.value;
                load_next_c = '0;
                if(decoded_reg_strb.sub2[i0].r1[i1] && decoded_req_is_wr) begin // SW write
                    next_c = (field_storage.sub2[i0].r1[i1].x.value & ~decoded_wr_biten[7:4]) | (decoded_wr_data[7:4] & decoded_wr_biten[7:4]);
                    load_next_c = '1;
                end
                field_combo.sub2[i0].r1[i1].x.next = next_c;
                field_combo.sub2[i0].r1[i1].x.load_next = load_next_c;
            end
            always_ff @(posedge clk) begin
                if(rst) begin
                    field_storage.sub2[i0].r1[i1].x.value <= 4'h1;
                end else begin
                    if(field_combo.sub2[i0].r1[i1].x.load_next) begin
                        field_storage.sub2[i0].r1[i1].x.value <= field_combo.sub2[i0].r1[i1].x.next;
                    end
                end
            end
            assign hwif_out.sub2[i0].r1[i1].x.value = field_storage.sub2[i0].r1[i1].x.value;
        end
        for(genvar i1=0; i1<2; i1++) begin
            // Field: regblock.sub2[].sub[].r1.x
            always_comb begin
                automatic logic [3:0] next_c;
                automatic logic load_next_c;
                next_c = field_storage.sub2[i0].sub[i1].r1.x.value;
                load_next_c = '0;
                if(decoded_reg_strb.sub2[i0].sub[i1].r1 && decoded_req_is_wr) begin // SW write
                    next_c = (field_storage.sub2[i0].sub[i1].r1.x.value & ~decoded_wr_biten[7:4]) | (decoded_wr_data[7:4] & decoded_wr_biten[7:4]);
                    load_next_c = '1;
                end
                field_combo.sub2[i0].sub[i1].r1.x.next = next_c;
                field_combo.sub2[i0].sub[i1].r1.x.load_next = load_next_c;
            end
            always_ff @(posedge clk) begin
                if(rst) begin
                    field_storage.sub2[i0].sub[i1].r1.x.value <= 4'h1;
                end else begin
                    if(field_combo.sub2[i0].sub[i1].r1.x.load_next) begin
                        field_storage.sub2[i0].sub[i1].r1.x.value <= field_combo.sub2[i0].sub[i1].r1.x.next;
                    end
                end
            end
            assign hwif_out.sub2[i0].sub[i1].r1.x.value = field_storage.sub2[i0].sub[i1].r1.x.value;
            for(genvar i2=0; i2<2; i2++) begin
                // Field: regblock.sub2[].sub[].r2[].x
                always_comb begin
                    automatic logic [3:0] next_c;
                    automatic logic load_next_c;
                    next_c = field_storage.sub2[i0].sub[i1].r2[i2].x.value;
                    load_next_c = '0;
                    if(decoded_reg_strb.sub2[i0].sub[i1].r2[i2] && decoded_req_is_wr) begin // SW write
                        next_c = (field_storage.sub2[i0].sub[i1].r2[i2].x.value & ~decoded_wr_biten[7:4]) | (decoded_wr_data[7:4] & decoded_wr_biten[7:4]);
                        load_next_c = '1;
                    end
                    field_combo.sub2[i0].sub[i1].r2[i2].x.next = next_c;
                    field_combo.sub2[i0].sub[i1].r2[i2].x.load_next = load_next_c;
                end
                always_ff @(posedge clk) begin
                    if(rst) begin
                        field_storage.sub2[i0].sub[i1].r2[i2].x.value <= 4'h1;
                    end else begin
                        if(field_combo.sub2[i0].sub[i1].r2[i2].x.load_next) begin
                            field_storage.sub2[i0].sub[i1].r2[i2].x.value <= field_combo.sub2[i0].sub[i1].r2[i2].x.next;
                        end
                    end
                end
                assign hwif_out.sub2[i0].sub[i1].r2[i2].x.value = field_storage.sub2[i0].sub[i1].r2[i2].x.value;
            end
            // Field: regblock.sub2[].sub[].r3.x
            always_comb begin
                automatic logic [3:0] next_c;
                automatic logic load_next_c;
                next_c = field_storage.sub2[i0].sub[i1].r3.x.value;
                load_next_c = '0;
                if(decoded_reg_strb.sub2[i0].sub[i1].r3 && decoded_req_is_wr) begin // SW write
                    next_c = (field_storage.sub2[i0].sub[i1].r3.x.value & ~decoded_wr_biten[7:4]) | (decoded_wr_data[7:4] & decoded_wr_biten[7:4]);
                    load_next_c = '1;
                end
                field_combo.sub2[i0].sub[i1].r3.x.next = next_c;
                field_combo.sub2[i0].sub[i1].r3.x.load_next = load_next_c;
            end
            always_ff @(posedge clk) begin
                if(rst) begin
                    field_storage.sub2[i0].sub[i1].r3.x.value <= 4'h1;
                end else begin
                    if(field_combo.sub2[i0].sub[i1].r3.x.load_next) begin
                        field_storage.sub2[i0].sub[i1].r3.x.value <= field_combo.sub2[i0].sub[i1].r3.x.next;
                    end
                end
            end
            assign hwif_out.sub2[i0].sub[i1].r3.x.value = field_storage.sub2[i0].sub[i1].r3.x.value;
        end
        for(genvar i1=0; i1<4; i1++) begin
            // Field: regblock.sub2[].r2[].x
            always_comb begin
                automatic logic [3:0] next_c;
                automatic logic load_next_c;
                next_c = field_storage.sub2[i0].r2[i1].x.value;
                load_next_c = '0;
                if(decoded_reg_strb.sub2[i0].r2[i1] && decoded_req_is_wr) begin // SW write
                    next_c = (field_storage.sub2[i0].r2[i1].x.value & ~decoded_wr_biten[7:4]) | (decoded_wr_data[7:4] & decoded_wr_biten[7:4]);
                    load_next_c = '1;
                end
                field_combo.sub2[i0].r2[i1].x.next = next_c;
                field_combo.sub2[i0].r2[i1].x.load_next = load_next_c;
            end
            always_ff @(posedge clk) begin
                if(rst) begin
                    field_storage.sub2[i0].r2[i1].x.value <= 4'h1;
                end else begin
                    if(field_combo.sub2[i0].r2[i1].x.load_next) begin
                        field_storage.sub2[i0].r2[i1].x.value <= field_combo.sub2[i0].r2[i1].x.next;
                    end
                end
            end
            assign hwif_out.sub2[i0].r2[i1].x.value = field_storage.sub2[i0].r2[i1].x.value;
        end
    end
    // Field: regblock.r3.x
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.r3.x.value;
        load_next_c = '0;
        if(decoded_reg_strb.r3 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.r3.x.value & ~decoded_wr_biten[7:4]) | (decoded_wr_data[7:4] & decoded_wr_biten[7:4]);
            load_next_c = '1;
        end
        field_combo.r3.x.next = next_c;
        field_combo.r3.x.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.r3.x.value <= 4'h1;
        end else begin
            if(field_combo.r3.x.load_next) begin
                field_storage.r3.x.value <= field_combo.r3.x.next;
            end
        end
    end
    assign hwif_out.r3.x.value = field_storage.r3.x.value;
    // Field: regblock.rw_reg.f1
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.rw_reg.f1.value;
        load_next_c = '0;
        if(decoded_reg_strb.rw_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.rw_reg.f1.value & ~decoded_wr_biten[19:12]) | (decoded_wr_data[19:12] & decoded_wr_biten[19:12]);
            load_next_c = '1;
        end
        field_combo.rw_reg.f1.next = next_c;
        field_combo.rw_reg.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.rw_reg.f1.value <= 8'h0;
        end else begin
            if(field_combo.rw_reg.f1.load_next) begin
                field_storage.rw_reg.f1.value <= field_combo.rw_reg.f1.next;
            end
        end
    end
    assign hwif_out.rw_reg.f1.value = field_storage.rw_reg.f1.value;
    // Field: regblock.rw_reg.f2
    always_comb begin
        automatic logic [10:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.rw_reg.f2.value;
        load_next_c = '0;
        if(decoded_reg_strb.rw_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.rw_reg.f2.value & ~decoded_wr_biten[30:20]) | (decoded_wr_data[30:20] & decoded_wr_biten[30:20]);
            load_next_c = '1;
        end
        field_combo.rw_reg.f2.next = next_c;
        field_combo.rw_reg.f2.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.rw_reg.f2.value <= 11'h0;
        end else begin
            if(field_combo.rw_reg.f2.load_next) begin
                field_storage.rw_reg.f2.value <= field_combo.rw_reg.f2.next;
            end
        end
    end
    assign hwif_out.rw_reg.f2.value = field_storage.rw_reg.f2.value;
    // Field: regblock.rw_reg_lsb0.f1
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.rw_reg_lsb0.f1.value;
        load_next_c = '0;
        if(decoded_reg_strb.rw_reg_lsb0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.rw_reg_lsb0.f1.value & ~decoded_wr_biten_bswap[19:12]) | (decoded_wr_data_bswap[19:12] & decoded_wr_biten_bswap[19:12]);
            load_next_c = '1;
        end
        field_combo.rw_reg_lsb0.f1.next = next_c;
        field_combo.rw_reg_lsb0.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.rw_reg_lsb0.f1.value <= 8'h0;
        end else begin
            if(field_combo.rw_reg_lsb0.f1.load_next) begin
                field_storage.rw_reg_lsb0.f1.value <= field_combo.rw_reg_lsb0.f1.next;
            end
        end
    end
    assign hwif_out.rw_reg_lsb0.f1.value = field_storage.rw_reg_lsb0.f1.value;
    // Field: regblock.rw_reg_lsb0.f2
    always_comb begin
        automatic logic [10:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.rw_reg_lsb0.f2.value;
        load_next_c = '0;
        if(decoded_reg_strb.rw_reg_lsb0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.rw_reg_lsb0.f2.value & ~decoded_wr_biten_bswap[11:1]) | (decoded_wr_data_bswap[11:1] & decoded_wr_biten_bswap[11:1]);
            load_next_c = '1;
        end
        field_combo.rw_reg_lsb0.f2.next = next_c;
        field_combo.rw_reg_lsb0.f2.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.rw_reg_lsb0.f2.value <= 11'h0;
        end else begin
            if(field_combo.rw_reg_lsb0.f2.load_next) begin
                field_storage.rw_reg_lsb0.f2.value <= field_combo.rw_reg_lsb0.f2.next;
            end
        end
    end
    assign hwif_out.rw_reg_lsb0.f2.value = field_storage.rw_reg_lsb0.f2.value;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[61];
    assign readback_array[0][7:0] = (decoded_reg_strb.r0 && !decoded_req_is_wr) ? field_storage.r0.a.value : '0;
    assign readback_array[0][8:8] = (decoded_reg_strb.r0 && !decoded_req_is_wr) ? field_storage.r0.b.value : '0;
    assign readback_array[0][30:9] = '0;
    assign readback_array[0][31:31] = (decoded_reg_strb.r0 && !decoded_req_is_wr) ? field_storage.r0.c.value : '0;
    for(genvar i0=0; i0<2; i0++) begin
        for(genvar i1=0; i1<3; i1++) begin
            for(genvar i2=0; i2<4; i2++) begin
                assign readback_array[i0 * 12 + i1 * 4 + i2 * 1 + 1][7:0] = (decoded_reg_strb.r1[i0][i1][i2] && !decoded_req_is_wr) ? field_storage.r1[i0][i1][i2].a.value : '0;
                assign readback_array[i0 * 12 + i1 * 4 + i2 * 1 + 1][8:8] = (decoded_reg_strb.r1[i0][i1][i2] && !decoded_req_is_wr) ? field_storage.r1[i0][i1][i2].b.value : '0;
                assign readback_array[i0 * 12 + i1 * 4 + i2 * 1 + 1][30:9] = '0;
                assign readback_array[i0 * 12 + i1 * 4 + i2 * 1 + 1][31:31] = (decoded_reg_strb.r1[i0][i1][i2] && !decoded_req_is_wr) ? field_storage.r1[i0][i1][i2].c.value : '0;
            end
        end
    end
    assign readback_array[25][7:0] = (decoded_reg_strb.r2 && !decoded_req_is_wr) ? field_storage.r2.a.value : '0;
    assign readback_array[25][8:8] = (decoded_reg_strb.r2 && !decoded_req_is_wr) ? field_storage.r2.b.value : '0;
    assign readback_array[25][30:9] = '0;
    assign readback_array[25][31:31] = (decoded_reg_strb.r2 && !decoded_req_is_wr) ? field_storage.r2.c.value : '0;
    for(genvar i0=0; i0<2; i0++) begin
        for(genvar i1=0; i1<4; i1++) begin
            assign readback_array[i0 * 16 + i1 * 1 + 26][3:0] = '0;
            assign readback_array[i0 * 16 + i1 * 1 + 26][7:4] = (decoded_reg_strb.sub2[i0].r1[i1] && !decoded_req_is_wr) ? field_storage.sub2[i0].r1[i1].x.value : '0;
            assign readback_array[i0 * 16 + i1 * 1 + 26][31:8] = '0;
        end
        for(genvar i1=0; i1<2; i1++) begin
            assign readback_array[i0 * 16 + i1 * 4 + 30][3:0] = '0;
            assign readback_array[i0 * 16 + i1 * 4 + 30][7:4] = (decoded_reg_strb.sub2[i0].sub[i1].r1 && !decoded_req_is_wr) ? field_storage.sub2[i0].sub[i1].r1.x.value : '0;
            assign readback_array[i0 * 16 + i1 * 4 + 30][31:8] = '0;
            for(genvar i2=0; i2<2; i2++) begin
                assign readback_array[i0 * 16 + i1 * 4 + i2 * 1 + 31][3:0] = '0;
                assign readback_array[i0 * 16 + i1 * 4 + i2 * 1 + 31][7:4] = (decoded_reg_strb.sub2[i0].sub[i1].r2[i2] && !decoded_req_is_wr) ? field_storage.sub2[i0].sub[i1].r2[i2].x.value : '0;
                assign readback_array[i0 * 16 + i1 * 4 + i2 * 1 + 31][31:8] = '0;
            end
            assign readback_array[i0 * 16 + i1 * 4 + 33][3:0] = '0;
            assign readback_array[i0 * 16 + i1 * 4 + 33][7:4] = (decoded_reg_strb.sub2[i0].sub[i1].r3 && !decoded_req_is_wr) ? field_storage.sub2[i0].sub[i1].r3.x.value : '0;
            assign readback_array[i0 * 16 + i1 * 4 + 33][31:8] = '0;
        end
        for(genvar i1=0; i1<4; i1++) begin
            assign readback_array[i0 * 16 + i1 * 1 + 38][3:0] = '0;
            assign readback_array[i0 * 16 + i1 * 1 + 38][7:4] = (decoded_reg_strb.sub2[i0].r2[i1] && !decoded_req_is_wr) ? field_storage.sub2[i0].r2[i1].x.value : '0;
            assign readback_array[i0 * 16 + i1 * 1 + 38][31:8] = '0;
        end
    end
    assign readback_array[58][3:0] = '0;
    assign readback_array[58][7:4] = (decoded_reg_strb.r3 && !decoded_req_is_wr) ? field_storage.r3.x.value : '0;
    assign readback_array[58][31:8] = '0;
    assign readback_array[59][11:0] = '0;
    assign readback_array[59][19:12] = (decoded_reg_strb.rw_reg && !decoded_req_is_wr) ? field_storage.rw_reg.f1.value : '0;
    assign readback_array[59][30:20] = (decoded_reg_strb.rw_reg && !decoded_req_is_wr) ? field_storage.rw_reg.f2.value : '0;
    assign readback_array[59][31:31] = '0;
    assign readback_array[60][11:0] = '0;
    assign readback_array[60][19:12] = (decoded_reg_strb.rw_reg_lsb0 && !decoded_req_is_wr) ? {<<{field_storage.rw_reg_lsb0.f1.value}} : '0;
    assign readback_array[60][30:20] = (decoded_reg_strb.rw_reg_lsb0 && !decoded_req_is_wr) ? {<<{field_storage.rw_reg_lsb0.f2.value}} : '0;
    assign readback_array[60][31:31] = '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<61; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
