// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock
//
// This is a wrapper module that flattens the hwif structs into individual signals

module regblock_wrapper (
        input wire clk,
        input wire rst,

        input wire s_apb_psel,
        input wire s_apb_penable,
        input wire s_apb_pwrite,
        input wire [2:0] s_apb_pprot,
        input wire [13:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,

        output logic [7:0] hwif_out_r0_a,
        output logic hwif_out_r0_b,
        output logic hwif_out_r0_c,
        output logic [3:0] [2:0] [1:0] [7:0] hwif_out_r1_a,
        output logic [3:0] [2:0] [1:0] hwif_out_r1_b,
        output logic [3:0] [2:0] [1:0] hwif_out_r1_c,
        output logic [7:0] hwif_out_r2_a,
        output logic hwif_out_r2_b,
        output logic hwif_out_r2_c,
        output logic [3:0] [1:0] [3:0] hwif_out_sub2_r1_x,
        output logic [1:0] [1:0] [3:0] hwif_out_sub2_sub_r1_x,
        output logic [1:0] [1:0] [1:0] [3:0] hwif_out_sub2_sub_r2_x,
        output logic [1:0] [1:0] [3:0] hwif_out_sub2_sub_r3_x,
        output logic [3:0] [1:0] [3:0] hwif_out_sub2_r2_x,
        output logic [3:0] hwif_out_r3_x,
        output logic [7:0] hwif_out_rw_reg_f1,
        output logic [10:0] hwif_out_rw_reg_f2,
        output logic [7:0] hwif_out_rw_reg_lsb0_f1,
        output logic [10:0] hwif_out_rw_reg_lsb0_f2
    );

    //--------------------------------------------------------------------------
    // Internal hwif struct signals
    //--------------------------------------------------------------------------
    regblock_pkg::regblock__out_t hwif_out;

    //--------------------------------------------------------------------------
    // Flatten struct to individual signals
    //--------------------------------------------------------------------------
    assign hwif_out_r0_a = hwif_out.r0.a.value;
    assign hwif_out_r0_b = hwif_out.r0.b.value;
    assign hwif_out_r0_c = hwif_out.r0.c.value;
    generate
        for (genvar i = 0; i <= 1; i++) begin
            for (genvar j = 0; j <= 2; j++) begin
                for (genvar k = 0; k <= 3; k++) begin
                    assign hwif_out_r1_a[k][j][i] = hwif_out.r1[i][j][k].a.value;
                end
            end
        end
    endgenerate
    generate
        for (genvar i = 0; i <= 1; i++) begin
            for (genvar j = 0; j <= 2; j++) begin
                for (genvar k = 0; k <= 3; k++) begin
                    assign hwif_out_r1_b[k][j][i] = hwif_out.r1[i][j][k].b.value;
                end
            end
        end
    endgenerate
    generate
        for (genvar i = 0; i <= 1; i++) begin
            for (genvar j = 0; j <= 2; j++) begin
                for (genvar k = 0; k <= 3; k++) begin
                    assign hwif_out_r1_c[k][j][i] = hwif_out.r1[i][j][k].c.value;
                end
            end
        end
    endgenerate
    assign hwif_out_r2_a = hwif_out.r2.a.value;
    assign hwif_out_r2_b = hwif_out.r2.b.value;
    assign hwif_out_r2_c = hwif_out.r2.c.value;
    generate
        for (genvar i = 0; i <= 1; i++) begin
            for (genvar j = 0; j <= 3; j++) begin
                assign hwif_out_sub2_r1_x[j][i] = hwif_out.sub2[i].r1[j].x.value;
            end
        end
    endgenerate
    generate
        for (genvar i = 0; i <= 1; i++) begin
            for (genvar j = 0; j <= 1; j++) begin
                assign hwif_out_sub2_sub_r1_x[j][i] = hwif_out.sub2[i].sub[j].r1.x.value;
            end
        end
    endgenerate
    generate
        for (genvar i = 0; i <= 1; i++) begin
            for (genvar j = 0; j <= 1; j++) begin
                for (genvar k = 0; k <= 1; k++) begin
                    assign hwif_out_sub2_sub_r2_x[k][j][i] = hwif_out.sub2[i].sub[j].r2[k].x.value;
                end
            end
        end
    endgenerate
    generate
        for (genvar i = 0; i <= 1; i++) begin
            for (genvar j = 0; j <= 1; j++) begin
                assign hwif_out_sub2_sub_r3_x[j][i] = hwif_out.sub2[i].sub[j].r3.x.value;
            end
        end
    endgenerate
    generate
        for (genvar i = 0; i <= 1; i++) begin
            for (genvar j = 0; j <= 3; j++) begin
                assign hwif_out_sub2_r2_x[j][i] = hwif_out.sub2[i].r2[j].x.value;
            end
        end
    endgenerate
    assign hwif_out_r3_x = hwif_out.r3.x.value;
    assign hwif_out_rw_reg_f1 = hwif_out.rw_reg.f1.value;
    assign hwif_out_rw_reg_f2 = hwif_out.rw_reg.f2.value;
    assign hwif_out_rw_reg_lsb0_f1 = hwif_out.rw_reg_lsb0.f1.value;
    assign hwif_out_rw_reg_lsb0_f2 = hwif_out.rw_reg_lsb0.f2.value;

    //--------------------------------------------------------------------------
    // Instantiate the main regblock module
    //--------------------------------------------------------------------------
    regblock i_regblock (
        .clk(clk),
        .rst(rst),

        .s_apb_psel(s_apb_psel),
        .s_apb_penable(s_apb_penable),
        .s_apb_pwrite(s_apb_pwrite),
        .s_apb_pprot(s_apb_pprot),
        .s_apb_paddr(s_apb_paddr),
        .s_apb_pwdata(s_apb_pwdata),
        .s_apb_pstrb(s_apb_pstrb),
        .s_apb_pready(s_apb_pready),
        .s_apb_prdata(s_apb_prdata),
        .s_apb_pslverr(s_apb_pslverr),
        .hwif_out(hwif_out)
    );

endmodule
