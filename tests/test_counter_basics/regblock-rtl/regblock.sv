// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module regblock (
        input wire clk,
        input wire rst,

        input wire s_apb_psel,
        input wire s_apb_penable,
        input wire s_apb_pwrite,
        input wire [2:0] s_apb_pprot,
        input wire [2:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,

        input regblock_pkg::regblock__in_t hwif_in,
        output regblock_pkg::regblock__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [2:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    // Request
    logic is_active;
    always_ff @(posedge clk) begin
        if(rst) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= {s_apb_paddr[2:2], 2'b0};
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<4; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic simple;
        logic wrap_counter;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_err;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        automatic logic is_valid_addr;
        automatic logic is_invalid_rw;
        is_valid_addr = '1; // No error checking on valid address access
        is_invalid_rw = '0;
        decoded_reg_strb.simple = cpuif_req_masked & (cpuif_addr == 3'h0);
        decoded_reg_strb.wrap_counter = cpuif_req_masked & (cpuif_addr == 3'h4) & !cpuif_req_is_wr;
        decoded_err = (~is_valid_addr | is_invalid_rw) & decoded_req;
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic [3:0] next;
                logic load_next;
                logic incrthreshold;
                logic overflow;
            } implied_up;
            struct {
                logic [3:0] next;
                logic load_next;
                logic incrthreshold;
                logic overflow;
            } up;
            struct {
                logic [3:0] next;
                logic load_next;
                logic decrthreshold;
                logic underflow;
            } down;
            struct {
                logic [3:0] next;
                logic load_next;
                logic incrthreshold;
                logic overflow;
                logic decrthreshold;
                logic underflow;
            } updown;
            struct {
                logic [3:0] next;
                logic load_next;
                logic incrthreshold;
                logic overflow;
                logic decrthreshold;
                logic underflow;
            } updown2;
            struct {
                logic [3:0] next;
                logic load_next;
                logic incrthreshold;
                logic overflow;
                logic decrthreshold;
                logic underflow;
            } updown3;
            struct {
                logic [3:0] next;
                logic load_next;
                logic incrthreshold;
                logic overflow;
                logic decrthreshold;
                logic underflow;
            } updown4;
            struct {
                logic [1:0] next;
                logic load_next;
            } step;
            struct {
                logic next;
                logic load_next;
            } do_count_up;
            struct {
                logic next;
                logic load_next;
            } do_count_down;
        } simple;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
                logic incrthreshold;
                logic overflow;
            } overflow_count;
            struct {
                logic [7:0] next;
                logic load_next;
                logic incrthreshold;
                logic overflow;
            } underflow_count;
        } wrap_counter;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic [3:0] value;
            } implied_up;
            struct {
                logic [3:0] value;
            } up;
            struct {
                logic [3:0] value;
            } down;
            struct {
                logic [3:0] value;
            } updown;
            struct {
                logic [3:0] value;
            } updown2;
            struct {
                logic [3:0] value;
            } updown3;
            struct {
                logic [3:0] value;
            } updown4;
            struct {
                logic [1:0] value;
            } step;
            struct {
                logic value;
            } do_count_up;
            struct {
                logic value;
            } do_count_down;
        } simple;
        struct {
            struct {
                logic [7:0] value;
            } overflow_count;
            struct {
                logic [7:0] value;
            } underflow_count;
        } wrap_counter;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: regblock.simple.implied_up
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.simple.implied_up.value;
        load_next_c = '0;

        if(hwif_in.simple.implied_up.incr) begin // increment
            field_combo.simple.implied_up.overflow = (((5)'(next_c) + 4'h1) > 4'hf);
            next_c = next_c + 4'h1;
            load_next_c = '1;
        end else begin
            field_combo.simple.implied_up.overflow = '0;
        end
        field_combo.simple.implied_up.incrthreshold = (field_storage.simple.implied_up.value >= 4'hf);
        field_combo.simple.implied_up.next = next_c;
        field_combo.simple.implied_up.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.simple.implied_up.value <= 4'hd;
        end else begin
            if(field_combo.simple.implied_up.load_next) begin
                field_storage.simple.implied_up.value <= field_combo.simple.implied_up.next;
            end
        end
    end
    // Field: regblock.simple.up
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.simple.up.value;
        load_next_c = '0;

        if(hwif_in.simple.up.incr) begin // increment
            field_combo.simple.up.overflow = (((5)'(next_c) + 4'h1) > 4'hf);
            next_c = next_c + 4'h1;
            load_next_c = '1;
        end else begin
            field_combo.simple.up.overflow = '0;
        end
        field_combo.simple.up.incrthreshold = (field_storage.simple.up.value >= 4'hf);
        field_combo.simple.up.next = next_c;
        field_combo.simple.up.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.simple.up.value <= 4'hd;
        end else begin
            if(field_combo.simple.up.load_next) begin
                field_storage.simple.up.value <= field_combo.simple.up.next;
            end
        end
    end
    // Field: regblock.simple.down
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.simple.down.value;
        load_next_c = '0;

        if(hwif_in.simple.down.decr) begin // decrement
            field_combo.simple.down.underflow = (next_c < (4'h1));
            next_c = next_c - 4'h1;
            load_next_c = '1;
        end else begin
            field_combo.simple.down.underflow = '0;
        end
        field_combo.simple.down.decrthreshold = (field_storage.simple.down.value <= 4'd0);
        field_combo.simple.down.next = next_c;
        field_combo.simple.down.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.simple.down.value <= 4'h4;
        end else begin
            if(field_combo.simple.down.load_next) begin
                field_storage.simple.down.value <= field_combo.simple.down.next;
            end
        end
    end
    // Field: regblock.simple.updown
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.simple.updown.value;
        load_next_c = '0;

        if(hwif_in.simple.updown.incr) begin // increment
            field_combo.simple.updown.overflow = (((5)'(next_c) + 4'h1) > 4'hf);
            next_c = next_c + 4'h1;
            load_next_c = '1;
        end else begin
            field_combo.simple.updown.overflow = '0;
        end
        field_combo.simple.updown.incrthreshold = (field_storage.simple.updown.value >= 4'hf);
        if(hwif_in.simple.updown.decr) begin // decrement
            field_combo.simple.updown.underflow = (next_c < (4'h1));
            next_c = next_c - 4'h1;
            load_next_c = '1;
        end else begin
            field_combo.simple.updown.underflow = '0;
        end
        field_combo.simple.updown.decrthreshold = (field_storage.simple.updown.value <= 4'd0);
        field_combo.simple.updown.next = next_c;
        field_combo.simple.updown.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.simple.updown.value <= 4'h0;
        end else begin
            if(field_combo.simple.updown.load_next) begin
                field_storage.simple.updown.value <= field_combo.simple.updown.next;
            end
        end
    end
    assign hwif_out.simple.updown.value = field_storage.simple.updown.value;
    assign hwif_out.simple.updown.overflow = field_combo.simple.updown.overflow;
    assign hwif_out.simple.updown.underflow = field_combo.simple.updown.underflow;
    // Field: regblock.simple.updown2
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.simple.updown2.value;
        load_next_c = '0;

        if(field_storage.simple.do_count_up.value) begin // increment
            field_combo.simple.updown2.overflow = (((5)'(next_c) + 4'h3) > 4'hf);
            next_c = next_c + 4'h3;
            load_next_c = '1;
        end else begin
            field_combo.simple.updown2.overflow = '0;
        end
        field_combo.simple.updown2.incrthreshold = (field_storage.simple.updown2.value >= 4'hf);
        if(field_storage.simple.do_count_down.value) begin // decrement
            field_combo.simple.updown2.underflow = (next_c < (4'h3));
            next_c = next_c - 4'h3;
            load_next_c = '1;
        end else begin
            field_combo.simple.updown2.underflow = '0;
        end
        field_combo.simple.updown2.decrthreshold = (field_storage.simple.updown2.value <= 4'd0);
        field_combo.simple.updown2.next = next_c;
        field_combo.simple.updown2.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.simple.updown2.value <= 4'h0;
        end else begin
            if(field_combo.simple.updown2.load_next) begin
                field_storage.simple.updown2.value <= field_combo.simple.updown2.next;
            end
        end
    end
    // Field: regblock.simple.updown3
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.simple.updown3.value;
        load_next_c = '0;

        if(field_storage.simple.do_count_up.value) begin // increment
            field_combo.simple.updown3.overflow = (((5)'(next_c) + hwif_in.simple.updown3.incrvalue) > 4'hf);
            next_c = next_c + hwif_in.simple.updown3.incrvalue;
            load_next_c = '1;
        end else begin
            field_combo.simple.updown3.overflow = '0;
        end
        field_combo.simple.updown3.incrthreshold = (field_storage.simple.updown3.value >= 4'hf);
        if(field_storage.simple.do_count_down.value) begin // decrement
            field_combo.simple.updown3.underflow = (next_c < (hwif_in.simple.updown3.decrvalue));
            next_c = next_c - hwif_in.simple.updown3.decrvalue;
            load_next_c = '1;
        end else begin
            field_combo.simple.updown3.underflow = '0;
        end
        field_combo.simple.updown3.decrthreshold = (field_storage.simple.updown3.value <= 4'd0);
        field_combo.simple.updown3.next = next_c;
        field_combo.simple.updown3.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.simple.updown3.value <= 4'h0;
        end else begin
            if(field_combo.simple.updown3.load_next) begin
                field_storage.simple.updown3.value <= field_combo.simple.updown3.next;
            end
        end
    end
    // Field: regblock.simple.updown4
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.simple.updown4.value;
        load_next_c = '0;

        if(field_storage.simple.do_count_up.value) begin // increment
            field_combo.simple.updown4.overflow = (((5)'(next_c) + field_storage.simple.step.value) > 4'hf);
            next_c = next_c + field_storage.simple.step.value;
            load_next_c = '1;
        end else begin
            field_combo.simple.updown4.overflow = '0;
        end
        field_combo.simple.updown4.incrthreshold = (field_storage.simple.updown4.value >= 4'hf);
        if(field_storage.simple.do_count_down.value) begin // decrement
            field_combo.simple.updown4.underflow = (next_c < (field_storage.simple.step.value));
            next_c = next_c - field_storage.simple.step.value;
            load_next_c = '1;
        end else begin
            field_combo.simple.updown4.underflow = '0;
        end
        field_combo.simple.updown4.decrthreshold = (field_storage.simple.updown4.value <= 4'd0);
        field_combo.simple.updown4.next = next_c;
        field_combo.simple.updown4.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.simple.updown4.value <= 4'h0;
        end else begin
            if(field_combo.simple.updown4.load_next) begin
                field_storage.simple.updown4.value <= field_combo.simple.updown4.next;
            end
        end
    end
    // Field: regblock.simple.step
    always_comb begin
        automatic logic [1:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.simple.step.value;
        load_next_c = '0;
        if(decoded_reg_strb.simple && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.simple.step.value & ~decoded_wr_biten[29:28]) | (decoded_wr_data[29:28] & decoded_wr_biten[29:28]);
            load_next_c = '1;
        end
        field_combo.simple.step.next = next_c;
        field_combo.simple.step.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.simple.step.value <= 2'h0;
        end else begin
            if(field_combo.simple.step.load_next) begin
                field_storage.simple.step.value <= field_combo.simple.step.next;
            end
        end
    end
    // Field: regblock.simple.do_count_up
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.simple.do_count_up.value;
        load_next_c = '0;
        if(decoded_reg_strb.simple && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.simple.do_count_up.value & ~decoded_wr_biten[30:30]) | (decoded_wr_data[30:30] & decoded_wr_biten[30:30]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.simple.do_count_up.next = next_c;
        field_combo.simple.do_count_up.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.simple.do_count_up.value <= 1'h0;
        end else begin
            if(field_combo.simple.do_count_up.load_next) begin
                field_storage.simple.do_count_up.value <= field_combo.simple.do_count_up.next;
            end
        end
    end
    assign hwif_out.simple.do_count_up.value = field_storage.simple.do_count_up.value;
    // Field: regblock.simple.do_count_down
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.simple.do_count_down.value;
        load_next_c = '0;
        if(decoded_reg_strb.simple && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.simple.do_count_down.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.simple.do_count_down.next = next_c;
        field_combo.simple.do_count_down.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.simple.do_count_down.value <= 1'h0;
        end else begin
            if(field_combo.simple.do_count_down.load_next) begin
                field_storage.simple.do_count_down.value <= field_combo.simple.do_count_down.next;
            end
        end
    end
    assign hwif_out.simple.do_count_down.value = field_storage.simple.do_count_down.value;
    // Field: regblock.wrap_counter.overflow_count
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.wrap_counter.overflow_count.value;
        load_next_c = '0;
        if(decoded_reg_strb.wrap_counter && !decoded_req_is_wr) begin // SW clear on read
            next_c = '0;
            load_next_c = '1;
        end
        if(field_combo.simple.updown3.overflow) begin // increment
            field_combo.wrap_counter.overflow_count.overflow = (((9)'(next_c) + 8'h1) > 8'hff);
            next_c = next_c + 8'h1;
            load_next_c = '1;
        end else begin
            field_combo.wrap_counter.overflow_count.overflow = '0;
        end
        field_combo.wrap_counter.overflow_count.incrthreshold = (field_storage.wrap_counter.overflow_count.value >= 8'hff);
        field_combo.wrap_counter.overflow_count.next = next_c;
        field_combo.wrap_counter.overflow_count.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.wrap_counter.overflow_count.value <= 8'h0;
        end else begin
            if(field_combo.wrap_counter.overflow_count.load_next) begin
                field_storage.wrap_counter.overflow_count.value <= field_combo.wrap_counter.overflow_count.next;
            end
        end
    end
    // Field: regblock.wrap_counter.underflow_count
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.wrap_counter.underflow_count.value;
        load_next_c = '0;
        if(decoded_reg_strb.wrap_counter && !decoded_req_is_wr) begin // SW clear on read
            next_c = '0;
            load_next_c = '1;
        end
        if(field_combo.simple.updown3.underflow) begin // increment
            field_combo.wrap_counter.underflow_count.overflow = (((9)'(next_c) + 8'h1) > 8'hff);
            next_c = next_c + 8'h1;
            load_next_c = '1;
        end else begin
            field_combo.wrap_counter.underflow_count.overflow = '0;
        end
        field_combo.wrap_counter.underflow_count.incrthreshold = (field_storage.wrap_counter.underflow_count.value >= 8'hff);
        field_combo.wrap_counter.underflow_count.next = next_c;
        field_combo.wrap_counter.underflow_count.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.wrap_counter.underflow_count.value <= 8'h0;
        end else begin
            if(field_combo.wrap_counter.underflow_count.load_next) begin
                field_storage.wrap_counter.underflow_count.value <= field_combo.wrap_counter.underflow_count.next;
            end
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[2];
    assign readback_array[0][3:0] = (decoded_reg_strb.simple && !decoded_req_is_wr) ? field_storage.simple.implied_up.value : '0;
    assign readback_array[0][7:4] = (decoded_reg_strb.simple && !decoded_req_is_wr) ? field_storage.simple.up.value : '0;
    assign readback_array[0][11:8] = (decoded_reg_strb.simple && !decoded_req_is_wr) ? field_storage.simple.down.value : '0;
    assign readback_array[0][15:12] = (decoded_reg_strb.simple && !decoded_req_is_wr) ? field_storage.simple.updown.value : '0;
    assign readback_array[0][19:16] = (decoded_reg_strb.simple && !decoded_req_is_wr) ? field_storage.simple.updown2.value : '0;
    assign readback_array[0][23:20] = (decoded_reg_strb.simple && !decoded_req_is_wr) ? field_storage.simple.updown3.value : '0;
    assign readback_array[0][27:24] = (decoded_reg_strb.simple && !decoded_req_is_wr) ? field_storage.simple.updown4.value : '0;
    assign readback_array[0][29:28] = (decoded_reg_strb.simple && !decoded_req_is_wr) ? field_storage.simple.step.value : '0;
    assign readback_array[0][31:30] = '0;
    assign readback_array[1][7:0] = (decoded_reg_strb.wrap_counter && !decoded_req_is_wr) ? field_storage.wrap_counter.overflow_count.value : '0;
    assign readback_array[1][15:8] = (decoded_reg_strb.wrap_counter && !decoded_req_is_wr) ? field_storage.wrap_counter.underflow_count.value : '0;
    assign readback_array[1][31:16] = '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<2; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
