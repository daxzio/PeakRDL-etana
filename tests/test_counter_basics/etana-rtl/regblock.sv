// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module regblock (
        input wire clk,
        input wire rst,

        input wire s_apb_psel,
        input wire s_apb_pwrite,
        input wire s_apb_penable,
        input wire [2:0] s_apb_pprot,
        input wire [2:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,

        input wire [0:0] hwif_in_simple_implied_up_incr,
        input wire [0:0] hwif_in_simple_up_incr,
        input wire [0:0] hwif_in_simple_down_decr,
        output logic [3:0] hwif_out_simple_updown,
        output logic [0:0] hwif_out_simple_updown_overflow,
        output logic [0:0] hwif_out_simple_updown_underflow,
        input wire [0:0] hwif_in_simple_updown_incr,
        input wire [0:0] hwif_in_simple_updown_decr,
        input wire [3:0] hwif_in_simple_updown3_incrvalue,
        input wire [3:0] hwif_in_simple_updown3_decrvalue,
        output logic [0:0] hwif_out_simple_do_count_up,
        output logic [0:0] hwif_out_simple_do_count_down
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [2:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;


    // Request
    logic is_active;
    always_ff @(posedge clk) begin
        if(rst) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= {s_apb_paddr[2:2], 2'b0};
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<4; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    logic [0:0] decoded_reg_strb_simple;
    logic [0:0] decoded_reg_strb_wrap_counter;
    logic decoded_req;
    logic decoded_req_is_wr;
    /* verilator lint_off UNUSEDSIGNAL */
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;
    /* verilator lint_on UNUSEDSIGNAL */

    always @(*) begin
        /* verilator lint_off UNUSEDSIGNAL */
        integer next_cpuif_addr;
        /* verilator lint_on UNUSEDSIGNAL */
        decoded_reg_strb_simple = cpuif_req_masked & (cpuif_addr == 3'h0);
        decoded_reg_strb_wrap_counter = cpuif_req_masked & (cpuif_addr == 3'h4);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;


    //--------------------------------------------------------------------------
    // Field storage declarations
    //--------------------------------------------------------------------------

    // Field: regblock.simple.implied_up
    logic [3:0] field_storage_simple_implied_up_value;
    logic [3:0] field_combo_simple_implied_up_next;
    logic field_combo_simple_implied_up_load_next;
    logic field_combo_simple_implied_up_overflow;
    logic field_combo_simple_implied_up_incrthreshold;
    // Field: regblock.simple.up
    logic [3:0] field_storage_simple_up_value;
    logic [3:0] field_combo_simple_up_next;
    logic field_combo_simple_up_load_next;
    logic field_combo_simple_up_overflow;
    logic field_combo_simple_up_incrthreshold;
    // Field: regblock.simple.down
    logic [3:0] field_storage_simple_down_value;
    logic [3:0] field_combo_simple_down_next;
    logic field_combo_simple_down_load_next;
    logic field_combo_simple_down_underflow;
    logic field_combo_simple_down_decrthreshold;
    // Field: regblock.simple.updown
    logic [3:0] field_storage_simple_updown_value;
    logic [3:0] field_combo_simple_updown_next;
    logic field_combo_simple_updown_load_next;
    logic field_combo_simple_updown_overflow;
    logic field_combo_simple_updown_incrthreshold;
    logic field_combo_simple_updown_underflow;
    logic field_combo_simple_updown_decrthreshold;
    // Field: regblock.simple.updown2
    logic [3:0] field_storage_simple_updown2_value;
    logic [3:0] field_combo_simple_updown2_next;
    logic field_combo_simple_updown2_load_next;
    logic field_combo_simple_updown2_overflow;
    logic field_combo_simple_updown2_incrthreshold;
    logic field_combo_simple_updown2_underflow;
    logic field_combo_simple_updown2_decrthreshold;
    // Field: regblock.simple.updown3
    logic [3:0] field_storage_simple_updown3_value;
    logic [3:0] field_combo_simple_updown3_next;
    logic field_combo_simple_updown3_load_next;
    logic field_combo_simple_updown3_overflow;
    logic field_combo_simple_updown3_incrthreshold;
    logic field_combo_simple_updown3_underflow;
    logic field_combo_simple_updown3_decrthreshold;
    // Field: regblock.simple.updown4
    logic [3:0] field_storage_simple_updown4_value;
    logic [3:0] field_combo_simple_updown4_next;
    logic field_combo_simple_updown4_load_next;
    logic field_combo_simple_updown4_overflow;
    logic field_combo_simple_updown4_incrthreshold;
    logic field_combo_simple_updown4_underflow;
    logic field_combo_simple_updown4_decrthreshold;
    // Field: regblock.simple.step
    logic [1:0] field_storage_simple_step_value;
    logic [1:0] field_combo_simple_step_next;
    logic field_combo_simple_step_load_next;
    // Field: regblock.simple.do_count_up
    logic [0:0] field_storage_simple_do_count_up_value;
    logic [0:0] field_combo_simple_do_count_up_next;
    logic field_combo_simple_do_count_up_load_next;
    // Field: regblock.simple.do_count_down
    logic [0:0] field_storage_simple_do_count_down_value;
    logic [0:0] field_combo_simple_do_count_down_next;
    logic field_combo_simple_do_count_down_load_next;
    // Field: regblock.wrap_counter.overflow_count
    logic [7:0] field_storage_wrap_counter_overflow_count_value;
    logic [7:0] field_combo_wrap_counter_overflow_count_next;
    logic field_combo_wrap_counter_overflow_count_load_next;
    logic field_combo_wrap_counter_overflow_count_overflow;
    logic field_combo_wrap_counter_overflow_count_incrthreshold;
    // Field: regblock.wrap_counter.underflow_count
    logic [7:0] field_storage_wrap_counter_underflow_count_value;
    logic [7:0] field_combo_wrap_counter_underflow_count_next;
    logic field_combo_wrap_counter_underflow_count_load_next;
    logic field_combo_wrap_counter_underflow_count_overflow;
    logic field_combo_wrap_counter_underflow_count_incrthreshold;
    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_simple_implied_up_value;
        load_next_c = '0;

        if(hwif_in_simple_implied_up_incr) begin // increment
            field_combo_simple_implied_up_overflow = (((5)'(next_c) + (5)'(4'h1)) > 5'hf);
            next_c = next_c + (4)'(4'h1);
            load_next_c = '1;
        end else begin
            field_combo_simple_implied_up_overflow = '0;
        end
        field_combo_simple_implied_up_incrthreshold = (field_storage_simple_implied_up_value >= 4'hf);
        field_combo_simple_implied_up_next = next_c;
        field_combo_simple_implied_up_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_simple_implied_up_value <= 4'hd;
        end else if(field_combo_simple_implied_up_load_next) begin
            field_storage_simple_implied_up_value <= field_combo_simple_implied_up_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_simple_up_value;
        load_next_c = '0;

        if(hwif_in_simple_up_incr) begin // increment
            field_combo_simple_up_overflow = (((5)'(next_c) + (5)'(4'h1)) > 5'hf);
            next_c = next_c + (4)'(4'h1);
            load_next_c = '1;
        end else begin
            field_combo_simple_up_overflow = '0;
        end
        field_combo_simple_up_incrthreshold = (field_storage_simple_up_value >= 4'hf);
        field_combo_simple_up_next = next_c;
        field_combo_simple_up_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_simple_up_value <= 4'hd;
        end else if(field_combo_simple_up_load_next) begin
            field_storage_simple_up_value <= field_combo_simple_up_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_simple_down_value;
        load_next_c = '0;

        if(hwif_in_simple_down_decr) begin // decrement
            field_combo_simple_down_underflow = (next_c < (4)'(4'h1));
            next_c = next_c - (4)'(4'h1);
            load_next_c = '1;
        end else begin
            field_combo_simple_down_underflow = '0;
        end
        field_combo_simple_down_decrthreshold = (field_storage_simple_down_value <= 4'd0);
        field_combo_simple_down_next = next_c;
        field_combo_simple_down_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_simple_down_value <= 4'h4;
        end else if(field_combo_simple_down_load_next) begin
            field_storage_simple_down_value <= field_combo_simple_down_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_simple_updown_value;
        load_next_c = '0;

        if(hwif_in_simple_updown_incr) begin // increment
            field_combo_simple_updown_overflow = (((5)'(next_c) + (5)'(4'h1)) > 5'hf);
            next_c = next_c + (4)'(4'h1);
            load_next_c = '1;
        end else begin
            field_combo_simple_updown_overflow = '0;
        end
        field_combo_simple_updown_incrthreshold = (field_storage_simple_updown_value >= 4'hf);
        if(hwif_in_simple_updown_decr) begin // decrement
            field_combo_simple_updown_underflow = (next_c < (4)'(4'h1));
            next_c = next_c - (4)'(4'h1);
            load_next_c = '1;
        end else begin
            field_combo_simple_updown_underflow = '0;
        end
        field_combo_simple_updown_decrthreshold = (field_storage_simple_updown_value <= 4'd0);
        field_combo_simple_updown_next = next_c;
        field_combo_simple_updown_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_simple_updown_value <= 4'h0;
        end else if(field_combo_simple_updown_load_next) begin
            field_storage_simple_updown_value <= field_combo_simple_updown_next;
        end
    end
    assign hwif_out_simple_updown = field_storage_simple_updown_value;
    assign hwif_out_simple_updown_overflow = field_combo_simple_updown_overflow;
    assign hwif_out_simple_updown_underflow = field_combo_simple_updown_underflow;
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_simple_updown2_value;
        load_next_c = '0;

        if(field_storage_simple_do_count_up_value) begin // increment
            field_combo_simple_updown2_overflow = (((5)'(next_c) + (5)'(4'h3)) > 5'hf);
            next_c = next_c + (4)'(4'h3);
            load_next_c = '1;
        end else begin
            field_combo_simple_updown2_overflow = '0;
        end
        field_combo_simple_updown2_incrthreshold = (field_storage_simple_updown2_value >= 4'hf);
        if(field_storage_simple_do_count_down_value) begin // decrement
            field_combo_simple_updown2_underflow = (next_c < (4)'(4'h3));
            next_c = next_c - (4)'(4'h3);
            load_next_c = '1;
        end else begin
            field_combo_simple_updown2_underflow = '0;
        end
        field_combo_simple_updown2_decrthreshold = (field_storage_simple_updown2_value <= 4'd0);
        field_combo_simple_updown2_next = next_c;
        field_combo_simple_updown2_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_simple_updown2_value <= 4'h0;
        end else if(field_combo_simple_updown2_load_next) begin
            field_storage_simple_updown2_value <= field_combo_simple_updown2_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_simple_updown3_value;
        load_next_c = '0;

        if(field_storage_simple_do_count_up_value) begin // increment
            field_combo_simple_updown3_overflow = (((5)'(next_c) + (5)'(hwif_in_simple_updown3_incrvalue)) > 5'hf);
            next_c = next_c + (4)'(hwif_in_simple_updown3_incrvalue);
            load_next_c = '1;
        end else begin
            field_combo_simple_updown3_overflow = '0;
        end
        field_combo_simple_updown3_incrthreshold = (field_storage_simple_updown3_value >= 4'hf);
        if(field_storage_simple_do_count_down_value) begin // decrement
            field_combo_simple_updown3_underflow = (next_c < (4)'(hwif_in_simple_updown3_decrvalue));
            next_c = next_c - (4)'(hwif_in_simple_updown3_decrvalue);
            load_next_c = '1;
        end else begin
            field_combo_simple_updown3_underflow = '0;
        end
        field_combo_simple_updown3_decrthreshold = (field_storage_simple_updown3_value <= 4'd0);
        field_combo_simple_updown3_next = next_c;
        field_combo_simple_updown3_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_simple_updown3_value <= 4'h0;
        end else if(field_combo_simple_updown3_load_next) begin
            field_storage_simple_updown3_value <= field_combo_simple_updown3_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_simple_updown4_value;
        load_next_c = '0;

        if(field_storage_simple_do_count_up_value) begin // increment
            field_combo_simple_updown4_overflow = (((5)'(next_c) + (5)'(field_storage_simple_step_value)) > 5'hf);
            next_c = next_c + (4)'(field_storage_simple_step_value);
            load_next_c = '1;
        end else begin
            field_combo_simple_updown4_overflow = '0;
        end
        field_combo_simple_updown4_incrthreshold = (field_storage_simple_updown4_value >= 4'hf);
        if(field_storage_simple_do_count_down_value) begin // decrement
            field_combo_simple_updown4_underflow = (next_c < (4)'(field_storage_simple_step_value));
            next_c = next_c - (4)'(field_storage_simple_step_value);
            load_next_c = '1;
        end else begin
            field_combo_simple_updown4_underflow = '0;
        end
        field_combo_simple_updown4_decrthreshold = (field_storage_simple_updown4_value <= 4'd0);
        field_combo_simple_updown4_next = next_c;
        field_combo_simple_updown4_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_simple_updown4_value <= 4'h0;
        end else if(field_combo_simple_updown4_load_next) begin
            field_storage_simple_updown4_value <= field_combo_simple_updown4_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [1:0] next_c;
        logic load_next_c;
        next_c = field_storage_simple_step_value;
        load_next_c = '0;
        if(decoded_reg_strb_simple && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_simple_step_value & ~decoded_wr_biten[29:28]) | (decoded_wr_data[29:28] & decoded_wr_biten[29:28]);
            load_next_c = '1;
        end
        field_combo_simple_step_next = next_c;
        field_combo_simple_step_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_simple_step_value <= 2'h0;
        end else if(field_combo_simple_step_load_next) begin
            field_storage_simple_step_value <= field_combo_simple_step_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_simple_do_count_up_value;
        load_next_c = '0;
        if(decoded_reg_strb_simple && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_simple_do_count_up_value & ~decoded_wr_biten[30:30]) | (decoded_wr_data[30:30] & decoded_wr_biten[30:30]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo_simple_do_count_up_next = next_c;
        field_combo_simple_do_count_up_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_simple_do_count_up_value <= 1'h0;
        end else if(field_combo_simple_do_count_up_load_next) begin
            field_storage_simple_do_count_up_value <= field_combo_simple_do_count_up_next;
        end
    end
    assign hwif_out_simple_do_count_up = field_storage_simple_do_count_up_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_simple_do_count_down_value;
        load_next_c = '0;
        if(decoded_reg_strb_simple && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_simple_do_count_down_value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo_simple_do_count_down_next = next_c;
        field_combo_simple_do_count_down_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_simple_do_count_down_value <= 1'h0;
        end else if(field_combo_simple_do_count_down_load_next) begin
            field_storage_simple_do_count_down_value <= field_combo_simple_do_count_down_next;
        end
    end
    assign hwif_out_simple_do_count_down = field_storage_simple_do_count_down_value;
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_wrap_counter_overflow_count_value;
        load_next_c = '0;
        if(decoded_reg_strb_wrap_counter && !decoded_req_is_wr) begin // SW clear on read
            next_c = '0;
            load_next_c = '1;
        end
        if(field_combo_simple_updown3_overflow) begin // increment
            field_combo_wrap_counter_overflow_count_overflow = (((9)'(next_c) + (9)'(8'h1)) > 9'hff);
            next_c = next_c + (8)'(8'h1);
            load_next_c = '1;
        end else begin
            field_combo_wrap_counter_overflow_count_overflow = '0;
        end
        field_combo_wrap_counter_overflow_count_incrthreshold = (field_storage_wrap_counter_overflow_count_value >= 8'hff);
        field_combo_wrap_counter_overflow_count_next = next_c;
        field_combo_wrap_counter_overflow_count_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_wrap_counter_overflow_count_value <= 8'h0;
        end else if(field_combo_wrap_counter_overflow_count_load_next) begin
            field_storage_wrap_counter_overflow_count_value <= field_combo_wrap_counter_overflow_count_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_wrap_counter_underflow_count_value;
        load_next_c = '0;
        if(decoded_reg_strb_wrap_counter && !decoded_req_is_wr) begin // SW clear on read
            next_c = '0;
            load_next_c = '1;
        end
        if(field_combo_simple_updown3_underflow) begin // increment
            field_combo_wrap_counter_underflow_count_overflow = (((9)'(next_c) + (9)'(8'h1)) > 9'hff);
            next_c = next_c + (8)'(8'h1);
            load_next_c = '1;
        end else begin
            field_combo_wrap_counter_underflow_count_overflow = '0;
        end
        field_combo_wrap_counter_underflow_count_incrthreshold = (field_storage_wrap_counter_underflow_count_value >= 8'hff);
        field_combo_wrap_counter_underflow_count_next = next_c;
        field_combo_wrap_counter_underflow_count_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_wrap_counter_underflow_count_value <= 8'h0;
        end else if(field_combo_wrap_counter_underflow_count_load_next) begin
            field_storage_wrap_counter_underflow_count_value <= field_combo_wrap_counter_underflow_count_next;
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

//--------------------------------------------------------------------------
// Readback
//--------------------------------------------------------------------------
    logic readback_external_rd_ack;
    assign readback_external_rd_ack = 0;

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[2];
    assign readback_array[0][3:0] = (decoded_reg_strb_simple && !decoded_req_is_wr) ? field_storage_simple_implied_up_value : '0;
    assign readback_array[0][7:4] = (decoded_reg_strb_simple && !decoded_req_is_wr) ? field_storage_simple_up_value : '0;
    assign readback_array[0][11:8] = (decoded_reg_strb_simple && !decoded_req_is_wr) ? field_storage_simple_down_value : '0;
    assign readback_array[0][15:12] = (decoded_reg_strb_simple && !decoded_req_is_wr) ? field_storage_simple_updown_value : '0;
    assign readback_array[0][19:16] = (decoded_reg_strb_simple && !decoded_req_is_wr) ? field_storage_simple_updown2_value : '0;
    assign readback_array[0][23:20] = (decoded_reg_strb_simple && !decoded_req_is_wr) ? field_storage_simple_updown3_value : '0;
    assign readback_array[0][27:24] = (decoded_reg_strb_simple && !decoded_req_is_wr) ? field_storage_simple_updown4_value : '0;
    assign readback_array[0][29:28] = (decoded_reg_strb_simple && !decoded_req_is_wr) ? field_storage_simple_step_value : '0;
    assign readback_array[0][31:30] = '0;
    assign readback_array[1][7:0] = (decoded_reg_strb_wrap_counter && !decoded_req_is_wr) ? field_storage_wrap_counter_overflow_count_value : '0;
    assign readback_array[1][15:8] = (decoded_reg_strb_wrap_counter && !decoded_req_is_wr) ? field_storage_wrap_counter_underflow_count_value : '0;
    assign readback_array[1][31:16] = '0;

    // Reduce the array
    // always_comb begin
    always @(*) begin
        logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<2; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
