// Generated by PeakRDL-etana HWIF Wrapper Tool
//  https://github.com/daxzio/PeakRDL-etana
//
// This is a wrapper module that flattens the hwif structs into individual signals

module regblock_wrapper (
        input wire clk,
        input wire rst,
        input wire s_apb_psel,
        input wire s_apb_penable,
        input wire s_apb_pwrite,
        input wire [2:0] s_apb_pprot,
        input wire [5:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,
        input logic hwif_in_er_rw_rd_ack,
        input logic [31:0] hwif_in_er_rw_rd_data_f,
        input logic hwif_in_er_rw_wr_ack,
        input logic hwif_in_er_r_rd_ack,
        input logic [31:0] hwif_in_er_r_rd_data_f,
        input logic hwif_in_er_w_wr_ack,
        input logic hwif_in_mem_rw_rd_ack,
        input logic [31:0] hwif_in_mem_rw_rd_data,
        input logic hwif_in_mem_rw_wr_ack,
        input logic hwif_in_mem_r_rd_ack,
        input logic [31:0] hwif_in_mem_r_rd_data,
        input logic hwif_in_mem_r_wr_ack,
        input logic hwif_in_mem_w_rd_ack,
        input logic [31:0] hwif_in_mem_w_rd_data,
        input logic hwif_in_mem_w_wr_ack,
        output logic [31:0] hwif_out_r_w_f,
        output logic hwif_out_er_rw_req,
        output logic hwif_out_er_rw_req_is_wr,
        output logic [31:0] hwif_out_er_rw_wr_data_f,
        output logic [31:0] hwif_out_er_rw_wr_biten_f,
        output logic hwif_out_er_r_req,
        output logic hwif_out_er_r_req_is_wr,
        output logic hwif_out_er_w_req,
        output logic hwif_out_er_w_req_is_wr,
        output logic [31:0] hwif_out_er_w_wr_data_f,
        output logic [31:0] hwif_out_er_w_wr_biten_f,
        output logic hwif_out_mem_rw_req,
        output logic [2:0] hwif_out_mem_rw_addr,
        output logic hwif_out_mem_rw_req_is_wr,
        output logic [31:0] hwif_out_mem_rw_wr_data,
        output logic [31:0] hwif_out_mem_rw_wr_biten,
        output logic hwif_out_mem_r_req,
        output logic [2:0] hwif_out_mem_r_addr,
        output logic hwif_out_mem_r_req_is_wr,
        output logic [31:0] hwif_out_mem_r_wr_data,
        output logic [31:0] hwif_out_mem_r_wr_biten,
        output logic hwif_out_mem_w_req,
        output logic [2:0] hwif_out_mem_w_addr,
        output logic hwif_out_mem_w_req_is_wr,
        output logic [31:0] hwif_out_mem_w_wr_data,
        output logic [31:0] hwif_out_mem_w_wr_biten
    );

    //--------------------------------------------------------------------------
    // Internal hwif struct signals
    //--------------------------------------------------------------------------
    regblock_pkg::regblock__in_t hwif_in;
    regblock_pkg::regblock__out_t hwif_out;

    //--------------------------------------------------------------------------
    // Flatten struct to individual signals
    //--------------------------------------------------------------------------
    assign hwif_in.er_rw.rd_ack = hwif_in_er_rw_rd_ack;
    assign hwif_in.er_rw.rd_data.f = hwif_in_er_rw_rd_data_f;
    assign hwif_in.er_rw.wr_ack = hwif_in_er_rw_wr_ack;
    assign hwif_in.er_r.rd_ack = hwif_in_er_r_rd_ack;
    assign hwif_in.er_r.rd_data.f = hwif_in_er_r_rd_data_f;
    assign hwif_in.er_w.wr_ack = hwif_in_er_w_wr_ack;
    assign hwif_in.mem_rw.rd_ack = hwif_in_mem_rw_rd_ack;
    assign hwif_in.mem_rw.rd_data = hwif_in_mem_rw_rd_data;
    assign hwif_in.mem_rw.wr_ack = hwif_in_mem_rw_wr_ack;
    assign hwif_in.mem_r.rd_ack = hwif_in_mem_r_rd_ack;
    assign hwif_in.mem_r.rd_data = hwif_in_mem_r_rd_data;
    assign hwif_in.mem_r.wr_ack = hwif_in_mem_r_wr_ack;
    assign hwif_in.mem_w.rd_ack = hwif_in_mem_w_rd_ack;
    assign hwif_in.mem_w.rd_data = hwif_in_mem_w_rd_data;
    assign hwif_in.mem_w.wr_ack = hwif_in_mem_w_wr_ack;

    assign hwif_out_r_w_f = hwif_out.r_w.f.value;
    assign hwif_out_er_rw_req = hwif_out.er_rw.req;
    assign hwif_out_er_rw_req_is_wr = hwif_out.er_rw.req_is_wr;
    assign hwif_out_er_rw_wr_data_f = hwif_out.er_rw.wr_data.f;
    assign hwif_out_er_rw_wr_biten_f = hwif_out.er_rw.wr_biten.f;
    assign hwif_out_er_r_req = hwif_out.er_r.req;
    assign hwif_out_er_r_req_is_wr = hwif_out.er_r.req_is_wr;
    assign hwif_out_er_w_req = hwif_out.er_w.req;
    assign hwif_out_er_w_req_is_wr = hwif_out.er_w.req_is_wr;
    assign hwif_out_er_w_wr_data_f = hwif_out.er_w.wr_data.f;
    assign hwif_out_er_w_wr_biten_f = hwif_out.er_w.wr_biten.f;
    assign hwif_out_mem_rw_req = hwif_out.mem_rw.req;
    assign hwif_out_mem_rw_addr = hwif_out.mem_rw.addr;
    assign hwif_out_mem_rw_req_is_wr = hwif_out.mem_rw.req_is_wr;
    assign hwif_out_mem_rw_wr_data = hwif_out.mem_rw.wr_data;
    assign hwif_out_mem_rw_wr_biten = hwif_out.mem_rw.wr_biten;
    assign hwif_out_mem_r_req = hwif_out.mem_r.req;
    assign hwif_out_mem_r_addr = hwif_out.mem_r.addr;
    assign hwif_out_mem_r_req_is_wr = hwif_out.mem_r.req_is_wr;
    assign hwif_out_mem_r_wr_data = hwif_out.mem_r.wr_data;
    assign hwif_out_mem_r_wr_biten = hwif_out.mem_r.wr_biten;
    assign hwif_out_mem_w_req = hwif_out.mem_w.req;
    assign hwif_out_mem_w_addr = hwif_out.mem_w.addr;
    assign hwif_out_mem_w_req_is_wr = hwif_out.mem_w.req_is_wr;
    assign hwif_out_mem_w_wr_data = hwif_out.mem_w.wr_data;
    assign hwif_out_mem_w_wr_biten = hwif_out.mem_w.wr_biten;

    //--------------------------------------------------------------------------
    // Instantiate the main regblock module
    //--------------------------------------------------------------------------
    regblock i_regblock (
        .clk(clk),
        .rst(rst),
        .s_apb_psel(s_apb_psel),
        .s_apb_penable(s_apb_penable),
        .s_apb_pwrite(s_apb_pwrite),
        .s_apb_pprot(s_apb_pprot),
        .s_apb_paddr(s_apb_paddr),
        .s_apb_pwdata(s_apb_pwdata),
        .s_apb_pstrb(s_apb_pstrb),
        .s_apb_pready(s_apb_pready),
        .s_apb_prdata(s_apb_prdata),
        .s_apb_pslverr(s_apb_pslverr),
        .hwif_in(hwif_in),
        .hwif_out(hwif_out)
    );

endmodule
