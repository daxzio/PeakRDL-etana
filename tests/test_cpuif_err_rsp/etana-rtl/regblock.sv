// Generated by PeakRDL-etana - A free and open-source SystemVerilog generator
//  https://github.com/daxzio/PeakRDL-etana

module regblock (
        input wire clk,
        input wire rst,

        input wire s_apb_psel,
        input wire s_apb_pwrite,
        input wire s_apb_penable,
        input wire [2:0] s_apb_pprot,
        input wire [5:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,

        output logic [31:0] hwif_out_r_w_f,
        output logic hwif_out_er_rw_req,
        output logic hwif_out_er_rw_req_is_wr,
        input wire hwif_in_er_rw_rd_ack,
        input wire hwif_in_er_rw_wr_ack,
        input wire [31:0] hwif_in_er_rw_rd_data,
        output logic [31:0] hwif_out_er_rw_wr_data,
        output logic [31:0] hwif_out_er_rw_wr_biten,
        output logic hwif_out_er_r_req,
        output logic hwif_out_er_r_req_is_wr,
        input wire hwif_in_er_r_rd_ack,
        input wire [31:0] hwif_in_er_r_rd_data,
        output logic hwif_out_er_w_req,
        output logic hwif_out_er_w_req_is_wr,
        input wire hwif_in_er_w_wr_ack,
        output logic [31:0] hwif_out_er_w_wr_data,
        output logic [31:0] hwif_out_er_w_wr_biten,
        output logic [2:0] hwif_out_mem_rw_addr,
        output logic [0:0] hwif_out_mem_rw_req,
        input logic [31:0] hwif_in_mem_rw_rd_data,
        input logic [0:0] hwif_in_mem_rw_rd_ack,
        input logic [0:0] hwif_in_mem_rw_wr_ack,
        output logic [0:0] hwif_out_mem_rw_req_is_wr,
        output logic [31:0] hwif_out_mem_rw_wr_data,
        output logic [31:0] hwif_out_mem_rw_wr_biten,
        output logic [2:0] hwif_out_mem_r_addr,
        output logic [0:0] hwif_out_mem_r_req,
        input logic [31:0] hwif_in_mem_r_rd_data,
        input logic [0:0] hwif_in_mem_r_rd_ack,
        output logic [0:0] hwif_out_mem_r_req_is_wr,
        output logic [2:0] hwif_out_mem_w_addr,
        output logic [0:0] hwif_out_mem_w_req,
        input logic [0:0] hwif_in_mem_w_wr_ack,
        output logic [0:0] hwif_out_mem_w_req_is_wr,
        output logic [31:0] hwif_out_mem_w_wr_data,
        output logic [31:0] hwif_out_mem_w_wr_biten
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [5:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;


    // Request
    logic is_active;
    always_ff @(posedge clk) begin
        if(rst) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= {s_apb_paddr[5:2], 2'b0};
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<4; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;
    logic external_req;
    logic external_pending;
    logic external_wr_ack;
    logic external_rd_ack;
//     always_ff @(posedge clk) begin
    always @(posedge clk) begin
        if(rst) begin
            external_pending <= '0;
        end else begin
            if(external_req & ~external_wr_ack & ~external_rd_ack) external_pending <= '1;
            else if(external_wr_ack | external_rd_ack) external_pending <= '0;
            `ifndef SYNTHESIS
                assert_bad_ext_wr_ack: assert(!external_wr_ack || (external_pending | external_req))
                    else $error("An external wr_ack strobe was asserted when no external request was active");
                assert_bad_ext_rd_ack: assert(!external_rd_ack || (external_pending | external_req))
                    else $error("An external rd_ack strobe was asserted when no external request was active");
            `endif
        end
    end

    // Read & write latencies are balanced. Stalls not required
    // except if external
    assign cpuif_req_stall_rd = external_pending;
    assign cpuif_req_stall_wr = external_pending;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    logic [0:0] decoded_reg_strb_r_rw;
    logic [0:0] decoded_reg_strb_r_r;
    logic [0:0] decoded_reg_strb_r_w;
    logic [0:0] decoded_reg_strb_er_rw;
    logic [0:0] decoded_reg_strb_er_r;
    logic [0:0] decoded_reg_strb_er_w;
    logic decoded_reg_strb_mem_rw;
    logic decoded_reg_strb_mem_r;
    logic decoded_reg_strb_mem_w;
    logic decoded_strb_is_external;

    logic decoded_err;

    logic [5:0] decoded_addr;

    logic decoded_req;
    logic decoded_req_is_wr;
    /* verilator lint_off UNUSEDSIGNAL */
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;
    /* verilator lint_on UNUSEDSIGNAL */

    always @(*) begin
        /* verilator lint_off UNUSEDSIGNAL */
        integer next_cpuif_addr;
        /* verilator lint_on UNUSEDSIGNAL */
        logic is_external;
        logic is_valid_addr;
        logic is_invalid_rw;
        is_external = '0;
        is_valid_addr = '0;
        is_invalid_rw = '0;
        decoded_reg_strb_r_rw = cpuif_req_masked & (cpuif_addr == 6'h0);
        is_valid_addr |= cpuif_req_masked & (cpuif_addr == 6'h0);
        is_invalid_rw |= '0;
        decoded_reg_strb_r_r = cpuif_req_masked & (cpuif_addr == 6'h4) & !cpuif_req_is_wr;
        is_valid_addr |= cpuif_req_masked & (cpuif_addr == 6'h4);
        is_invalid_rw |= cpuif_req_masked & (cpuif_addr == 6'h4) & cpuif_req_is_wr;
        decoded_reg_strb_r_w = cpuif_req_masked & (cpuif_addr == 6'h8) & cpuif_req_is_wr;
        is_valid_addr |= cpuif_req_masked & (cpuif_addr == 6'h8);
        is_invalid_rw |= cpuif_req_masked & (cpuif_addr == 6'h8) & !cpuif_req_is_wr;
        decoded_reg_strb_er_rw = cpuif_req_masked & (cpuif_addr == 6'hc);
        is_valid_addr |= cpuif_req_masked & (cpuif_addr == 6'hc);
        is_invalid_rw |= '0;
        is_external |= cpuif_req_masked & (cpuif_addr == 6'hc);
        decoded_reg_strb_er_r = cpuif_req_masked & (cpuif_addr == 6'h10) & !cpuif_req_is_wr;
        is_valid_addr |= cpuif_req_masked & (cpuif_addr == 6'h10);
        is_invalid_rw |= cpuif_req_masked & (cpuif_addr == 6'h10) & cpuif_req_is_wr;
        is_external |= cpuif_req_masked & (cpuif_addr == 6'h10) & !cpuif_req_is_wr;
        decoded_reg_strb_er_w = cpuif_req_masked & (cpuif_addr == 6'h14) & cpuif_req_is_wr;
        is_valid_addr |= cpuif_req_masked & (cpuif_addr == 6'h14);
        is_invalid_rw |= cpuif_req_masked & (cpuif_addr == 6'h14) & !cpuif_req_is_wr;
        is_external |= cpuif_req_masked & (cpuif_addr == 6'h14) & cpuif_req_is_wr;
        decoded_reg_strb_mem_rw = cpuif_req_masked & (cpuif_addr >= 6'h20) & (cpuif_addr <= 6'h20 + 6'h7);
        is_external |= cpuif_req_masked & (cpuif_addr >= 6'h20) & (cpuif_addr <= 6'h20 + 6'h7);
        is_valid_addr |= cpuif_req_masked & (cpuif_addr >= 6'h20) & (cpuif_addr <= 6'h20 + 6'h7);
        is_invalid_rw |= '0;
        decoded_reg_strb_mem_r = cpuif_req_masked & (cpuif_addr >= 6'h28) & (cpuif_addr <= 6'h28 + 6'h7) & !cpuif_req_is_wr;
        is_external |= cpuif_req_masked & (cpuif_addr >= 6'h28) & (cpuif_addr <= 6'h28 + 6'h7) & !cpuif_req_is_wr;
        is_valid_addr |= cpuif_req_masked & (cpuif_addr >= 6'h28) & (cpuif_addr <= 6'h28 + 6'h7);
        is_invalid_rw |= cpuif_req_masked & (cpuif_addr >= 6'h28) & (cpuif_addr <= 6'h28 + 6'h7) & cpuif_req_is_wr;
        decoded_reg_strb_mem_w = cpuif_req_masked & (cpuif_addr >= 6'h30) & (cpuif_addr <= 6'h30 + 6'h7) & cpuif_req_is_wr;
        is_external |= cpuif_req_masked & (cpuif_addr >= 6'h30) & (cpuif_addr <= 6'h30 + 6'h7) & cpuif_req_is_wr;
        is_valid_addr |= cpuif_req_masked & (cpuif_addr >= 6'h30) & (cpuif_addr <= 6'h30 + 6'h7);
        is_invalid_rw |= cpuif_req_masked & (cpuif_addr >= 6'h30) & (cpuif_addr <= 6'h30 + 6'h7) & !cpuif_req_is_wr;
        decoded_strb_is_external = is_external;
        external_req = is_external;
        decoded_err = (~is_valid_addr | is_invalid_rw) & decoded_req;
    end

    // Pass down signals to next stage
    assign decoded_addr = cpuif_addr;

    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;


    //--------------------------------------------------------------------------
    // Field storage declarations
    //--------------------------------------------------------------------------

    // Field: regblock.r_rw.f
    logic [31:0] field_storage_r_rw_f_value;
    logic [31:0] field_combo_r_rw_f_next;
    logic field_combo_r_rw_f_load_next;
    // Field: regblock.r_w.f
    logic [31:0] field_storage_r_w_f_value;
    logic [31:0] field_combo_r_w_f_next;
    logic field_combo_r_w_f_load_next;
    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    // always_comb begin
    always @(*) begin
        logic [31:0] next_c;
        logic load_next_c;
        next_c = field_storage_r_rw_f_value;
        load_next_c = '0;
        if(decoded_reg_strb_r_rw && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_r_rw_f_value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo_r_rw_f_next = next_c;
        field_combo_r_rw_f_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r_rw_f_value <= 32'h28;
        end else if(field_combo_r_rw_f_load_next) begin
            field_storage_r_rw_f_value <= field_combo_r_rw_f_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [31:0] next_c;
        logic load_next_c;
        next_c = field_storage_r_w_f_value;
        load_next_c = '0;
        if(decoded_reg_strb_r_w && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_r_w_f_value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo_r_w_f_next = next_c;
        field_combo_r_w_f_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r_w_f_value <= 32'h64;
        end else if(field_combo_r_w_f_load_next) begin
            field_storage_r_w_f_value <= field_combo_r_w_f_next;
        end
    end
    assign hwif_out_r_w_f = field_storage_r_w_f_value;

    assign hwif_out_er_rw_req = decoded_reg_strb_er_rw;
    assign hwif_out_er_rw_req_is_wr = decoded_req_is_wr;
    assign hwif_out_er_rw_wr_data = decoded_wr_data[31:0];
    assign hwif_out_er_rw_wr_biten = decoded_wr_biten[31:0];

    assign hwif_out_er_r_req = !decoded_req_is_wr ? decoded_reg_strb_er_r: '0;
    assign hwif_out_er_r_req_is_wr = decoded_req_is_wr;

    assign hwif_out_er_w_req = decoded_req_is_wr ? decoded_reg_strb_er_w : '0;
    assign hwif_out_er_w_req_is_wr = decoded_req_is_wr;
    assign hwif_out_er_w_wr_data = decoded_wr_data[31:0];
    assign hwif_out_er_w_wr_biten = decoded_wr_biten[31:0];

    assign hwif_out_mem_rw_addr = decoded_addr[2:0];
    assign hwif_out_mem_rw_req = decoded_reg_strb_mem_rw;
    assign hwif_out_mem_rw_req_is_wr = decoded_req_is_wr;
    assign hwif_out_mem_rw_wr_data = decoded_wr_data;
    assign hwif_out_mem_rw_wr_biten = decoded_wr_biten;

    assign hwif_out_mem_r_addr = decoded_addr[2:0];
    assign hwif_out_mem_r_req = decoded_reg_strb_mem_r;
    assign hwif_out_mem_r_req_is_wr = decoded_req_is_wr;

    assign hwif_out_mem_w_addr = decoded_addr[2:0];
    assign hwif_out_mem_w_req = decoded_reg_strb_mem_w;
    assign hwif_out_mem_w_req_is_wr = decoded_req_is_wr;
    assign hwif_out_mem_w_wr_data = decoded_wr_data;
    assign hwif_out_mem_w_wr_biten = decoded_wr_biten;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    always @(*) begin
        logic wr_ack;
        wr_ack = '0;
        wr_ack |= hwif_in_er_rw_wr_ack;
        wr_ack |= hwif_in_er_w_wr_ack;
        wr_ack |= hwif_in_mem_rw_wr_ack;
        wr_ack |= hwif_in_mem_w_wr_ack;
        external_wr_ack = wr_ack;
    end
    assign cpuif_wr_ack = external_wr_ack | (decoded_req & decoded_req_is_wr & ~decoded_strb_is_external);
    // Writes are always granted with no error response
    assign cpuif_wr_err = decoded_err;

//--------------------------------------------------------------------------
// Readback
//--------------------------------------------------------------------------
    logic readback_external_rd_ack;
    logic readback_external_rd_ack_c;
    always @(*) begin
        logic rd_ack;
        rd_ack = '0;
        rd_ack |= hwif_in_er_rw_rd_ack;
        rd_ack |= hwif_in_er_r_rd_ack;
        rd_ack |= hwif_in_mem_rw_rd_ack;
        rd_ack |= hwif_in_mem_r_rd_ack;
        readback_external_rd_ack_c = rd_ack;
    end

    assign readback_external_rd_ack = readback_external_rd_ack_c;

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[6];
    assign readback_array[0][31:0] = (decoded_reg_strb_r_rw && !decoded_req_is_wr) ? field_storage_r_rw_f_value : '0;
    assign readback_array[1][31:0] = (decoded_reg_strb_r_r && !decoded_req_is_wr) ? 32'h50 : '0;
    assign readback_array[2] = hwif_in_er_rw_rd_ack ? hwif_in_er_rw_rd_data : '0;
    assign readback_array[3] = hwif_in_er_r_rd_ack ? hwif_in_er_r_rd_data : '0;
    assign readback_array[4] = hwif_in_mem_rw_rd_ack ? hwif_in_mem_rw_rd_data : '0;
    assign readback_array[5] = hwif_in_mem_r_rd_ack ? hwif_in_mem_r_rd_data : '0;

    // Reduce the array
    // always_comb begin
    always @(*) begin
        logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr & ~decoded_strb_is_external;
        readback_err = decoded_err;
        readback_data_var = '0;
        for(int i=0; i<6; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign external_rd_ack = readback_external_rd_ack;
    assign cpuif_rd_ack = readback_done | readback_external_rd_ack;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
