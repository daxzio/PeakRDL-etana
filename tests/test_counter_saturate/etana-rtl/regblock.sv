// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module regblock (
        input wire clk,
        input wire rst,

        input wire s_apb_psel,
        input wire s_apb_pwrite,
        input wire s_apb_penable,
        input wire [2:0] s_apb_pprot,
        input wire [3:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,

        output logic [7:0] hwif_out_saturate_via_bool_count,
        output logic [0:0] hwif_out_saturate_via_bool_increment,
        output logic [0:0] hwif_out_saturate_via_bool_decrement,
        output logic [0:0] hwif_out_saturate_via_bool_clear,
        output logic [0:0] hwif_out_saturate_via_bool_set,
        output logic [7:0] hwif_out_saturate_via_const_count,
        output logic [0:0] hwif_out_saturate_via_const_increment,
        output logic [0:0] hwif_out_saturate_via_const_decrement,
        output logic [0:0] hwif_out_saturate_via_const_clear,
        output logic [0:0] hwif_out_saturate_via_const_set,
        output logic [7:0] hwif_out_saturate_via_ref_count,
        output logic [0:0] hwif_out_saturate_via_ref_increment,
        output logic [0:0] hwif_out_saturate_via_ref_decrement,
        output logic [0:0] hwif_out_saturate_via_ref_clear,
        output logic [0:0] hwif_out_saturate_via_ref_set
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [3:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;


    // Request
    logic is_active;
    always_ff @(posedge clk) begin
        if(rst) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= {s_apb_paddr[3:2], 2'b0};
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<4; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    logic [0:0] decoded_reg_strb_saturate_via_bool;
    logic [0:0] decoded_reg_strb_saturate_via_const;
    logic [0:0] decoded_reg_strb_saturate_via_ref;
    logic [0:0] decoded_reg_strb_saturate_control;
    logic decoded_req;
    logic decoded_req_is_wr;
    /* verilator lint_off UNUSEDSIGNAL */
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;
    /* verilator lint_on UNUSEDSIGNAL */

    always @(*) begin
        /* verilator lint_off UNUSEDSIGNAL */
        integer next_cpuif_addr;
        /* verilator lint_on UNUSEDSIGNAL */
        decoded_reg_strb_saturate_via_bool = cpuif_req_masked & (cpuif_addr == 4'h0);
        decoded_reg_strb_saturate_via_const = cpuif_req_masked & (cpuif_addr == 4'h4);
        decoded_reg_strb_saturate_via_ref = cpuif_req_masked & (cpuif_addr == 4'h8);
        decoded_reg_strb_saturate_control = cpuif_req_masked & (cpuif_addr == 4'hc);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;


    //--------------------------------------------------------------------------
    // Field storage declarations
    //--------------------------------------------------------------------------

    // Field: regblock.saturate_via_bool.count
    logic [7:0] field_storage_saturate_via_bool_count_value;
    logic [7:0] field_combo_saturate_via_bool_count_next;
    logic field_combo_saturate_via_bool_count_load_next;
    logic field_combo_saturate_via_bool_count_incrthreshold;
    logic field_combo_saturate_via_bool_count_incrsaturate;
    logic field_combo_saturate_via_bool_count_decrthreshold;
    logic field_combo_saturate_via_bool_count_decrsaturate;
    // Field: regblock.saturate_via_bool.increment
    logic [0:0] field_storage_saturate_via_bool_increment_value;
    logic [0:0] field_combo_saturate_via_bool_increment_next;
    logic field_combo_saturate_via_bool_increment_load_next;
    // Field: regblock.saturate_via_bool.decrement
    logic [0:0] field_storage_saturate_via_bool_decrement_value;
    logic [0:0] field_combo_saturate_via_bool_decrement_next;
    logic field_combo_saturate_via_bool_decrement_load_next;
    // Field: regblock.saturate_via_bool.clear
    logic [0:0] field_storage_saturate_via_bool_clear_value;
    logic [0:0] field_combo_saturate_via_bool_clear_next;
    logic field_combo_saturate_via_bool_clear_load_next;
    // Field: regblock.saturate_via_bool.set
    logic [0:0] field_storage_saturate_via_bool_set_value;
    logic [0:0] field_combo_saturate_via_bool_set_next;
    logic field_combo_saturate_via_bool_set_load_next;
    // Field: regblock.saturate_via_bool.step
    logic [7:0] field_storage_saturate_via_bool_step_value;
    logic [7:0] field_combo_saturate_via_bool_step_next;
    logic field_combo_saturate_via_bool_step_load_next;
    // Field: regblock.saturate_via_const.count
    logic [7:0] field_storage_saturate_via_const_count_value;
    logic [7:0] field_combo_saturate_via_const_count_next;
    logic field_combo_saturate_via_const_count_load_next;
    logic field_combo_saturate_via_const_count_incrthreshold;
    logic field_combo_saturate_via_const_count_incrsaturate;
    logic field_combo_saturate_via_const_count_decrthreshold;
    logic field_combo_saturate_via_const_count_decrsaturate;
    // Field: regblock.saturate_via_const.increment
    logic [0:0] field_storage_saturate_via_const_increment_value;
    logic [0:0] field_combo_saturate_via_const_increment_next;
    logic field_combo_saturate_via_const_increment_load_next;
    // Field: regblock.saturate_via_const.decrement
    logic [0:0] field_storage_saturate_via_const_decrement_value;
    logic [0:0] field_combo_saturate_via_const_decrement_next;
    logic field_combo_saturate_via_const_decrement_load_next;
    // Field: regblock.saturate_via_const.clear
    logic [0:0] field_storage_saturate_via_const_clear_value;
    logic [0:0] field_combo_saturate_via_const_clear_next;
    logic field_combo_saturate_via_const_clear_load_next;
    // Field: regblock.saturate_via_const.set
    logic [0:0] field_storage_saturate_via_const_set_value;
    logic [0:0] field_combo_saturate_via_const_set_next;
    logic field_combo_saturate_via_const_set_load_next;
    // Field: regblock.saturate_via_const.step
    logic [7:0] field_storage_saturate_via_const_step_value;
    logic [7:0] field_combo_saturate_via_const_step_next;
    logic field_combo_saturate_via_const_step_load_next;
    // Field: regblock.saturate_via_ref.count
    logic [7:0] field_storage_saturate_via_ref_count_value;
    logic [7:0] field_combo_saturate_via_ref_count_next;
    logic field_combo_saturate_via_ref_count_load_next;
    logic field_combo_saturate_via_ref_count_incrthreshold;
    logic field_combo_saturate_via_ref_count_incrsaturate;
    logic field_combo_saturate_via_ref_count_decrthreshold;
    logic field_combo_saturate_via_ref_count_decrsaturate;
    // Field: regblock.saturate_via_ref.increment
    logic [0:0] field_storage_saturate_via_ref_increment_value;
    logic [0:0] field_combo_saturate_via_ref_increment_next;
    logic field_combo_saturate_via_ref_increment_load_next;
    // Field: regblock.saturate_via_ref.decrement
    logic [0:0] field_storage_saturate_via_ref_decrement_value;
    logic [0:0] field_combo_saturate_via_ref_decrement_next;
    logic field_combo_saturate_via_ref_decrement_load_next;
    // Field: regblock.saturate_via_ref.clear
    logic [0:0] field_storage_saturate_via_ref_clear_value;
    logic [0:0] field_combo_saturate_via_ref_clear_next;
    logic field_combo_saturate_via_ref_clear_load_next;
    // Field: regblock.saturate_via_ref.set
    logic [0:0] field_storage_saturate_via_ref_set_value;
    logic [0:0] field_combo_saturate_via_ref_set_next;
    logic field_combo_saturate_via_ref_set_load_next;
    // Field: regblock.saturate_via_ref.step
    logic [7:0] field_storage_saturate_via_ref_step_value;
    logic [7:0] field_combo_saturate_via_ref_step_next;
    logic field_combo_saturate_via_ref_step_load_next;
    // Field: regblock.saturate_control.min
    logic [7:0] field_storage_saturate_control_min_value;
    logic [7:0] field_combo_saturate_control_min_next;
    logic field_combo_saturate_control_min_load_next;
    // Field: regblock.saturate_control.max
    logic [7:0] field_storage_saturate_control_max_value;
    logic [7:0] field_combo_saturate_control_max_next;
    logic field_combo_saturate_control_max_load_next;
    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_saturate_via_bool_count_value;
        load_next_c = '0;
        if(field_storage_saturate_via_bool_set_value) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(field_storage_saturate_via_bool_clear_value) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        if(field_storage_saturate_via_bool_increment_value) begin // increment
            if(((9)'(next_c) + field_storage_saturate_via_bool_step_value) > 8'hff) begin // up-counter saturated
                next_c = 8'hff;
            end else begin
                next_c = next_c + field_storage_saturate_via_bool_step_value;
            end
            load_next_c = '1;
        end
        field_combo_saturate_via_bool_count_incrthreshold = (field_storage_saturate_via_bool_count_value >= 8'hff);
        field_combo_saturate_via_bool_count_incrsaturate = (field_storage_saturate_via_bool_count_value >= 8'hff);
        if(field_storage_saturate_via_bool_decrement_value) begin // decrement
            if((9)'(next_c) < (field_storage_saturate_via_bool_step_value + 8'd0)) begin // down-counter saturated
                next_c = 8'd0;
            end else begin
                next_c = next_c - field_storage_saturate_via_bool_step_value;
            end
            load_next_c = '1;
        end
        field_combo_saturate_via_bool_count_decrthreshold = (field_storage_saturate_via_bool_count_value <= 8'd0);
        field_combo_saturate_via_bool_count_decrsaturate = (field_storage_saturate_via_bool_count_value <= 8'd0);
        field_combo_saturate_via_bool_count_next = next_c;
        field_combo_saturate_via_bool_count_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_saturate_via_bool_count_value <= 8'h0;
        end else if(field_combo_saturate_via_bool_count_load_next) begin
            field_storage_saturate_via_bool_count_value <= field_combo_saturate_via_bool_count_next;
        end
    end
    assign hwif_out_saturate_via_bool_count = field_storage_saturate_via_bool_count_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_saturate_via_bool_increment_value;
        load_next_c = '0;
        if(decoded_reg_strb_saturate_via_bool && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_saturate_via_bool_increment_value & ~decoded_wr_biten[9:9]) | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo_saturate_via_bool_increment_next = next_c;
        field_combo_saturate_via_bool_increment_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_saturate_via_bool_increment_value <= 1'h0;
        end else if(field_combo_saturate_via_bool_increment_load_next) begin
            field_storage_saturate_via_bool_increment_value <= field_combo_saturate_via_bool_increment_next;
        end
    end
    assign hwif_out_saturate_via_bool_increment = field_storage_saturate_via_bool_increment_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_saturate_via_bool_decrement_value;
        load_next_c = '0;
        if(decoded_reg_strb_saturate_via_bool && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_saturate_via_bool_decrement_value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo_saturate_via_bool_decrement_next = next_c;
        field_combo_saturate_via_bool_decrement_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_saturate_via_bool_decrement_value <= 1'h0;
        end else if(field_combo_saturate_via_bool_decrement_load_next) begin
            field_storage_saturate_via_bool_decrement_value <= field_combo_saturate_via_bool_decrement_next;
        end
    end
    assign hwif_out_saturate_via_bool_decrement = field_storage_saturate_via_bool_decrement_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_saturate_via_bool_clear_value;
        load_next_c = '0;
        if(decoded_reg_strb_saturate_via_bool && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_saturate_via_bool_clear_value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo_saturate_via_bool_clear_next = next_c;
        field_combo_saturate_via_bool_clear_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_saturate_via_bool_clear_value <= 1'h0;
        end else if(field_combo_saturate_via_bool_clear_load_next) begin
            field_storage_saturate_via_bool_clear_value <= field_combo_saturate_via_bool_clear_next;
        end
    end
    assign hwif_out_saturate_via_bool_clear = field_storage_saturate_via_bool_clear_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_saturate_via_bool_set_value;
        load_next_c = '0;
        if(decoded_reg_strb_saturate_via_bool && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_saturate_via_bool_set_value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo_saturate_via_bool_set_next = next_c;
        field_combo_saturate_via_bool_set_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_saturate_via_bool_set_value <= 1'h0;
        end else if(field_combo_saturate_via_bool_set_load_next) begin
            field_storage_saturate_via_bool_set_value <= field_combo_saturate_via_bool_set_next;
        end
    end
    assign hwif_out_saturate_via_bool_set = field_storage_saturate_via_bool_set_value;
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_saturate_via_bool_step_value;
        load_next_c = '0;
        if(decoded_reg_strb_saturate_via_bool && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_saturate_via_bool_step_value & ~decoded_wr_biten[23:16]) | (decoded_wr_data[23:16] & decoded_wr_biten[23:16]);
            load_next_c = '1;
        end
        field_combo_saturate_via_bool_step_next = next_c;
        field_combo_saturate_via_bool_step_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_saturate_via_bool_step_value <= 8'h1;
        end else if(field_combo_saturate_via_bool_step_load_next) begin
            field_storage_saturate_via_bool_step_value <= field_combo_saturate_via_bool_step_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_saturate_via_const_count_value;
        load_next_c = '0;
        if(field_storage_saturate_via_const_set_value) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(field_storage_saturate_via_const_clear_value) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        if(field_storage_saturate_via_const_increment_value) begin // increment
            if(((9)'(next_c) + field_storage_saturate_via_const_step_value) > 8'hfa) begin // up-counter saturated
                next_c = 8'hfa;
            end else begin
                next_c = next_c + field_storage_saturate_via_const_step_value;
            end
            load_next_c = '1;
        end
        field_combo_saturate_via_const_count_incrthreshold = (field_storage_saturate_via_const_count_value >= 8'hff);
        field_combo_saturate_via_const_count_incrsaturate = (field_storage_saturate_via_const_count_value >= 8'hfa);
        if(field_storage_saturate_via_const_decrement_value) begin // decrement
            if((9)'(next_c) < (field_storage_saturate_via_const_step_value + 8'h5)) begin // down-counter saturated
                next_c = 8'h5;
            end else begin
                next_c = next_c - field_storage_saturate_via_const_step_value;
            end
            load_next_c = '1;
        end
        field_combo_saturate_via_const_count_decrthreshold = (field_storage_saturate_via_const_count_value <= 8'd0);
        field_combo_saturate_via_const_count_decrsaturate = (field_storage_saturate_via_const_count_value <= 8'h5);
        field_combo_saturate_via_const_count_next = next_c;
        field_combo_saturate_via_const_count_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_saturate_via_const_count_value <= 8'h0;
        end else if(field_combo_saturate_via_const_count_load_next) begin
            field_storage_saturate_via_const_count_value <= field_combo_saturate_via_const_count_next;
        end
    end
    assign hwif_out_saturate_via_const_count = field_storage_saturate_via_const_count_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_saturate_via_const_increment_value;
        load_next_c = '0;
        if(decoded_reg_strb_saturate_via_const && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_saturate_via_const_increment_value & ~decoded_wr_biten[9:9]) | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo_saturate_via_const_increment_next = next_c;
        field_combo_saturate_via_const_increment_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_saturate_via_const_increment_value <= 1'h0;
        end else if(field_combo_saturate_via_const_increment_load_next) begin
            field_storage_saturate_via_const_increment_value <= field_combo_saturate_via_const_increment_next;
        end
    end
    assign hwif_out_saturate_via_const_increment = field_storage_saturate_via_const_increment_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_saturate_via_const_decrement_value;
        load_next_c = '0;
        if(decoded_reg_strb_saturate_via_const && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_saturate_via_const_decrement_value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo_saturate_via_const_decrement_next = next_c;
        field_combo_saturate_via_const_decrement_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_saturate_via_const_decrement_value <= 1'h0;
        end else if(field_combo_saturate_via_const_decrement_load_next) begin
            field_storage_saturate_via_const_decrement_value <= field_combo_saturate_via_const_decrement_next;
        end
    end
    assign hwif_out_saturate_via_const_decrement = field_storage_saturate_via_const_decrement_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_saturate_via_const_clear_value;
        load_next_c = '0;
        if(decoded_reg_strb_saturate_via_const && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_saturate_via_const_clear_value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo_saturate_via_const_clear_next = next_c;
        field_combo_saturate_via_const_clear_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_saturate_via_const_clear_value <= 1'h0;
        end else if(field_combo_saturate_via_const_clear_load_next) begin
            field_storage_saturate_via_const_clear_value <= field_combo_saturate_via_const_clear_next;
        end
    end
    assign hwif_out_saturate_via_const_clear = field_storage_saturate_via_const_clear_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_saturate_via_const_set_value;
        load_next_c = '0;
        if(decoded_reg_strb_saturate_via_const && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_saturate_via_const_set_value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo_saturate_via_const_set_next = next_c;
        field_combo_saturate_via_const_set_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_saturate_via_const_set_value <= 1'h0;
        end else if(field_combo_saturate_via_const_set_load_next) begin
            field_storage_saturate_via_const_set_value <= field_combo_saturate_via_const_set_next;
        end
    end
    assign hwif_out_saturate_via_const_set = field_storage_saturate_via_const_set_value;
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_saturate_via_const_step_value;
        load_next_c = '0;
        if(decoded_reg_strb_saturate_via_const && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_saturate_via_const_step_value & ~decoded_wr_biten[23:16]) | (decoded_wr_data[23:16] & decoded_wr_biten[23:16]);
            load_next_c = '1;
        end
        field_combo_saturate_via_const_step_next = next_c;
        field_combo_saturate_via_const_step_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_saturate_via_const_step_value <= 8'h1;
        end else if(field_combo_saturate_via_const_step_load_next) begin
            field_storage_saturate_via_const_step_value <= field_combo_saturate_via_const_step_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_saturate_via_ref_count_value;
        load_next_c = '0;
        if(field_storage_saturate_via_ref_set_value) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(field_storage_saturate_via_ref_clear_value) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        if(field_storage_saturate_via_ref_increment_value) begin // increment
            if(((9)'(next_c) + field_storage_saturate_via_ref_step_value) > field_storage_saturate_control_max_value) begin // up-counter saturated
                next_c = field_storage_saturate_control_max_value;
            end else begin
                next_c = next_c + field_storage_saturate_via_ref_step_value;
            end
            load_next_c = '1;
        end
        field_combo_saturate_via_ref_count_incrthreshold = (field_storage_saturate_via_ref_count_value >= 8'hff);
        field_combo_saturate_via_ref_count_incrsaturate = (field_storage_saturate_via_ref_count_value >= field_storage_saturate_control_max_value);
        if(field_storage_saturate_via_ref_decrement_value) begin // decrement
            if((9)'(next_c) < (field_storage_saturate_via_ref_step_value + field_storage_saturate_control_min_value)) begin // down-counter saturated
                next_c = field_storage_saturate_control_min_value;
            end else begin
                next_c = next_c - field_storage_saturate_via_ref_step_value;
            end
            load_next_c = '1;
        end
        field_combo_saturate_via_ref_count_decrthreshold = (field_storage_saturate_via_ref_count_value <= 8'd0);
        field_combo_saturate_via_ref_count_decrsaturate = (field_storage_saturate_via_ref_count_value <= field_storage_saturate_control_min_value);
        field_combo_saturate_via_ref_count_next = next_c;
        field_combo_saturate_via_ref_count_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_saturate_via_ref_count_value <= 8'h0;
        end else if(field_combo_saturate_via_ref_count_load_next) begin
            field_storage_saturate_via_ref_count_value <= field_combo_saturate_via_ref_count_next;
        end
    end
    assign hwif_out_saturate_via_ref_count = field_storage_saturate_via_ref_count_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_saturate_via_ref_increment_value;
        load_next_c = '0;
        if(decoded_reg_strb_saturate_via_ref && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_saturate_via_ref_increment_value & ~decoded_wr_biten[9:9]) | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo_saturate_via_ref_increment_next = next_c;
        field_combo_saturate_via_ref_increment_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_saturate_via_ref_increment_value <= 1'h0;
        end else if(field_combo_saturate_via_ref_increment_load_next) begin
            field_storage_saturate_via_ref_increment_value <= field_combo_saturate_via_ref_increment_next;
        end
    end
    assign hwif_out_saturate_via_ref_increment = field_storage_saturate_via_ref_increment_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_saturate_via_ref_decrement_value;
        load_next_c = '0;
        if(decoded_reg_strb_saturate_via_ref && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_saturate_via_ref_decrement_value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo_saturate_via_ref_decrement_next = next_c;
        field_combo_saturate_via_ref_decrement_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_saturate_via_ref_decrement_value <= 1'h0;
        end else if(field_combo_saturate_via_ref_decrement_load_next) begin
            field_storage_saturate_via_ref_decrement_value <= field_combo_saturate_via_ref_decrement_next;
        end
    end
    assign hwif_out_saturate_via_ref_decrement = field_storage_saturate_via_ref_decrement_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_saturate_via_ref_clear_value;
        load_next_c = '0;
        if(decoded_reg_strb_saturate_via_ref && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_saturate_via_ref_clear_value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo_saturate_via_ref_clear_next = next_c;
        field_combo_saturate_via_ref_clear_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_saturate_via_ref_clear_value <= 1'h0;
        end else if(field_combo_saturate_via_ref_clear_load_next) begin
            field_storage_saturate_via_ref_clear_value <= field_combo_saturate_via_ref_clear_next;
        end
    end
    assign hwif_out_saturate_via_ref_clear = field_storage_saturate_via_ref_clear_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_saturate_via_ref_set_value;
        load_next_c = '0;
        if(decoded_reg_strb_saturate_via_ref && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_saturate_via_ref_set_value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo_saturate_via_ref_set_next = next_c;
        field_combo_saturate_via_ref_set_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_saturate_via_ref_set_value <= 1'h0;
        end else if(field_combo_saturate_via_ref_set_load_next) begin
            field_storage_saturate_via_ref_set_value <= field_combo_saturate_via_ref_set_next;
        end
    end
    assign hwif_out_saturate_via_ref_set = field_storage_saturate_via_ref_set_value;
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_saturate_via_ref_step_value;
        load_next_c = '0;
        if(decoded_reg_strb_saturate_via_ref && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_saturate_via_ref_step_value & ~decoded_wr_biten[23:16]) | (decoded_wr_data[23:16] & decoded_wr_biten[23:16]);
            load_next_c = '1;
        end
        field_combo_saturate_via_ref_step_next = next_c;
        field_combo_saturate_via_ref_step_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_saturate_via_ref_step_value <= 8'h1;
        end else if(field_combo_saturate_via_ref_step_load_next) begin
            field_storage_saturate_via_ref_step_value <= field_combo_saturate_via_ref_step_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_saturate_control_min_value;
        load_next_c = '0;
        if(decoded_reg_strb_saturate_control && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_saturate_control_min_value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo_saturate_control_min_next = next_c;
        field_combo_saturate_control_min_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_saturate_control_min_value <= 8'h0;
        end else if(field_combo_saturate_control_min_load_next) begin
            field_storage_saturate_control_min_value <= field_combo_saturate_control_min_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_saturate_control_max_value;
        load_next_c = '0;
        if(decoded_reg_strb_saturate_control && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_saturate_control_max_value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end
        field_combo_saturate_control_max_next = next_c;
        field_combo_saturate_control_max_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_saturate_control_max_value <= 8'hff;
        end else if(field_combo_saturate_control_max_load_next) begin
            field_storage_saturate_control_max_value <= field_combo_saturate_control_max_next;
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

//--------------------------------------------------------------------------
// Readback
//--------------------------------------------------------------------------
    logic readback_external_rd_ack;
    assign readback_external_rd_ack = 0;

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[4];
    assign readback_array[0][7:0] = (decoded_reg_strb_saturate_via_bool && !decoded_req_is_wr) ? field_storage_saturate_via_bool_count_value : '0;
    assign readback_array[0][15:8] = '0;
    assign readback_array[0][23:16] = (decoded_reg_strb_saturate_via_bool && !decoded_req_is_wr) ? field_storage_saturate_via_bool_step_value : '0;
    assign readback_array[0][31:24] = '0;
    assign readback_array[1][7:0] = (decoded_reg_strb_saturate_via_const && !decoded_req_is_wr) ? field_storage_saturate_via_const_count_value : '0;
    assign readback_array[1][15:8] = '0;
    assign readback_array[1][23:16] = (decoded_reg_strb_saturate_via_const && !decoded_req_is_wr) ? field_storage_saturate_via_const_step_value : '0;
    assign readback_array[1][31:24] = '0;
    assign readback_array[2][7:0] = (decoded_reg_strb_saturate_via_ref && !decoded_req_is_wr) ? field_storage_saturate_via_ref_count_value : '0;
    assign readback_array[2][15:8] = '0;
    assign readback_array[2][23:16] = (decoded_reg_strb_saturate_via_ref && !decoded_req_is_wr) ? field_storage_saturate_via_ref_step_value : '0;
    assign readback_array[2][31:24] = '0;
    assign readback_array[3][7:0] = (decoded_reg_strb_saturate_control && !decoded_req_is_wr) ? field_storage_saturate_control_min_value : '0;
    assign readback_array[3][15:8] = (decoded_reg_strb_saturate_control && !decoded_req_is_wr) ? field_storage_saturate_control_max_value : '0;
    assign readback_array[3][31:16] = '0;

    // Reduce the array
    // always_comb begin
    always @(*) begin
        logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<4; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
