/* Generated by Yosys 0.58 (git sha1 157aabb58, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3) */

module regblock(clk, rst, s_apb_psel, s_apb_pwrite, s_apb_penable, s_apb_pprot, s_apb_paddr, s_apb_pwdata, s_apb_pstrb, s_apb_pready, s_apb_prdata, s_apb_pslverr, hwif_out_r1_f, hwif_out_r1_f_anded, hwif_out_r1_f_ored, hwif_out_r1_f_xored);
  input clk;
  wire clk;
  input rst;
  wire rst;
  input s_apb_psel;
  wire s_apb_psel;
  input s_apb_pwrite;
  wire s_apb_pwrite;
  input s_apb_penable;
  wire s_apb_penable;
  input [2:0] s_apb_pprot;
  wire [2:0] s_apb_pprot;
  input [2:0] s_apb_paddr;
  wire [2:0] s_apb_paddr;
  input [31:0] s_apb_pwdata;
  wire [31:0] s_apb_pwdata;
  input [3:0] s_apb_pstrb;
  wire [3:0] s_apb_pstrb;
  output s_apb_pready;
  wire s_apb_pready;
  output [31:0] s_apb_prdata;
  wire [31:0] s_apb_prdata;
  output s_apb_pslverr;
  wire s_apb_pslverr;
  output [7:0] hwif_out_r1_f;
  wire [7:0] hwif_out_r1_f;
  output [0:0] hwif_out_r1_f_anded;
  wire [0:0] hwif_out_r1_f_anded;
  output [0:0] hwif_out_r1_f_ored;
  wire [0:0] hwif_out_r1_f_ored;
  output [0:0] hwif_out_r1_f_xored;
  wire [0:0] hwif_out_r1_f_xored;
  wire [7:0] _000_;
  wire [7:0] _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire [3:0] _005_;
  wire [1:0] _006_;
  wire [3:0] _007_;
  wire [1:0] _008_;
  wire [3:0] _009_;
  wire [1:0] _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire [7:0] _014_;
  wire [7:0] _015_;
  wire _016_;
  wire _017_;
  wire [2:0] cpuif_addr;
  wire cpuif_rd_ack;
  wire [31:0] cpuif_rd_data;
  wire cpuif_rd_err;
  reg cpuif_req;
  reg cpuif_req_is_wr;
  wire cpuif_req_masked;
  wire cpuif_req_stall_rd;
  wire cpuif_req_stall_wr;
  wire cpuif_wr_ack;
  wire [31:0] cpuif_wr_biten;
  wire [31:0] cpuif_wr_data;
  wire cpuif_wr_err;
  wire [0:0] decoded_reg_strb_r1;
  wire decoded_req;
  wire decoded_req_is_wr;
  wire [31:0] decoded_wr_biten;
  wire [31:0] decoded_wr_data;
  wire field_combo_r1_f_load_next;
  reg [7:0] field_storage_r1_f_value;
  reg is_active;
  wire [31:0] \readback_array[0] ;
  wire [31:0] readback_data;
  wire readback_done;
  wire readback_err;
  wire readback_external_rd_ack;
  always @(posedge clk)
    if (_003_) cpuif_req <= 1'h0;
    else if (s_apb_psel) cpuif_req <= 1'h1;
  always @(posedge clk)
    if (rst) cpuif_req_is_wr <= 1'h0;
    else if (_002_) cpuif_req_is_wr <= s_apb_pwrite;
  reg \cpuif_wr_data_reg[0] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[0]  <= 1'h0;
    else if (_002_) \cpuif_wr_data_reg[0]  <= s_apb_pwdata[0];
  assign cpuif_wr_data[0] = \cpuif_wr_data_reg[0] ;
  reg \cpuif_wr_data_reg[1] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[1]  <= 1'h0;
    else if (_002_) \cpuif_wr_data_reg[1]  <= s_apb_pwdata[1];
  assign cpuif_wr_data[1] = \cpuif_wr_data_reg[1] ;
  reg \cpuif_wr_data_reg[2] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[2]  <= 1'h0;
    else if (_002_) \cpuif_wr_data_reg[2]  <= s_apb_pwdata[2];
  assign cpuif_wr_data[2] = \cpuif_wr_data_reg[2] ;
  reg \cpuif_wr_data_reg[3] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[3]  <= 1'h0;
    else if (_002_) \cpuif_wr_data_reg[3]  <= s_apb_pwdata[3];
  assign cpuif_wr_data[3] = \cpuif_wr_data_reg[3] ;
  reg \cpuif_wr_data_reg[4] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[4]  <= 1'h0;
    else if (_002_) \cpuif_wr_data_reg[4]  <= s_apb_pwdata[4];
  assign cpuif_wr_data[4] = \cpuif_wr_data_reg[4] ;
  reg \cpuif_wr_data_reg[5] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[5]  <= 1'h0;
    else if (_002_) \cpuif_wr_data_reg[5]  <= s_apb_pwdata[5];
  assign cpuif_wr_data[5] = \cpuif_wr_data_reg[5] ;
  reg \cpuif_wr_data_reg[6] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[6]  <= 1'h0;
    else if (_002_) \cpuif_wr_data_reg[6]  <= s_apb_pwdata[6];
  assign cpuif_wr_data[6] = \cpuif_wr_data_reg[6] ;
  reg \cpuif_wr_data_reg[7] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[7]  <= 1'h0;
    else if (_002_) \cpuif_wr_data_reg[7]  <= s_apb_pwdata[7];
  assign cpuif_wr_data[7] = \cpuif_wr_data_reg[7] ;
  reg \cpuif_wr_biten_reg[6] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_biten_reg[6]  <= 1'h0;
    else if (_002_) \cpuif_wr_biten_reg[6]  <= s_apb_pstrb[0];
  assign cpuif_wr_biten[6] = \cpuif_wr_biten_reg[6] ;
  reg \cpuif_addr_reg[2] ;
  always @(posedge clk)
    if (rst) \cpuif_addr_reg[2]  <= 1'h0;
    else if (_002_) \cpuif_addr_reg[2]  <= s_apb_paddr[2];
  assign cpuif_addr[2] = \cpuif_addr_reg[2] ;
  always @(posedge clk)
    if (rst) is_active <= 1'h0;
    else is_active <= _017_;
  always @(posedge clk)
    if (rst) field_storage_r1_f_value[0] <= 1'h0;
    else if (field_combo_r1_f_load_next) field_storage_r1_f_value[0] <= _015_[0];
  always @(posedge clk)
    if (rst) field_storage_r1_f_value[1] <= 1'h0;
    else if (field_combo_r1_f_load_next) field_storage_r1_f_value[1] <= _015_[1];
  always @(posedge clk)
    if (rst) field_storage_r1_f_value[2] <= 1'h0;
    else if (field_combo_r1_f_load_next) field_storage_r1_f_value[2] <= _015_[2];
  always @(posedge clk)
    if (rst) field_storage_r1_f_value[3] <= 1'h0;
    else if (field_combo_r1_f_load_next) field_storage_r1_f_value[3] <= _015_[3];
  always @(posedge clk)
    if (rst) field_storage_r1_f_value[4] <= 1'h0;
    else if (field_combo_r1_f_load_next) field_storage_r1_f_value[4] <= _015_[4];
  always @(posedge clk)
    if (rst) field_storage_r1_f_value[5] <= 1'h0;
    else if (field_combo_r1_f_load_next) field_storage_r1_f_value[5] <= _015_[5];
  always @(posedge clk)
    if (rst) field_storage_r1_f_value[6] <= 1'h0;
    else if (field_combo_r1_f_load_next) field_storage_r1_f_value[6] <= _015_[6];
  always @(posedge clk)
    if (rst) field_storage_r1_f_value[7] <= 1'h0;
    else if (field_combo_r1_f_load_next) field_storage_r1_f_value[7] <= _015_[7];
  assign decoded_reg_strb_r1 = cpuif_req & _011_;
  assign _000_[0] = field_storage_r1_f_value[0] & _014_[7];
  assign _000_[1] = field_storage_r1_f_value[1] & _014_[7];
  assign _000_[2] = field_storage_r1_f_value[2] & _014_[7];
  assign _000_[3] = field_storage_r1_f_value[3] & _014_[7];
  assign _000_[4] = field_storage_r1_f_value[4] & _014_[7];
  assign _000_[5] = field_storage_r1_f_value[5] & _014_[7];
  assign _000_[6] = field_storage_r1_f_value[6] & _014_[7];
  assign _000_[7] = field_storage_r1_f_value[7] & _014_[7];
  assign _001_[0] = cpuif_wr_data[0] & cpuif_wr_biten[6];
  assign _001_[1] = cpuif_wr_data[1] & cpuif_wr_biten[6];
  assign _001_[2] = cpuif_wr_data[2] & cpuif_wr_biten[6];
  assign _001_[3] = cpuif_wr_data[3] & cpuif_wr_biten[6];
  assign _001_[4] = cpuif_wr_data[4] & cpuif_wr_biten[6];
  assign _001_[5] = cpuif_wr_data[5] & cpuif_wr_biten[6];
  assign _001_[6] = cpuif_wr_data[6] & cpuif_wr_biten[6];
  assign _001_[7] = cpuif_wr_data[7] & cpuif_wr_biten[6];
  assign _015_[0] = _000_[0] | _001_[0];
  assign _015_[1] = _000_[1] | _001_[1];
  assign _015_[2] = _000_[2] | _001_[2];
  assign _015_[3] = _000_[3] | _001_[3];
  assign _015_[4] = _000_[4] | _001_[4];
  assign _015_[5] = _000_[5] | _001_[5];
  assign _015_[6] = _000_[6] | _001_[6];
  assign _015_[7] = _000_[7] | _001_[7];
  assign cpuif_wr_ack = cpuif_req & cpuif_req_is_wr;
  assign cpuif_rd_ack = cpuif_req & _013_;
  assign _002_ = s_apb_psel & _004_;
  assign _005_[0] = field_storage_r1_f_value[0] & field_storage_r1_f_value[1];
  assign _005_[1] = field_storage_r1_f_value[2] & field_storage_r1_f_value[3];
  assign _005_[2] = field_storage_r1_f_value[4] & field_storage_r1_f_value[5];
  assign _005_[3] = field_storage_r1_f_value[6] & field_storage_r1_f_value[7];
  assign _006_[0] = _005_[0] & _005_[1];
  assign _006_[1] = _005_[2] & _005_[3];
  assign hwif_out_r1_f_anded = _006_[0] & _006_[1];
  assign _007_[0] = field_storage_r1_f_value[0] | field_storage_r1_f_value[1];
  assign _007_[1] = field_storage_r1_f_value[2] | field_storage_r1_f_value[3];
  assign _007_[2] = field_storage_r1_f_value[4] | field_storage_r1_f_value[5];
  assign _007_[3] = field_storage_r1_f_value[6] | field_storage_r1_f_value[7];
  assign _008_[0] = _007_[0] | _007_[1];
  assign _008_[1] = _007_[2] | _007_[3];
  assign hwif_out_r1_f_ored = _008_[0] | _008_[1];
  assign _009_[0] = field_storage_r1_f_value[0] ^ field_storage_r1_f_value[1];
  assign _009_[1] = field_storage_r1_f_value[2] ^ field_storage_r1_f_value[3];
  assign _009_[2] = field_storage_r1_f_value[4] ^ field_storage_r1_f_value[5];
  assign _009_[3] = field_storage_r1_f_value[6] ^ field_storage_r1_f_value[7];
  assign _010_[0] = _009_[0] ^ _009_[1];
  assign _010_[1] = _009_[2] ^ _009_[3];
  assign hwif_out_r1_f_xored = _010_[0] ^ _010_[1];
  assign _003_ = rst | is_active;
  assign _011_ = ~cpuif_addr[2];
  assign _013_ = ~cpuif_req_is_wr;
  assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
  assign field_combo_r1_f_load_next = decoded_reg_strb_r1 & cpuif_req_is_wr;
  assign _012_ = decoded_reg_strb_r1 & _013_;
  assign s_apb_prdata[0] = _012_ ? field_storage_r1_f_value[0] : 1'h0;
  assign s_apb_prdata[1] = _012_ ? field_storage_r1_f_value[1] : 1'h0;
  assign s_apb_prdata[2] = _012_ ? field_storage_r1_f_value[2] : 1'h0;
  assign s_apb_prdata[3] = _012_ ? field_storage_r1_f_value[3] : 1'h0;
  assign s_apb_prdata[4] = _012_ ? field_storage_r1_f_value[4] : 1'h0;
  assign s_apb_prdata[5] = _012_ ? field_storage_r1_f_value[5] : 1'h0;
  assign s_apb_prdata[6] = _012_ ? field_storage_r1_f_value[6] : 1'h0;
  assign s_apb_prdata[7] = _012_ ? field_storage_r1_f_value[7] : 1'h0;
  assign _016_ = ~s_apb_pready;
  assign _017_ = is_active ? _016_ : s_apb_psel;
  assign _004_ = ~is_active;
  assign _014_[7] = ~cpuif_wr_biten[6];
  assign _014_[6:0] = { _014_[7], _014_[7], _014_[7], _014_[7], _014_[7], _014_[7], _014_[7] };
  assign cpuif_addr[1:0] = 2'h0;
  assign cpuif_rd_data = { 24'h000000, s_apb_prdata[7:0] };
  assign cpuif_rd_err = 1'h0;
  assign cpuif_req_masked = cpuif_req;
  assign cpuif_req_stall_rd = 1'h0;
  assign cpuif_req_stall_wr = 1'h0;
  assign { cpuif_wr_biten[7], cpuif_wr_biten[5:0] } = { cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6] };
  assign cpuif_wr_err = 1'h0;
  assign decoded_req = cpuif_req;
  assign decoded_req_is_wr = cpuif_req_is_wr;
  assign decoded_wr_biten = { cpuif_wr_biten[31:8], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6] };
  assign decoded_wr_data = cpuif_wr_data;
  assign hwif_out_r1_f = field_storage_r1_f_value;
  assign \readback_array[0]  = { 24'h000000, s_apb_prdata[7:0] };
  assign readback_data = { 24'h000000, s_apb_prdata[7:0] };
  assign readback_done = cpuif_rd_ack;
  assign readback_err = 1'h0;
  assign readback_external_rd_ack = 1'h0;
  assign s_apb_prdata[31:8] = 24'h000000;
  assign s_apb_pslverr = 1'h0;
endmodule
