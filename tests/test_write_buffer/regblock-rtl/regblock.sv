// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module regblock (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [5:0] s_cpuif_addr,
        input wire [15:0] s_cpuif_wr_data,
        input wire [15:0] s_cpuif_wr_biten,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [15:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input regblock_pkg::regblock__in_t hwif_in,
        output regblock_pkg::regblock__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [5:0] cpuif_addr;
    logic [15:0] cpuif_wr_data;
    logic [15:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [15:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign cpuif_wr_biten = s_cpuif_wr_biten;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;
    logic external_req;
    logic external_pending;
    logic external_wr_ack;
    logic external_rd_ack;
    always_ff @(posedge clk) begin
        if(rst) begin
            external_pending <= '0;
        end else begin
            if(external_req & ~external_wr_ack & ~external_rd_ack) external_pending <= '1;
            else if(external_wr_ack | external_rd_ack) external_pending <= '0;
            `ifndef SYNTHESIS
                assert_bad_ext_wr_ack: assert(!external_wr_ack || (external_pending | external_req))
                    else $error("An external wr_ack strobe was asserted when no external request was active");
                assert_bad_ext_rd_ack: assert(!external_rd_ack || (external_pending | external_req))
                    else $error("An external rd_ack strobe was asserted when no external request was active");
            `endif
        end
    end

    // Read & write latencies are balanced. Stalls not required
    // except if external
    assign cpuif_req_stall_rd = external_pending;
    assign cpuif_req_stall_wr = external_pending;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic [3:0] reg1;
        logic [3:0] reg1_msb0;
        logic [1:0] reg2;
        logic [1:0] reg2_msb0;
        logic g1_r1;
        logic g1_r2;
        logic g2_r1;
        logic g2_r2;
        logic g3_r1;
        logic g3_trig;
        logic g4_r1;
        logic g4_trig;
        logic g5_r1;
        logic g5_modcount;
        logic g6_r1;
        logic g6_modcount;
        logic ext_reg1;
        logic ext_block;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_err;
    logic decoded_strb_is_external;

    logic [5:0] decoded_addr;

    logic decoded_req;
    logic decoded_req_is_wr;
    logic [15:0] decoded_wr_data;
    logic [15:0] decoded_wr_biten;

    always_comb begin
        automatic logic is_valid_addr;
        automatic logic is_invalid_rw;
        automatic logic is_external;
        is_external = '0;
        is_valid_addr = '1; // No error checking on valid address access
        is_invalid_rw = '0;
        decoded_reg_strb.reg1[0] = cpuif_req_masked & (cpuif_addr == 6'h0);
        decoded_reg_strb.reg1[1] = cpuif_req_masked & (cpuif_addr == 6'h2);
        decoded_reg_strb.reg1[2] = cpuif_req_masked & (cpuif_addr == 6'h4);
        decoded_reg_strb.reg1[3] = cpuif_req_masked & (cpuif_addr == 6'h6);
        decoded_reg_strb.reg1_msb0[0] = cpuif_req_masked & (cpuif_addr == 6'h8);
        decoded_reg_strb.reg1_msb0[1] = cpuif_req_masked & (cpuif_addr == 6'ha);
        decoded_reg_strb.reg1_msb0[2] = cpuif_req_masked & (cpuif_addr == 6'hc);
        decoded_reg_strb.reg1_msb0[3] = cpuif_req_masked & (cpuif_addr == 6'he);
        decoded_reg_strb.reg2[0] = cpuif_req_masked & (cpuif_addr == 6'h10);
        decoded_reg_strb.reg2[1] = cpuif_req_masked & (cpuif_addr == 6'h12);
        decoded_reg_strb.reg2_msb0[0] = cpuif_req_masked & (cpuif_addr == 6'h14);
        decoded_reg_strb.reg2_msb0[1] = cpuif_req_masked & (cpuif_addr == 6'h16);
        decoded_reg_strb.g1_r1 = cpuif_req_masked & (cpuif_addr == 6'h18);
        decoded_reg_strb.g1_r2 = cpuif_req_masked & (cpuif_addr == 6'h1a);
        decoded_reg_strb.g2_r1 = cpuif_req_masked & (cpuif_addr == 6'h1c);
        decoded_reg_strb.g2_r2 = cpuif_req_masked & (cpuif_addr == 6'h1e);
        decoded_reg_strb.g3_r1 = cpuif_req_masked & (cpuif_addr == 6'h20);
        decoded_reg_strb.g3_trig = cpuif_req_masked & (cpuif_addr == 6'h22) & cpuif_req_is_wr;
        decoded_reg_strb.g4_r1 = cpuif_req_masked & (cpuif_addr == 6'h24);
        decoded_reg_strb.g4_trig = cpuif_req_masked & (cpuif_addr == 6'h26);
        decoded_reg_strb.g5_r1 = cpuif_req_masked & (cpuif_addr == 6'h28);
        decoded_reg_strb.g5_modcount = cpuif_req_masked & (cpuif_addr == 6'h2a);
        decoded_reg_strb.g6_r1 = cpuif_req_masked & (cpuif_addr == 6'h2c);
        decoded_reg_strb.g6_modcount = cpuif_req_masked & (cpuif_addr == 6'h2e);
        decoded_reg_strb.ext_reg1 = cpuif_req_masked & (cpuif_addr == 6'h30);
        is_external |= cpuif_req_masked & (cpuif_addr == 6'h30);
        decoded_reg_strb.ext_block = cpuif_req_masked & (cpuif_addr >= 6'h32) & (cpuif_addr <= 6'h32 + 6'h1);
        is_external |= cpuif_req_masked & (cpuif_addr >= 6'h32) & (cpuif_addr <= 6'h32 + 6'h1);
        decoded_err = (~is_valid_addr | is_invalid_rw) & decoded_req;
        decoded_strb_is_external = is_external;
        external_req = is_external;
    end

    // Pass down signals to next stage
    assign decoded_addr = cpuif_addr;

    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    // bitswap for use by fields with msb0 ordering
    logic [15:0] decoded_wr_data_bswap;
    logic [15:0] decoded_wr_biten_bswap;
    assign decoded_wr_data_bswap = {<<{decoded_wr_data}};
    assign decoded_wr_biten_bswap = {<<{decoded_wr_biten}};

    //--------------------------------------------------------------------------
    // Write double-buffers
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            logic [63:0] data;
            logic [63:0] biten;
            logic pending;
            logic trigger_q;
        } reg1;
        struct {
            logic [63:0] data;
            logic [63:0] biten;
            logic pending;
            logic trigger_q;
        } reg1_msb0;
        struct {
            logic [31:0] data;
            logic [31:0] biten;
            logic pending;
            logic trigger_q;
        } reg2;
        struct {
            logic [31:0] data;
            logic [31:0] biten;
            logic pending;
            logic trigger_q;
        } reg2_msb0;
        struct {
            logic [15:0] data;
            logic [15:0] biten;
            logic pending;
        } g1_r2;
        struct {
            logic [15:0] data;
            logic [15:0] biten;
            logic pending;
        } g2_r1;
        struct {
            logic [15:0] data;
            logic [15:0] biten;
            logic pending;
        } g2_r2;
        struct {
            logic [15:0] data;
            logic [15:0] biten;
            logic pending;
        } g3_r1;
        struct {
            logic [15:0] data;
            logic [15:0] biten;
            logic pending;
        } g4_r1;
        struct {
            logic [15:0] data;
            logic [15:0] biten;
            logic pending;
        } g5_r1;
        struct {
            logic [15:0] data;
            logic [15:0] biten;
            logic pending;
        } g6_r1;
    } wbuf_storage_t;
    wbuf_storage_t wbuf_storage;

    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage.reg1.pending <= '0;
            wbuf_storage.reg1.data <= '0;
            wbuf_storage.reg1.biten <= '0;
            wbuf_storage.reg1.trigger_q <= '0;
        end else begin
            if(wbuf_storage.reg1.trigger_q) begin
                wbuf_storage.reg1.pending <= '0;
                wbuf_storage.reg1.data <= '0;
                wbuf_storage.reg1.biten <= '0;
            end
            if(decoded_reg_strb.reg1[0] && decoded_req_is_wr) begin
                wbuf_storage.reg1.pending <= '1;
                wbuf_storage.reg1.data[15:0] <= (wbuf_storage.reg1.data[15:0] & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage.reg1.biten[15:0] <= wbuf_storage.reg1.biten[15:0] | decoded_wr_biten;
            end
            if(decoded_reg_strb.reg1[1] && decoded_req_is_wr) begin
                wbuf_storage.reg1.pending <= '1;
                wbuf_storage.reg1.data[31:16] <= (wbuf_storage.reg1.data[31:16] & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage.reg1.biten[31:16] <= wbuf_storage.reg1.biten[31:16] | decoded_wr_biten;
            end
            if(decoded_reg_strb.reg1[2] && decoded_req_is_wr) begin
                wbuf_storage.reg1.pending <= '1;
                wbuf_storage.reg1.data[47:32] <= (wbuf_storage.reg1.data[47:32] & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage.reg1.biten[47:32] <= wbuf_storage.reg1.biten[47:32] | decoded_wr_biten;
            end
            if(decoded_reg_strb.reg1[3] && decoded_req_is_wr) begin
                wbuf_storage.reg1.pending <= '1;
                wbuf_storage.reg1.data[63:48] <= (wbuf_storage.reg1.data[63:48] & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage.reg1.biten[63:48] <= wbuf_storage.reg1.biten[63:48] | decoded_wr_biten;
            end
            wbuf_storage.reg1.trigger_q <= decoded_reg_strb.reg1[3] && decoded_req_is_wr;
        end
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage.reg1_msb0.pending <= '0;
            wbuf_storage.reg1_msb0.data <= '0;
            wbuf_storage.reg1_msb0.biten <= '0;
            wbuf_storage.reg1_msb0.trigger_q <= '0;
        end else begin
            if(wbuf_storage.reg1_msb0.trigger_q) begin
                wbuf_storage.reg1_msb0.pending <= '0;
                wbuf_storage.reg1_msb0.data <= '0;
                wbuf_storage.reg1_msb0.biten <= '0;
            end
            if(decoded_reg_strb.reg1_msb0[0] && decoded_req_is_wr) begin
                wbuf_storage.reg1_msb0.pending <= '1;
                wbuf_storage.reg1_msb0.data[63: 48] <= (wbuf_storage.reg1_msb0.data[63: 48] & ~decoded_wr_biten_bswap) | (decoded_wr_data_bswap & decoded_wr_biten_bswap);
                wbuf_storage.reg1_msb0.biten[63: 48] <= wbuf_storage.reg1_msb0.biten[63: 48] | decoded_wr_biten_bswap;
            end
            if(decoded_reg_strb.reg1_msb0[1] && decoded_req_is_wr) begin
                wbuf_storage.reg1_msb0.pending <= '1;
                wbuf_storage.reg1_msb0.data[47: 32] <= (wbuf_storage.reg1_msb0.data[47: 32] & ~decoded_wr_biten_bswap) | (decoded_wr_data_bswap & decoded_wr_biten_bswap);
                wbuf_storage.reg1_msb0.biten[47: 32] <= wbuf_storage.reg1_msb0.biten[47: 32] | decoded_wr_biten_bswap;
            end
            if(decoded_reg_strb.reg1_msb0[2] && decoded_req_is_wr) begin
                wbuf_storage.reg1_msb0.pending <= '1;
                wbuf_storage.reg1_msb0.data[31: 16] <= (wbuf_storage.reg1_msb0.data[31: 16] & ~decoded_wr_biten_bswap) | (decoded_wr_data_bswap & decoded_wr_biten_bswap);
                wbuf_storage.reg1_msb0.biten[31: 16] <= wbuf_storage.reg1_msb0.biten[31: 16] | decoded_wr_biten_bswap;
            end
            if(decoded_reg_strb.reg1_msb0[3] && decoded_req_is_wr) begin
                wbuf_storage.reg1_msb0.pending <= '1;
                wbuf_storage.reg1_msb0.data[15: 0] <= (wbuf_storage.reg1_msb0.data[15: 0] & ~decoded_wr_biten_bswap) | (decoded_wr_data_bswap & decoded_wr_biten_bswap);
                wbuf_storage.reg1_msb0.biten[15: 0] <= wbuf_storage.reg1_msb0.biten[15: 0] | decoded_wr_biten_bswap;
            end
            wbuf_storage.reg1_msb0.trigger_q <= decoded_reg_strb.reg1_msb0[3] && decoded_req_is_wr;
        end
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage.reg2.pending <= '0;
            wbuf_storage.reg2.data <= '0;
            wbuf_storage.reg2.biten <= '0;
            wbuf_storage.reg2.trigger_q <= '0;
        end else begin
            if(wbuf_storage.reg2.trigger_q) begin
                wbuf_storage.reg2.pending <= '0;
                wbuf_storage.reg2.data <= '0;
                wbuf_storage.reg2.biten <= '0;
            end
            if(decoded_reg_strb.reg2[0] && decoded_req_is_wr) begin
                wbuf_storage.reg2.pending <= '1;
                wbuf_storage.reg2.data[15:0] <= (wbuf_storage.reg2.data[15:0] & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage.reg2.biten[15:0] <= wbuf_storage.reg2.biten[15:0] | decoded_wr_biten;
            end
            if(decoded_reg_strb.reg2[1] && decoded_req_is_wr) begin
                wbuf_storage.reg2.pending <= '1;
                wbuf_storage.reg2.data[31:16] <= (wbuf_storage.reg2.data[31:16] & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage.reg2.biten[31:16] <= wbuf_storage.reg2.biten[31:16] | decoded_wr_biten;
            end
            wbuf_storage.reg2.trigger_q <= decoded_reg_strb.reg2[1] && decoded_req_is_wr;
        end
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage.reg2_msb0.pending <= '0;
            wbuf_storage.reg2_msb0.data <= '0;
            wbuf_storage.reg2_msb0.biten <= '0;
            wbuf_storage.reg2_msb0.trigger_q <= '0;
        end else begin
            if(wbuf_storage.reg2_msb0.trigger_q) begin
                wbuf_storage.reg2_msb0.pending <= '0;
                wbuf_storage.reg2_msb0.data <= '0;
                wbuf_storage.reg2_msb0.biten <= '0;
            end
            if(decoded_reg_strb.reg2_msb0[0] && decoded_req_is_wr) begin
                wbuf_storage.reg2_msb0.pending <= '1;
                wbuf_storage.reg2_msb0.data[31: 16] <= (wbuf_storage.reg2_msb0.data[31: 16] & ~decoded_wr_biten_bswap) | (decoded_wr_data_bswap & decoded_wr_biten_bswap);
                wbuf_storage.reg2_msb0.biten[31: 16] <= wbuf_storage.reg2_msb0.biten[31: 16] | decoded_wr_biten_bswap;
            end
            if(decoded_reg_strb.reg2_msb0[1] && decoded_req_is_wr) begin
                wbuf_storage.reg2_msb0.pending <= '1;
                wbuf_storage.reg2_msb0.data[15: 0] <= (wbuf_storage.reg2_msb0.data[15: 0] & ~decoded_wr_biten_bswap) | (decoded_wr_data_bswap & decoded_wr_biten_bswap);
                wbuf_storage.reg2_msb0.biten[15: 0] <= wbuf_storage.reg2_msb0.biten[15: 0] | decoded_wr_biten_bswap;
            end
            wbuf_storage.reg2_msb0.trigger_q <= decoded_reg_strb.reg2_msb0[1] && decoded_req_is_wr;
        end
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage.g1_r2.pending <= '0;
            wbuf_storage.g1_r2.data <= '0;
            wbuf_storage.g1_r2.biten <= '0;
        end else begin
            if(decoded_reg_strb.g1_r1 && decoded_req_is_wr) begin
                wbuf_storage.g1_r2.pending <= '0;
                wbuf_storage.g1_r2.data <= '0;
                wbuf_storage.g1_r2.biten <= '0;
            end
            if(decoded_reg_strb.g1_r2 && decoded_req_is_wr) begin
                wbuf_storage.g1_r2.pending <= '1;
                wbuf_storage.g1_r2.data <= (wbuf_storage.g1_r2.data & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage.g1_r2.biten <= wbuf_storage.g1_r2.biten | decoded_wr_biten;
            end
        end
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage.g2_r1.pending <= '0;
            wbuf_storage.g2_r1.data <= '0;
            wbuf_storage.g2_r1.biten <= '0;
        end else begin
            if(hwif_in.trigger_sig) begin
                wbuf_storage.g2_r1.pending <= '0;
                wbuf_storage.g2_r1.data <= '0;
                wbuf_storage.g2_r1.biten <= '0;
            end
            if(decoded_reg_strb.g2_r1 && decoded_req_is_wr) begin
                wbuf_storage.g2_r1.pending <= '1;
                wbuf_storage.g2_r1.data <= (wbuf_storage.g2_r1.data & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage.g2_r1.biten <= wbuf_storage.g2_r1.biten | decoded_wr_biten;
            end
        end
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage.g2_r2.pending <= '0;
            wbuf_storage.g2_r2.data <= '0;
            wbuf_storage.g2_r2.biten <= '0;
        end else begin
            if(~hwif_in.trigger_sig_n) begin
                wbuf_storage.g2_r2.pending <= '0;
                wbuf_storage.g2_r2.data <= '0;
                wbuf_storage.g2_r2.biten <= '0;
            end
            if(decoded_reg_strb.g2_r2 && decoded_req_is_wr) begin
                wbuf_storage.g2_r2.pending <= '1;
                wbuf_storage.g2_r2.data <= (wbuf_storage.g2_r2.data & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage.g2_r2.biten <= wbuf_storage.g2_r2.biten | decoded_wr_biten;
            end
        end
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage.g3_r1.pending <= '0;
            wbuf_storage.g3_r1.data <= '0;
            wbuf_storage.g3_r1.biten <= '0;
        end else begin
            if(field_storage.g3_trig.trig.value) begin
                wbuf_storage.g3_r1.pending <= '0;
                wbuf_storage.g3_r1.data <= '0;
                wbuf_storage.g3_r1.biten <= '0;
            end
            if(decoded_reg_strb.g3_r1 && decoded_req_is_wr) begin
                wbuf_storage.g3_r1.pending <= '1;
                wbuf_storage.g3_r1.data <= (wbuf_storage.g3_r1.data & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage.g3_r1.biten <= wbuf_storage.g3_r1.biten | decoded_wr_biten;
            end
        end
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage.g4_r1.pending <= '0;
            wbuf_storage.g4_r1.data <= '0;
            wbuf_storage.g4_r1.biten <= '0;
        end else begin
            if(&(field_storage.g4_trig.trig_vec.value)) begin
                wbuf_storage.g4_r1.pending <= '0;
                wbuf_storage.g4_r1.data <= '0;
                wbuf_storage.g4_r1.biten <= '0;
            end
            if(decoded_reg_strb.g4_r1 && decoded_req_is_wr) begin
                wbuf_storage.g4_r1.pending <= '1;
                wbuf_storage.g4_r1.data <= (wbuf_storage.g4_r1.data & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage.g4_r1.biten <= wbuf_storage.g4_r1.biten | decoded_wr_biten;
            end
        end
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage.g5_r1.pending <= '0;
            wbuf_storage.g5_r1.data <= '0;
            wbuf_storage.g5_r1.biten <= '0;
        end else begin
            if(hwif_in.trigger_sig) begin
                wbuf_storage.g5_r1.pending <= '0;
                wbuf_storage.g5_r1.data <= '0;
                wbuf_storage.g5_r1.biten <= '0;
            end
            if(decoded_reg_strb.g5_r1 && decoded_req_is_wr) begin
                wbuf_storage.g5_r1.pending <= '1;
                wbuf_storage.g5_r1.data <= (wbuf_storage.g5_r1.data & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage.g5_r1.biten <= wbuf_storage.g5_r1.biten | decoded_wr_biten;
            end
        end
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage.g6_r1.pending <= '0;
            wbuf_storage.g6_r1.data <= '0;
            wbuf_storage.g6_r1.biten <= '0;
        end else begin
            if(hwif_in.trigger_sig) begin
                wbuf_storage.g6_r1.pending <= '0;
                wbuf_storage.g6_r1.data <= '0;
                wbuf_storage.g6_r1.biten <= '0;
            end
            if(decoded_reg_strb.g6_r1 && decoded_req_is_wr) begin
                wbuf_storage.g6_r1.pending <= '1;
                wbuf_storage.g6_r1.data <= (wbuf_storage.g6_r1.data & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage.g6_r1.biten <= wbuf_storage.g6_r1.biten | decoded_wr_biten;
            end
        end
    end
    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic [63:0] next;
                logic load_next;
            } f1;
        } reg1;
        struct {
            struct {
                logic [63:0] next;
                logic load_next;
            } f1;
        } reg1_msb0;
        struct {
            struct {
                logic [11:0] next;
                logic load_next;
            } f1;
            struct {
                logic [3:0] next;
                logic load_next;
            } f2;
        } reg2;
        struct {
            struct {
                logic [11:0] next;
                logic load_next;
            } f1;
            struct {
                logic [3:0] next;
                logic load_next;
            } f2;
        } reg2_msb0;
        struct {
            struct {
                logic [15:0] next;
                logic load_next;
            } f1;
        } g1_r1;
        struct {
            struct {
                logic [15:0] next;
                logic load_next;
            } f1;
        } g1_r2;
        struct {
            struct {
                logic [15:0] next;
                logic load_next;
            } f1;
        } g2_r1;
        struct {
            struct {
                logic [15:0] next;
                logic load_next;
            } f1;
        } g2_r2;
        struct {
            struct {
                logic [15:0] next;
                logic load_next;
            } f1;
        } g3_r1;
        struct {
            struct {
                logic next;
                logic load_next;
            } trig;
        } g3_trig;
        struct {
            struct {
                logic [15:0] next;
                logic load_next;
            } f1;
        } g4_r1;
        struct {
            struct {
                logic [3:0] next;
                logic load_next;
            } trig_vec;
        } g4_trig;
        struct {
            struct {
                logic [15:0] next;
                logic load_next;
            } f1;
        } g5_r1;
        struct {
            struct {
                logic [3:0] next;
                logic load_next;
                logic incrthreshold;
                logic overflow;
            } c;
        } g5_modcount;
        struct {
            struct {
                logic [15:0] next;
                logic load_next;
            } f1;
        } g6_r1;
        struct {
            struct {
                logic [3:0] next;
                logic load_next;
                logic incrthreshold;
                logic overflow;
            } c;
        } g6_modcount;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic [63:0] value;
            } f1;
        } reg1;
        struct {
            struct {
                logic [63:0] value;
            } f1;
        } reg1_msb0;
        struct {
            struct {
                logic [11:0] value;
            } f1;
            struct {
                logic [3:0] value;
            } f2;
        } reg2;
        struct {
            struct {
                logic [11:0] value;
            } f1;
            struct {
                logic [3:0] value;
            } f2;
        } reg2_msb0;
        struct {
            struct {
                logic [15:0] value;
            } f1;
        } g1_r1;
        struct {
            struct {
                logic [15:0] value;
            } f1;
        } g1_r2;
        struct {
            struct {
                logic [15:0] value;
            } f1;
        } g2_r1;
        struct {
            struct {
                logic [15:0] value;
            } f1;
        } g2_r2;
        struct {
            struct {
                logic [15:0] value;
            } f1;
        } g3_r1;
        struct {
            struct {
                logic value;
            } trig;
        } g3_trig;
        struct {
            struct {
                logic [15:0] value;
            } f1;
        } g4_r1;
        struct {
            struct {
                logic [3:0] value;
            } trig_vec;
        } g4_trig;
        struct {
            struct {
                logic [15:0] value;
            } f1;
        } g5_r1;
        struct {
            struct {
                logic [3:0] value;
            } c;
        } g5_modcount;
        struct {
            struct {
                logic [15:0] value;
            } f1;
        } g6_r1;
        struct {
            struct {
                logic [3:0] value;
            } c;
        } g6_modcount;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: regblock.reg1.f1
    always_comb begin
        automatic logic [63:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.reg1.f1.value;
        load_next_c = '0;
        if(wbuf_storage.reg1.pending && wbuf_storage.reg1.trigger_q) begin // SW write
            next_c = (field_storage.reg1.f1.value & ~wbuf_storage.reg1.biten[63:0]) | (wbuf_storage.reg1.data[63:0] & wbuf_storage.reg1.biten[63:0]);
            load_next_c = '1;
        end
        field_combo.reg1.f1.next = next_c;
        field_combo.reg1.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.reg1.f1.value <= 64'h0;
        end else begin
            if(field_combo.reg1.f1.load_next) begin
                field_storage.reg1.f1.value <= field_combo.reg1.f1.next;
            end
        end
    end
    assign hwif_out.reg1.f1.value = field_storage.reg1.f1.value;
    // Field: regblock.reg1_msb0.f1
    always_comb begin
        automatic logic [63:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.reg1_msb0.f1.value;
        load_next_c = '0;
        if(wbuf_storage.reg1_msb0.pending && wbuf_storage.reg1_msb0.trigger_q) begin // SW write
            next_c = (field_storage.reg1_msb0.f1.value & ~wbuf_storage.reg1_msb0.biten[63:0]) | (wbuf_storage.reg1_msb0.data[63:0] & wbuf_storage.reg1_msb0.biten[63:0]);
            load_next_c = '1;
        end
        field_combo.reg1_msb0.f1.next = next_c;
        field_combo.reg1_msb0.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.reg1_msb0.f1.value <= 64'h0;
        end else begin
            if(field_combo.reg1_msb0.f1.load_next) begin
                field_storage.reg1_msb0.f1.value <= field_combo.reg1_msb0.f1.next;
            end
        end
    end
    assign hwif_out.reg1_msb0.f1.value = field_storage.reg1_msb0.f1.value;
    // Field: regblock.reg2.f1
    always_comb begin
        automatic logic [11:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.reg2.f1.value;
        load_next_c = '0;
        if(wbuf_storage.reg2.pending && wbuf_storage.reg2.trigger_q) begin // SW write
            next_c = (field_storage.reg2.f1.value & ~wbuf_storage.reg2.biten[19:8]) | (wbuf_storage.reg2.data[19:8] & wbuf_storage.reg2.biten[19:8]);
            load_next_c = '1;
        end
        field_combo.reg2.f1.next = next_c;
        field_combo.reg2.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.reg2.f1.value <= 12'h0;
        end else begin
            if(field_combo.reg2.f1.load_next) begin
                field_storage.reg2.f1.value <= field_combo.reg2.f1.next;
            end
        end
    end
    assign hwif_out.reg2.f1.value = field_storage.reg2.f1.value;
    // Field: regblock.reg2.f2
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.reg2.f2.value;
        load_next_c = '0;
        if(wbuf_storage.reg2.pending && wbuf_storage.reg2.trigger_q) begin // SW write
            next_c = (field_storage.reg2.f2.value & ~wbuf_storage.reg2.biten[23:20]) | (wbuf_storage.reg2.data[23:20] & wbuf_storage.reg2.biten[23:20]);
            load_next_c = '1;
        end
        field_combo.reg2.f2.next = next_c;
        field_combo.reg2.f2.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.reg2.f2.value <= 4'h0;
        end else begin
            if(field_combo.reg2.f2.load_next) begin
                field_storage.reg2.f2.value <= field_combo.reg2.f2.next;
            end
        end
    end
    assign hwif_out.reg2.f2.value = field_storage.reg2.f2.value;
    // Field: regblock.reg2_msb0.f1
    always_comb begin
        automatic logic [11:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.reg2_msb0.f1.value;
        load_next_c = '0;
        if(wbuf_storage.reg2_msb0.pending && wbuf_storage.reg2_msb0.trigger_q) begin // SW write
            next_c = (field_storage.reg2_msb0.f1.value & ~wbuf_storage.reg2_msb0.biten[23:12]) | (wbuf_storage.reg2_msb0.data[23:12] & wbuf_storage.reg2_msb0.biten[23:12]);
            load_next_c = '1;
        end
        field_combo.reg2_msb0.f1.next = next_c;
        field_combo.reg2_msb0.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.reg2_msb0.f1.value <= 12'h0;
        end else begin
            if(field_combo.reg2_msb0.f1.load_next) begin
                field_storage.reg2_msb0.f1.value <= field_combo.reg2_msb0.f1.next;
            end
        end
    end
    assign hwif_out.reg2_msb0.f1.value = field_storage.reg2_msb0.f1.value;
    // Field: regblock.reg2_msb0.f2
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.reg2_msb0.f2.value;
        load_next_c = '0;
        if(wbuf_storage.reg2_msb0.pending && wbuf_storage.reg2_msb0.trigger_q) begin // SW write
            next_c = (field_storage.reg2_msb0.f2.value & ~wbuf_storage.reg2_msb0.biten[11:8]) | (wbuf_storage.reg2_msb0.data[11:8] & wbuf_storage.reg2_msb0.biten[11:8]);
            load_next_c = '1;
        end
        field_combo.reg2_msb0.f2.next = next_c;
        field_combo.reg2_msb0.f2.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.reg2_msb0.f2.value <= 4'h0;
        end else begin
            if(field_combo.reg2_msb0.f2.load_next) begin
                field_storage.reg2_msb0.f2.value <= field_combo.reg2_msb0.f2.next;
            end
        end
    end
    assign hwif_out.reg2_msb0.f2.value = field_storage.reg2_msb0.f2.value;
    // Field: regblock.g1_r1.f1
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.g1_r1.f1.value;
        load_next_c = '0;
        if(decoded_reg_strb.g1_r1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.g1_r1.f1.value & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
            load_next_c = '1;
        end
        field_combo.g1_r1.f1.next = next_c;
        field_combo.g1_r1.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.g1_r1.f1.value <= 16'h0;
        end else begin
            if(field_combo.g1_r1.f1.load_next) begin
                field_storage.g1_r1.f1.value <= field_combo.g1_r1.f1.next;
            end
        end
    end
    assign hwif_out.g1_r1.f1.value = field_storage.g1_r1.f1.value;
    // Field: regblock.g1_r2.f1
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.g1_r2.f1.value;
        load_next_c = '0;
        if(wbuf_storage.g1_r2.pending && decoded_reg_strb.g1_r1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.g1_r2.f1.value & ~wbuf_storage.g1_r2.biten[15:0]) | (wbuf_storage.g1_r2.data[15:0] & wbuf_storage.g1_r2.biten[15:0]);
            load_next_c = '1;
        end
        field_combo.g1_r2.f1.next = next_c;
        field_combo.g1_r2.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.g1_r2.f1.value <= 16'h0;
        end else begin
            if(field_combo.g1_r2.f1.load_next) begin
                field_storage.g1_r2.f1.value <= field_combo.g1_r2.f1.next;
            end
        end
    end
    assign hwif_out.g1_r2.f1.value = field_storage.g1_r2.f1.value;
    // Field: regblock.g2_r1.f1
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.g2_r1.f1.value;
        load_next_c = '0;
        if(wbuf_storage.g2_r1.pending && hwif_in.trigger_sig) begin // SW write
            next_c = (field_storage.g2_r1.f1.value & ~wbuf_storage.g2_r1.biten[15:0]) | (wbuf_storage.g2_r1.data[15:0] & wbuf_storage.g2_r1.biten[15:0]);
            load_next_c = '1;
        end
        field_combo.g2_r1.f1.next = next_c;
        field_combo.g2_r1.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.g2_r1.f1.value <= 16'h0;
        end else begin
            if(field_combo.g2_r1.f1.load_next) begin
                field_storage.g2_r1.f1.value <= field_combo.g2_r1.f1.next;
            end
        end
    end
    assign hwif_out.g2_r1.f1.value = field_storage.g2_r1.f1.value;
    // Field: regblock.g2_r2.f1
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.g2_r2.f1.value;
        load_next_c = '0;
        if(wbuf_storage.g2_r2.pending && ~hwif_in.trigger_sig_n) begin // SW write
            next_c = (field_storage.g2_r2.f1.value & ~wbuf_storage.g2_r2.biten[15:0]) | (wbuf_storage.g2_r2.data[15:0] & wbuf_storage.g2_r2.biten[15:0]);
            load_next_c = '1;
        end
        field_combo.g2_r2.f1.next = next_c;
        field_combo.g2_r2.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.g2_r2.f1.value <= 16'h0;
        end else begin
            if(field_combo.g2_r2.f1.load_next) begin
                field_storage.g2_r2.f1.value <= field_combo.g2_r2.f1.next;
            end
        end
    end
    assign hwif_out.g2_r2.f1.value = field_storage.g2_r2.f1.value;
    // Field: regblock.g3_r1.f1
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.g3_r1.f1.value;
        load_next_c = '0;
        if(wbuf_storage.g3_r1.pending && field_storage.g3_trig.trig.value) begin // SW write
            next_c = (field_storage.g3_r1.f1.value & ~wbuf_storage.g3_r1.biten[15:0]) | (wbuf_storage.g3_r1.data[15:0] & wbuf_storage.g3_r1.biten[15:0]);
            load_next_c = '1;
        end
        field_combo.g3_r1.f1.next = next_c;
        field_combo.g3_r1.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.g3_r1.f1.value <= 16'h0;
        end else begin
            if(field_combo.g3_r1.f1.load_next) begin
                field_storage.g3_r1.f1.value <= field_combo.g3_r1.f1.next;
            end
        end
    end
    assign hwif_out.g3_r1.f1.value = field_storage.g3_r1.f1.value;
    // Field: regblock.g3_trig.trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.g3_trig.trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.g3_trig && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.g3_trig.trig.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.g3_trig.trig.next = next_c;
        field_combo.g3_trig.trig.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.g3_trig.trig.value <= 1'h0;
        end else begin
            if(field_combo.g3_trig.trig.load_next) begin
                field_storage.g3_trig.trig.value <= field_combo.g3_trig.trig.next;
            end
        end
    end
    assign hwif_out.g3_trig.trig.value = field_storage.g3_trig.trig.value;
    // Field: regblock.g4_r1.f1
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.g4_r1.f1.value;
        load_next_c = '0;
        if(wbuf_storage.g4_r1.pending && &(field_storage.g4_trig.trig_vec.value)) begin // SW write
            next_c = (field_storage.g4_r1.f1.value & ~wbuf_storage.g4_r1.biten[15:0]) | (wbuf_storage.g4_r1.data[15:0] & wbuf_storage.g4_r1.biten[15:0]);
            load_next_c = '1;
        end
        field_combo.g4_r1.f1.next = next_c;
        field_combo.g4_r1.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.g4_r1.f1.value <= 16'h0;
        end else begin
            if(field_combo.g4_r1.f1.load_next) begin
                field_storage.g4_r1.f1.value <= field_combo.g4_r1.f1.next;
            end
        end
    end
    assign hwif_out.g4_r1.f1.value = field_storage.g4_r1.f1.value;
    // Field: regblock.g4_trig.trig_vec
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.g4_trig.trig_vec.value;
        load_next_c = '0;
        if(decoded_reg_strb.g4_trig && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.g4_trig.trig_vec.value & ~decoded_wr_biten[3:0]) | (decoded_wr_data[3:0] & decoded_wr_biten[3:0]);
            load_next_c = '1;
        end
        field_combo.g4_trig.trig_vec.next = next_c;
        field_combo.g4_trig.trig_vec.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.g4_trig.trig_vec.value <= 4'h0;
        end else begin
            if(field_combo.g4_trig.trig_vec.load_next) begin
                field_storage.g4_trig.trig_vec.value <= field_combo.g4_trig.trig_vec.next;
            end
        end
    end
    // Field: regblock.g5_r1.f1
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.g5_r1.f1.value;
        load_next_c = '0;
        if(wbuf_storage.g5_r1.pending && hwif_in.trigger_sig) begin // SW write
            next_c = (field_storage.g5_r1.f1.value & ~wbuf_storage.g5_r1.biten[15:0]) | (wbuf_storage.g5_r1.data[15:0] & wbuf_storage.g5_r1.biten[15:0]);
            load_next_c = '1;
        end
        field_combo.g5_r1.f1.next = next_c;
        field_combo.g5_r1.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.g5_r1.f1.value <= 16'h0;
        end else begin
            if(field_combo.g5_r1.f1.load_next) begin
                field_storage.g5_r1.f1.value <= field_combo.g5_r1.f1.next;
            end
        end
    end
    assign hwif_out.g5_r1.f1.value = field_storage.g5_r1.f1.value;
    // Field: regblock.g5_modcount.c
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.g5_modcount.c.value;
        load_next_c = '0;
        if(decoded_reg_strb.g5_modcount && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.g5_modcount.c.value & ~decoded_wr_biten[3:0]) | (decoded_wr_data[3:0] & decoded_wr_biten[3:0]);
            load_next_c = '1;
        end
        if(wbuf_storage.g5_r1.pending && hwif_in.trigger_sig && |(wbuf_storage.g5_r1.biten[15:0])) begin // increment
            field_combo.g5_modcount.c.overflow = (((5)'(next_c) + 4'h1) > 4'hf);
            next_c = next_c + 4'h1;
            load_next_c = '1;
        end else begin
            field_combo.g5_modcount.c.overflow = '0;
        end
        field_combo.g5_modcount.c.incrthreshold = (field_storage.g5_modcount.c.value >= 4'hf);
        field_combo.g5_modcount.c.next = next_c;
        field_combo.g5_modcount.c.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.g5_modcount.c.value <= 4'h0;
        end else begin
            if(field_combo.g5_modcount.c.load_next) begin
                field_storage.g5_modcount.c.value <= field_combo.g5_modcount.c.next;
            end
        end
    end
    // Field: regblock.g6_r1.f1
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.g6_r1.f1.value;
        load_next_c = '0;
        if(decoded_reg_strb.g6_r1 && !decoded_req_is_wr) begin // SW clear on read
            next_c = '0;
            load_next_c = '1;
        end else if(wbuf_storage.g6_r1.pending && hwif_in.trigger_sig) begin // SW write
            next_c = (field_storage.g6_r1.f1.value & ~wbuf_storage.g6_r1.biten[15:0]) | (wbuf_storage.g6_r1.data[15:0] & wbuf_storage.g6_r1.biten[15:0]);
            load_next_c = '1;
        end
        field_combo.g6_r1.f1.next = next_c;
        field_combo.g6_r1.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.g6_r1.f1.value <= 16'h0;
        end else begin
            if(field_combo.g6_r1.f1.load_next) begin
                field_storage.g6_r1.f1.value <= field_combo.g6_r1.f1.next;
            end
        end
    end
    assign hwif_out.g6_r1.f1.value = field_storage.g6_r1.f1.value;
    // Field: regblock.g6_modcount.c
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.g6_modcount.c.value;
        load_next_c = '0;
        if(decoded_reg_strb.g6_modcount && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.g6_modcount.c.value & ~decoded_wr_biten[3:0]) | (decoded_wr_data[3:0] & decoded_wr_biten[3:0]);
            load_next_c = '1;
        end
        if(decoded_reg_strb.g6_r1 && !decoded_req_is_wr || wbuf_storage.g6_r1.pending && hwif_in.trigger_sig && |(wbuf_storage.g6_r1.biten[15:0])) begin // increment
            field_combo.g6_modcount.c.overflow = (((5)'(next_c) + 4'h1) > 4'hf);
            next_c = next_c + 4'h1;
            load_next_c = '1;
        end else begin
            field_combo.g6_modcount.c.overflow = '0;
        end
        field_combo.g6_modcount.c.incrthreshold = (field_storage.g6_modcount.c.value >= 4'hf);
        field_combo.g6_modcount.c.next = next_c;
        field_combo.g6_modcount.c.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.g6_modcount.c.value <= 4'h0;
        end else begin
            if(field_combo.g6_modcount.c.load_next) begin
                field_storage.g6_modcount.c.value <= field_combo.g6_modcount.c.next;
            end
        end
    end
    // External register: regblock.ext_reg1
    assign hwif_out.ext_reg1.req = decoded_reg_strb.ext_reg1;
    assign hwif_out.ext_reg1.req_is_wr = decoded_req_is_wr;
    assign hwif_out.ext_reg1.wr_data = decoded_wr_data;
    assign hwif_out.ext_reg1.wr_biten = decoded_wr_biten;
    // External region: regblock.ext_block
    assign hwif_out.ext_block.req = decoded_reg_strb.ext_block;
    assign hwif_out.ext_block.addr = decoded_addr[0:0];
    assign hwif_out.ext_block.req_is_wr = decoded_req_is_wr;
    assign hwif_out.ext_block.wr_data = decoded_wr_data;
    assign hwif_out.ext_block.wr_biten = decoded_wr_biten;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    always_comb begin
        automatic logic wr_ack;
        wr_ack = '0;
        wr_ack |= hwif_in.ext_reg1.wr_ack;
        wr_ack |= hwif_in.ext_block.wr_ack;
        external_wr_ack = wr_ack;
    end
    assign cpuif_wr_ack = external_wr_ack | (decoded_req & decoded_req_is_wr & ~decoded_strb_is_external);
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_external_rd_ack_c;
    always_comb begin
        automatic logic rd_ack;
        rd_ack = '0;
        rd_ack |= hwif_in.ext_reg1.rd_ack;
        rd_ack |= hwif_in.ext_block.rd_ack;
        readback_external_rd_ack_c = rd_ack;
    end

    logic readback_external_rd_ack;

    assign readback_external_rd_ack = readback_external_rd_ack_c;

    logic readback_err;
    logic readback_done;
    logic [15:0] readback_data;

    // Assign readback values to a flattened array
    logic [15:0] readback_array[25];
    assign readback_array[0][15:0] = (decoded_reg_strb.reg1[0] && !decoded_req_is_wr) ? field_storage.reg1.f1.value[15:0] : '0;
    assign readback_array[1][15:0] = (decoded_reg_strb.reg1[1] && !decoded_req_is_wr) ? field_storage.reg1.f1.value[31:16] : '0;
    assign readback_array[2][15:0] = (decoded_reg_strb.reg1[2] && !decoded_req_is_wr) ? field_storage.reg1.f1.value[47:32] : '0;
    assign readback_array[3][15:0] = (decoded_reg_strb.reg1[3] && !decoded_req_is_wr) ? field_storage.reg1.f1.value[63:48] : '0;
    assign readback_array[4][15:0] = (decoded_reg_strb.reg1_msb0[0] && !decoded_req_is_wr) ? {<<{field_storage.reg1_msb0.f1.value[63:48]}} : '0;
    assign readback_array[5][15:0] = (decoded_reg_strb.reg1_msb0[1] && !decoded_req_is_wr) ? {<<{field_storage.reg1_msb0.f1.value[47:32]}} : '0;
    assign readback_array[6][15:0] = (decoded_reg_strb.reg1_msb0[2] && !decoded_req_is_wr) ? {<<{field_storage.reg1_msb0.f1.value[31:16]}} : '0;
    assign readback_array[7][15:0] = (decoded_reg_strb.reg1_msb0[3] && !decoded_req_is_wr) ? {<<{field_storage.reg1_msb0.f1.value[15:0]}} : '0;
    assign readback_array[8][7:0] = '0;
    assign readback_array[8][15:8] = (decoded_reg_strb.reg2[0] && !decoded_req_is_wr) ? field_storage.reg2.f1.value[7:0] : '0;
    assign readback_array[9][3:0] = (decoded_reg_strb.reg2[1] && !decoded_req_is_wr) ? field_storage.reg2.f1.value[11:8] : '0;
    assign readback_array[9][7:4] = (decoded_reg_strb.reg2[1] && !decoded_req_is_wr) ? field_storage.reg2.f2.value : '0;
    assign readback_array[9][15:8] = '0;
    assign readback_array[10][7:0] = '0;
    assign readback_array[10][15:8] = (decoded_reg_strb.reg2_msb0[0] && !decoded_req_is_wr) ? {<<{field_storage.reg2_msb0.f1.value[11:4]}} : '0;
    assign readback_array[11][3:0] = (decoded_reg_strb.reg2_msb0[1] && !decoded_req_is_wr) ? {<<{field_storage.reg2_msb0.f1.value[3:0]}} : '0;
    assign readback_array[11][7:4] = (decoded_reg_strb.reg2_msb0[1] && !decoded_req_is_wr) ? {<<{field_storage.reg2_msb0.f2.value}} : '0;
    assign readback_array[11][15:8] = '0;
    assign readback_array[12][15:0] = (decoded_reg_strb.g1_r1 && !decoded_req_is_wr) ? field_storage.g1_r1.f1.value : '0;
    assign readback_array[13][15:0] = (decoded_reg_strb.g1_r2 && !decoded_req_is_wr) ? field_storage.g1_r2.f1.value : '0;
    assign readback_array[14][15:0] = (decoded_reg_strb.g2_r1 && !decoded_req_is_wr) ? field_storage.g2_r1.f1.value : '0;
    assign readback_array[15][15:0] = (decoded_reg_strb.g2_r2 && !decoded_req_is_wr) ? field_storage.g2_r2.f1.value : '0;
    assign readback_array[16][15:0] = (decoded_reg_strb.g3_r1 && !decoded_req_is_wr) ? field_storage.g3_r1.f1.value : '0;
    assign readback_array[17][15:0] = (decoded_reg_strb.g4_r1 && !decoded_req_is_wr) ? field_storage.g4_r1.f1.value : '0;
    assign readback_array[18][3:0] = (decoded_reg_strb.g4_trig && !decoded_req_is_wr) ? field_storage.g4_trig.trig_vec.value : '0;
    assign readback_array[18][15:4] = '0;
    assign readback_array[19][15:0] = (decoded_reg_strb.g5_r1 && !decoded_req_is_wr) ? field_storage.g5_r1.f1.value : '0;
    assign readback_array[20][3:0] = (decoded_reg_strb.g5_modcount && !decoded_req_is_wr) ? field_storage.g5_modcount.c.value : '0;
    assign readback_array[20][15:4] = '0;
    assign readback_array[21][15:0] = (decoded_reg_strb.g6_r1 && !decoded_req_is_wr) ? field_storage.g6_r1.f1.value : '0;
    assign readback_array[22][3:0] = (decoded_reg_strb.g6_modcount && !decoded_req_is_wr) ? field_storage.g6_modcount.c.value : '0;
    assign readback_array[22][15:4] = '0;
    assign readback_array[23] = hwif_in.ext_reg1.rd_ack ? hwif_in.ext_reg1.rd_data : '0;
    assign readback_array[24] = hwif_in.ext_block.rd_ack ? hwif_in.ext_block.rd_data : '0;

    // Reduce the array
    always_comb begin
        automatic logic [15:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr & ~decoded_strb_is_external;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<25; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign external_rd_ack = readback_external_rd_ack;
    assign cpuif_rd_ack = readback_done | readback_external_rd_ack;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
