// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock
//
// This is a wrapper module that flattens the hwif structs into individual signals

module regblock_wrapper (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [5:0] s_cpuif_addr,
        input wire [15:0] s_cpuif_wr_data,
        input wire [15:0] s_cpuif_wr_biten,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [15:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input logic hwif_in_trigger_sig,
        input logic hwif_in_trigger_sig_n,
        output logic [63:0] hwif_out_reg1_f1,
        output logic [63:0] hwif_out_reg1_msb0_f1,
        output logic [11:0] hwif_out_reg2_f1,
        output logic [3:0] hwif_out_reg2_f2,
        output logic [11:0] hwif_out_reg2_msb0_f1,
        output logic [3:0] hwif_out_reg2_msb0_f2,
        output logic [15:0] hwif_out_g1_r1_f1,
        output logic [15:0] hwif_out_g1_r2_f1,
        output logic [15:0] hwif_out_g2_r1_f1,
        output logic [15:0] hwif_out_g2_r2_f1,
        output logic [15:0] hwif_out_g3_r1_f1,
        output logic hwif_out_g3_trig,
        output logic [15:0] hwif_out_g4_r1_f1,
        output logic [15:0] hwif_out_g5_r1_f1,
        output logic [15:0] hwif_out_g6_r1_f1
    );

    //--------------------------------------------------------------------------
    // Internal hwif struct signals
    //--------------------------------------------------------------------------
    regblock_pkg::regblock__in_t hwif_in;
    regblock_pkg::regblock__out_t hwif_out;

    //--------------------------------------------------------------------------
    // Flatten struct to individual signals
    //--------------------------------------------------------------------------
    assign hwif_in.trigger_sig = hwif_in_trigger_sig;
    assign hwif_in.trigger_sig_n = hwif_in_trigger_sig_n;
    assign hwif_out_reg1_f1 = hwif_out.reg1.f1.value;
    assign hwif_out_reg1_msb0_f1 = hwif_out.reg1_msb0.f1.value;
    assign hwif_out_reg2_f1 = hwif_out.reg2.f1.value;
    assign hwif_out_reg2_f2 = hwif_out.reg2.f2.value;
    assign hwif_out_reg2_msb0_f1 = hwif_out.reg2_msb0.f1.value;
    assign hwif_out_reg2_msb0_f2 = hwif_out.reg2_msb0.f2.value;
    assign hwif_out_g1_r1_f1 = hwif_out.g1_r1.f1.value;
    assign hwif_out_g1_r2_f1 = hwif_out.g1_r2.f1.value;
    assign hwif_out_g2_r1_f1 = hwif_out.g2_r1.f1.value;
    assign hwif_out_g2_r2_f1 = hwif_out.g2_r2.f1.value;
    assign hwif_out_g3_r1_f1 = hwif_out.g3_r1.f1.value;
    assign hwif_out_g3_trig = hwif_out.g3_trig.trig.value;
    assign hwif_out_g4_r1_f1 = hwif_out.g4_r1.f1.value;
    assign hwif_out_g5_r1_f1 = hwif_out.g5_r1.f1.value;
    assign hwif_out_g6_r1_f1 = hwif_out.g6_r1.f1.value;

    //--------------------------------------------------------------------------
    // Instantiate the main regblock module
    //--------------------------------------------------------------------------
    regblock i_regblock (
        .clk(clk),
        .rst(rst),

        .s_cpuif_req(s_cpuif_req),
        .s_cpuif_req_is_wr(s_cpuif_req_is_wr),
        .s_cpuif_addr(s_cpuif_addr),
        .s_cpuif_wr_data(s_cpuif_wr_data),
        .s_cpuif_wr_biten(s_cpuif_wr_biten),
        .s_cpuif_req_stall_wr(s_cpuif_req_stall_wr),
        .s_cpuif_req_stall_rd(s_cpuif_req_stall_rd),
        .s_cpuif_rd_ack(s_cpuif_rd_ack),
        .s_cpuif_rd_err(s_cpuif_rd_err),
        .s_cpuif_rd_data(s_cpuif_rd_data),
        .s_cpuif_wr_ack(s_cpuif_wr_ack),
        .s_cpuif_wr_err(s_cpuif_wr_err),
        .hwif_in(hwif_in),
        .hwif_out(hwif_out)
    );

endmodule
