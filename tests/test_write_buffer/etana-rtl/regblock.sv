// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module regblock (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [5:0] s_cpuif_addr,
        input wire [15:0] s_cpuif_wr_data,
        input wire [15:0] s_cpuif_wr_biten,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [15:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input wire [0:0] hwif_in_trigger_sig,
        input wire [0:0] hwif_in_trigger_sig_n,
        output logic [63:0] hwif_out_reg1_f1,
        output logic [63:0] hwif_out_reg1_msb0_f1,
        output logic [11:0] hwif_out_reg2_f1,
        output logic [3:0] hwif_out_reg2_f2,
        output logic [11:0] hwif_out_reg2_msb0_f1,
        output logic [3:0] hwif_out_reg2_msb0_f2,
        output logic [15:0] hwif_out_g1_r1_f1,
        output logic [15:0] hwif_out_g1_r2_f1,
        output logic [15:0] hwif_out_g2_r1_f1,
        output logic [15:0] hwif_out_g2_r2_f1,
        output logic [15:0] hwif_out_g3_r1_f1,
        output logic [0:0] hwif_out_g3_trig_trig,
        output logic [15:0] hwif_out_g4_r1_f1,
        output logic [15:0] hwif_out_g5_r1_f1,
        output logic [15:0] hwif_out_g6_r1_f1,
        output logic hwif_out_ext_reg1_req,
        output logic hwif_out_ext_reg1_req_is_wr,
        input wire hwif_in_ext_reg1_rd_ack,
        input wire hwif_in_ext_reg1_wr_ack,
        input wire [15:0] hwif_in_ext_reg1_rd_data,
        output logic [15:0] hwif_out_ext_reg1_wr_data,
        output logic [15:0] hwif_out_ext_reg1_wr_biten,
        output logic hwif_out_ext_block_req,
        output logic [0:0] hwif_out_ext_block_addr,
        output logic hwif_out_ext_block_req_is_wr,
        output logic [15:0] hwif_out_ext_block_wr_data,
        output logic [15:0] hwif_out_ext_block_wr_biten,
        input wire hwif_in_ext_block_wr_ack,
        input wire [15:0] hwif_in_ext_block_rd_data,
        input wire hwif_in_ext_block_rd_ack
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [5:0] cpuif_addr;
    logic [15:0] cpuif_wr_data;
    logic [15:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [15:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign cpuif_wr_biten = s_cpuif_wr_biten;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;
    logic external_req;
    logic external_pending;
    logic external_wr_ack;
    logic external_rd_ack;
//     always_ff @(posedge clk) begin
    always @(posedge clk) begin
        if(rst) begin
            external_pending <= '0;
        end else begin
            if(external_req & ~external_wr_ack & ~external_rd_ack) external_pending <= '1;
            else if(external_wr_ack | external_rd_ack) external_pending <= '0;
            `ifndef SYNTHESIS
                assert_bad_ext_wr_ack: assert(!external_wr_ack || (external_pending | external_req))
                    else $error("An external wr_ack strobe was asserted when no external request was active");
                assert_bad_ext_rd_ack: assert(!external_rd_ack || (external_pending | external_req))
                    else $error("An external rd_ack strobe was asserted when no external request was active");
            `endif
        end
    end

    // Read & write latencies are balanced. Stalls not required
    // except if external
    assign cpuif_req_stall_rd = external_pending;
    assign cpuif_req_stall_wr = external_pending;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    logic [3:0] decoded_reg_strb_reg1;
    logic [3:0] decoded_reg_strb_reg1_msb0;
    logic [1:0] decoded_reg_strb_reg2;
    logic [1:0] decoded_reg_strb_reg2_msb0;
    logic [0:0] decoded_reg_strb_g1_r1;
    logic [0:0] decoded_reg_strb_g1_r2;
    logic [0:0] decoded_reg_strb_g2_r1;
    logic [0:0] decoded_reg_strb_g2_r2;
    logic [0:0] decoded_reg_strb_g3_r1;
    logic [0:0] decoded_reg_strb_g3_trig;
    logic [0:0] decoded_reg_strb_g4_r1;
    logic [0:0] decoded_reg_strb_g4_trig;
    logic [0:0] decoded_reg_strb_g5_r1;
    logic [0:0] decoded_reg_strb_g5_modcount;
    logic [0:0] decoded_reg_strb_g6_r1;
    logic [0:0] decoded_reg_strb_g6_modcount;
    logic [0:0] decoded_reg_strb_ext_reg1;
    logic decoded_reg_strb_ext_block;
    logic decoded_strb_is_external;

    logic [5:0] decoded_addr;

    logic decoded_req;
    logic decoded_req_is_wr;
    /* verilator lint_off UNUSEDSIGNAL */
    logic [15:0] decoded_wr_data;
    logic [15:0] decoded_wr_biten;
    /* verilator lint_on UNUSEDSIGNAL */

    always @(*) begin
        /* verilator lint_off UNUSEDSIGNAL */
        integer next_cpuif_addr;
        /* verilator lint_on UNUSEDSIGNAL */
        logic is_external;
        is_external = '0;
        decoded_reg_strb_reg1[0] = cpuif_req_masked & (cpuif_addr == 6'h0);
        decoded_reg_strb_reg1[1] = cpuif_req_masked & (cpuif_addr == 6'h2);
        decoded_reg_strb_reg1[2] = cpuif_req_masked & (cpuif_addr == 6'h4);
        decoded_reg_strb_reg1[3] = cpuif_req_masked & (cpuif_addr == 6'h6);
        decoded_reg_strb_reg1_msb0[0] = cpuif_req_masked & (cpuif_addr == 6'h8);
        decoded_reg_strb_reg1_msb0[1] = cpuif_req_masked & (cpuif_addr == 6'ha);
        decoded_reg_strb_reg1_msb0[2] = cpuif_req_masked & (cpuif_addr == 6'hc);
        decoded_reg_strb_reg1_msb0[3] = cpuif_req_masked & (cpuif_addr == 6'he);
        decoded_reg_strb_reg2[0] = cpuif_req_masked & (cpuif_addr == 6'h10);
        decoded_reg_strb_reg2[1] = cpuif_req_masked & (cpuif_addr == 6'h12);
        decoded_reg_strb_reg2_msb0[0] = cpuif_req_masked & (cpuif_addr == 6'h14);
        decoded_reg_strb_reg2_msb0[1] = cpuif_req_masked & (cpuif_addr == 6'h16);
        decoded_reg_strb_g1_r1 = cpuif_req_masked & (cpuif_addr == 6'h18);
        decoded_reg_strb_g1_r2 = cpuif_req_masked & (cpuif_addr == 6'h1a);
        decoded_reg_strb_g2_r1 = cpuif_req_masked & (cpuif_addr == 6'h1c);
        decoded_reg_strb_g2_r2 = cpuif_req_masked & (cpuif_addr == 6'h1e);
        decoded_reg_strb_g3_r1 = cpuif_req_masked & (cpuif_addr == 6'h20);
        decoded_reg_strb_g3_trig = cpuif_req_masked & (cpuif_addr == 6'h22) & cpuif_req_is_wr;
        decoded_reg_strb_g4_r1 = cpuif_req_masked & (cpuif_addr == 6'h24);
        decoded_reg_strb_g4_trig = cpuif_req_masked & (cpuif_addr == 6'h26);
        decoded_reg_strb_g5_r1 = cpuif_req_masked & (cpuif_addr == 6'h28);
        decoded_reg_strb_g5_modcount = cpuif_req_masked & (cpuif_addr == 6'h2a);
        decoded_reg_strb_g6_r1 = cpuif_req_masked & (cpuif_addr == 6'h2c);
        decoded_reg_strb_g6_modcount = cpuif_req_masked & (cpuif_addr == 6'h2e);
        decoded_reg_strb_ext_reg1 = cpuif_req_masked & (cpuif_addr == 6'h30);
        is_external |= cpuif_req_masked & (cpuif_addr == 6'h30);
        decoded_reg_strb_ext_block = cpuif_req_masked & (cpuif_addr >= 6'h32) & (cpuif_addr <= 6'h32 + 6'h1);
        is_external |= cpuif_req_masked & (cpuif_addr >= 6'h32) & (cpuif_addr <= 6'h32 + 6'h1);
        decoded_strb_is_external = is_external;
        external_req = is_external;
    end

    // Pass down signals to next stage
    assign decoded_addr = cpuif_addr;

    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    // bitswap for use by fields with msb0 ordering
    logic [15:0] decoded_wr_data_bswap;
    logic [15:0] decoded_wr_biten_bswap;
    // Explicit bit reversal for Icarus Verilog compatibility
    genvar bitswap_i;
    generate
        for(bitswap_i = 0; bitswap_i < 16; bitswap_i = bitswap_i + 1) begin : gen_bitswap
            assign decoded_wr_data_bswap[bitswap_i] = decoded_wr_data[15 - bitswap_i];
            assign decoded_wr_biten_bswap[bitswap_i] = decoded_wr_biten[15 - bitswap_i];
        end
    endgenerate

    //--------------------------------------------------------------------------
    // Field storage declarations
    //--------------------------------------------------------------------------

    // Field: regblock.reg1.f1
    logic [63:0] field_storage_reg1_f1_value;
    logic [63:0] field_combo_reg1_f1_next;
    logic field_combo_reg1_f1_load_next;
    // Field: regblock.reg1_msb0.f1
    logic [63:0] field_storage_reg1_msb0_f1_value;
    logic [63:0] field_combo_reg1_msb0_f1_next;
    logic field_combo_reg1_msb0_f1_load_next;
    // Field: regblock.reg2.f1
    logic [11:0] field_storage_reg2_f1_value;
    logic [11:0] field_combo_reg2_f1_next;
    logic field_combo_reg2_f1_load_next;
    // Field: regblock.reg2.f2
    logic [3:0] field_storage_reg2_f2_value;
    logic [3:0] field_combo_reg2_f2_next;
    logic field_combo_reg2_f2_load_next;
    // Field: regblock.reg2_msb0.f1
    logic [11:0] field_storage_reg2_msb0_f1_value;
    logic [11:0] field_combo_reg2_msb0_f1_next;
    logic field_combo_reg2_msb0_f1_load_next;
    // Field: regblock.reg2_msb0.f2
    logic [3:0] field_storage_reg2_msb0_f2_value;
    logic [3:0] field_combo_reg2_msb0_f2_next;
    logic field_combo_reg2_msb0_f2_load_next;
    // Field: regblock.g1_r1.f1
    logic [15:0] field_storage_g1_r1_f1_value;
    logic [15:0] field_combo_g1_r1_f1_next;
    logic field_combo_g1_r1_f1_load_next;
    // Field: regblock.g1_r2.f1
    logic [15:0] field_storage_g1_r2_f1_value;
    logic [15:0] field_combo_g1_r2_f1_next;
    logic field_combo_g1_r2_f1_load_next;
    // Field: regblock.g2_r1.f1
    logic [15:0] field_storage_g2_r1_f1_value;
    logic [15:0] field_combo_g2_r1_f1_next;
    logic field_combo_g2_r1_f1_load_next;
    // Field: regblock.g2_r2.f1
    logic [15:0] field_storage_g2_r2_f1_value;
    logic [15:0] field_combo_g2_r2_f1_next;
    logic field_combo_g2_r2_f1_load_next;
    // Field: regblock.g3_r1.f1
    logic [15:0] field_storage_g3_r1_f1_value;
    logic [15:0] field_combo_g3_r1_f1_next;
    logic field_combo_g3_r1_f1_load_next;
    // Field: regblock.g3_trig.trig
    logic [0:0] field_storage_g3_trig_trig_value;
    logic [0:0] field_combo_g3_trig_trig_next;
    logic field_combo_g3_trig_trig_load_next;
    // Field: regblock.g4_r1.f1
    logic [15:0] field_storage_g4_r1_f1_value;
    logic [15:0] field_combo_g4_r1_f1_next;
    logic field_combo_g4_r1_f1_load_next;
    // Field: regblock.g4_trig.trig_vec
    logic [3:0] field_storage_g4_trig_trig_vec_value;
    logic [3:0] field_combo_g4_trig_trig_vec_next;
    logic field_combo_g4_trig_trig_vec_load_next;
    // Field: regblock.g5_r1.f1
    logic [15:0] field_storage_g5_r1_f1_value;
    logic [15:0] field_combo_g5_r1_f1_next;
    logic field_combo_g5_r1_f1_load_next;
    // Field: regblock.g5_modcount.c
    logic [3:0] field_storage_g5_modcount_c_value;
    logic [3:0] field_combo_g5_modcount_c_next;
    logic field_combo_g5_modcount_c_load_next;
    logic field_combo_g5_modcount_c_overflow;
    logic field_combo_g5_modcount_c_incrthreshold;
    // Field: regblock.g6_r1.f1
    logic [15:0] field_storage_g6_r1_f1_value;
    logic [15:0] field_combo_g6_r1_f1_next;
    logic field_combo_g6_r1_f1_load_next;
    // Field: regblock.g6_modcount.c
    logic [3:0] field_storage_g6_modcount_c_value;
    logic [3:0] field_combo_g6_modcount_c_next;
    logic field_combo_g6_modcount_c_load_next;
    logic field_combo_g6_modcount_c_overflow;
    logic field_combo_g6_modcount_c_incrthreshold;

    //--------------------------------------------------------------------------
    // Write double-buffers
    //--------------------------------------------------------------------------
    logic wbuf_storage_reg1_pending;
    logic [63:0] wbuf_storage_reg1_data;
    logic [63:0] wbuf_storage_reg1_biten;
    logic wbuf_storage_reg1_trigger_q;
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage_reg1_pending <= '0;
            wbuf_storage_reg1_data <= '0;
            wbuf_storage_reg1_biten <= '0;
            wbuf_storage_reg1_trigger_q <= '0;
        end else begin
            if(wbuf_storage_reg1_trigger_q) begin
                wbuf_storage_reg1_pending <= '0;
                wbuf_storage_reg1_data <= '0;
                wbuf_storage_reg1_biten <= '0;
            end
            if(decoded_reg_strb_reg1[0] && decoded_req_is_wr) begin
                wbuf_storage_reg1_pending <= '1;
                wbuf_storage_reg1_data[15:0] <= (wbuf_storage_reg1_data[15:0] & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_reg1_biten[15:0] <= wbuf_storage_reg1_biten[15:0] | decoded_wr_biten;
            end
            if(decoded_reg_strb_reg1[1] && decoded_req_is_wr) begin
                wbuf_storage_reg1_pending <= '1;
                wbuf_storage_reg1_data[31:16] <= (wbuf_storage_reg1_data[31:16] & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_reg1_biten[31:16] <= wbuf_storage_reg1_biten[31:16] | decoded_wr_biten;
            end
            if(decoded_reg_strb_reg1[2] && decoded_req_is_wr) begin
                wbuf_storage_reg1_pending <= '1;
                wbuf_storage_reg1_data[47:32] <= (wbuf_storage_reg1_data[47:32] & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_reg1_biten[47:32] <= wbuf_storage_reg1_biten[47:32] | decoded_wr_biten;
            end
            if(decoded_reg_strb_reg1[3] && decoded_req_is_wr) begin
                wbuf_storage_reg1_pending <= '1;
                wbuf_storage_reg1_data[63:48] <= (wbuf_storage_reg1_data[63:48] & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_reg1_biten[63:48] <= wbuf_storage_reg1_biten[63:48] | decoded_wr_biten;
            end
            wbuf_storage_reg1_trigger_q <= decoded_reg_strb_reg1[3] && decoded_req_is_wr;
        end
    end
    logic wbuf_storage_reg1_msb0_pending;
    logic [63:0] wbuf_storage_reg1_msb0_data;
    logic [63:0] wbuf_storage_reg1_msb0_biten;
    logic wbuf_storage_reg1_msb0_trigger_q;
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage_reg1_msb0_pending <= '0;
            wbuf_storage_reg1_msb0_data <= '0;
            wbuf_storage_reg1_msb0_biten <= '0;
            wbuf_storage_reg1_msb0_trigger_q <= '0;
        end else begin
            if(wbuf_storage_reg1_msb0_trigger_q) begin
                wbuf_storage_reg1_msb0_pending <= '0;
                wbuf_storage_reg1_msb0_data <= '0;
                wbuf_storage_reg1_msb0_biten <= '0;
            end
            if(decoded_reg_strb_reg1_msb0[0] && decoded_req_is_wr) begin
                wbuf_storage_reg1_msb0_pending <= '1;
                wbuf_storage_reg1_msb0_data[63: 48] <= (wbuf_storage_reg1_msb0_data[63: 48] & ~decoded_wr_biten_bswap) | (decoded_wr_data_bswap & decoded_wr_biten_bswap);
                wbuf_storage_reg1_msb0_biten[63: 48] <= wbuf_storage_reg1_msb0_biten[63: 48] | decoded_wr_biten_bswap;
            end
            if(decoded_reg_strb_reg1_msb0[1] && decoded_req_is_wr) begin
                wbuf_storage_reg1_msb0_pending <= '1;
                wbuf_storage_reg1_msb0_data[47: 32] <= (wbuf_storage_reg1_msb0_data[47: 32] & ~decoded_wr_biten_bswap) | (decoded_wr_data_bswap & decoded_wr_biten_bswap);
                wbuf_storage_reg1_msb0_biten[47: 32] <= wbuf_storage_reg1_msb0_biten[47: 32] | decoded_wr_biten_bswap;
            end
            if(decoded_reg_strb_reg1_msb0[2] && decoded_req_is_wr) begin
                wbuf_storage_reg1_msb0_pending <= '1;
                wbuf_storage_reg1_msb0_data[31: 16] <= (wbuf_storage_reg1_msb0_data[31: 16] & ~decoded_wr_biten_bswap) | (decoded_wr_data_bswap & decoded_wr_biten_bswap);
                wbuf_storage_reg1_msb0_biten[31: 16] <= wbuf_storage_reg1_msb0_biten[31: 16] | decoded_wr_biten_bswap;
            end
            if(decoded_reg_strb_reg1_msb0[3] && decoded_req_is_wr) begin
                wbuf_storage_reg1_msb0_pending <= '1;
                wbuf_storage_reg1_msb0_data[15: 0] <= (wbuf_storage_reg1_msb0_data[15: 0] & ~decoded_wr_biten_bswap) | (decoded_wr_data_bswap & decoded_wr_biten_bswap);
                wbuf_storage_reg1_msb0_biten[15: 0] <= wbuf_storage_reg1_msb0_biten[15: 0] | decoded_wr_biten_bswap;
            end
            wbuf_storage_reg1_msb0_trigger_q <= decoded_reg_strb_reg1_msb0[3] && decoded_req_is_wr;
        end
    end
    logic wbuf_storage_reg2_pending;
    logic [31:0] wbuf_storage_reg2_data;
    logic [31:0] wbuf_storage_reg2_biten;
    logic wbuf_storage_reg2_trigger_q;
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage_reg2_pending <= '0;
            wbuf_storage_reg2_data <= '0;
            wbuf_storage_reg2_biten <= '0;
            wbuf_storage_reg2_trigger_q <= '0;
        end else begin
            if(wbuf_storage_reg2_trigger_q) begin
                wbuf_storage_reg2_pending <= '0;
                wbuf_storage_reg2_data <= '0;
                wbuf_storage_reg2_biten <= '0;
            end
            if(decoded_reg_strb_reg2[0] && decoded_req_is_wr) begin
                wbuf_storage_reg2_pending <= '1;
                wbuf_storage_reg2_data[15:0] <= (wbuf_storage_reg2_data[15:0] & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_reg2_biten[15:0] <= wbuf_storage_reg2_biten[15:0] | decoded_wr_biten;
            end
            if(decoded_reg_strb_reg2[1] && decoded_req_is_wr) begin
                wbuf_storage_reg2_pending <= '1;
                wbuf_storage_reg2_data[31:16] <= (wbuf_storage_reg2_data[31:16] & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_reg2_biten[31:16] <= wbuf_storage_reg2_biten[31:16] | decoded_wr_biten;
            end
            wbuf_storage_reg2_trigger_q <= decoded_reg_strb_reg2[1] && decoded_req_is_wr;
        end
    end
    logic wbuf_storage_reg2_msb0_pending;
    logic [31:0] wbuf_storage_reg2_msb0_data;
    logic [31:0] wbuf_storage_reg2_msb0_biten;
    logic wbuf_storage_reg2_msb0_trigger_q;
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage_reg2_msb0_pending <= '0;
            wbuf_storage_reg2_msb0_data <= '0;
            wbuf_storage_reg2_msb0_biten <= '0;
            wbuf_storage_reg2_msb0_trigger_q <= '0;
        end else begin
            if(wbuf_storage_reg2_msb0_trigger_q) begin
                wbuf_storage_reg2_msb0_pending <= '0;
                wbuf_storage_reg2_msb0_data <= '0;
                wbuf_storage_reg2_msb0_biten <= '0;
            end
            if(decoded_reg_strb_reg2_msb0[0] && decoded_req_is_wr) begin
                wbuf_storage_reg2_msb0_pending <= '1;
                wbuf_storage_reg2_msb0_data[31: 16] <= (wbuf_storage_reg2_msb0_data[31: 16] & ~decoded_wr_biten_bswap) | (decoded_wr_data_bswap & decoded_wr_biten_bswap);
                wbuf_storage_reg2_msb0_biten[31: 16] <= wbuf_storage_reg2_msb0_biten[31: 16] | decoded_wr_biten_bswap;
            end
            if(decoded_reg_strb_reg2_msb0[1] && decoded_req_is_wr) begin
                wbuf_storage_reg2_msb0_pending <= '1;
                wbuf_storage_reg2_msb0_data[15: 0] <= (wbuf_storage_reg2_msb0_data[15: 0] & ~decoded_wr_biten_bswap) | (decoded_wr_data_bswap & decoded_wr_biten_bswap);
                wbuf_storage_reg2_msb0_biten[15: 0] <= wbuf_storage_reg2_msb0_biten[15: 0] | decoded_wr_biten_bswap;
            end
            wbuf_storage_reg2_msb0_trigger_q <= decoded_reg_strb_reg2_msb0[1] && decoded_req_is_wr;
        end
    end
    logic wbuf_storage_g1_r2_pending;
    logic [15:0] wbuf_storage_g1_r2_data;
    logic [15:0] wbuf_storage_g1_r2_biten;
    logic wbuf_storage_g1_r2_trigger_q;
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage_g1_r2_pending <= '0;
            wbuf_storage_g1_r2_data <= '0;
            wbuf_storage_g1_r2_biten <= '0;
        end else begin
            if(decoded_reg_strb_g1_r1 && decoded_req_is_wr) begin
                wbuf_storage_g1_r2_pending <= '0;
                wbuf_storage_g1_r2_data <= '0;
                wbuf_storage_g1_r2_biten <= '0;
            end
            if(decoded_reg_strb_g1_r2 && decoded_req_is_wr) begin
                wbuf_storage_g1_r2_pending <= '1;
                wbuf_storage_g1_r2_data <= (wbuf_storage_g1_r2_data & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_g1_r2_biten <= wbuf_storage_g1_r2_biten | decoded_wr_biten;
            end
        end
    end
    logic wbuf_storage_g2_r1_pending;
    logic [15:0] wbuf_storage_g2_r1_data;
    logic [15:0] wbuf_storage_g2_r1_biten;
    logic wbuf_storage_g2_r1_trigger_q;
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage_g2_r1_pending <= '0;
            wbuf_storage_g2_r1_data <= '0;
            wbuf_storage_g2_r1_biten <= '0;
        end else begin
            if(hwif_in_trigger_sig) begin
                wbuf_storage_g2_r1_pending <= '0;
                wbuf_storage_g2_r1_data <= '0;
                wbuf_storage_g2_r1_biten <= '0;
            end
            if(decoded_reg_strb_g2_r1 && decoded_req_is_wr) begin
                wbuf_storage_g2_r1_pending <= '1;
                wbuf_storage_g2_r1_data <= (wbuf_storage_g2_r1_data & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_g2_r1_biten <= wbuf_storage_g2_r1_biten | decoded_wr_biten;
            end
        end
    end
    logic wbuf_storage_g2_r2_pending;
    logic [15:0] wbuf_storage_g2_r2_data;
    logic [15:0] wbuf_storage_g2_r2_biten;
    logic wbuf_storage_g2_r2_trigger_q;
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage_g2_r2_pending <= '0;
            wbuf_storage_g2_r2_data <= '0;
            wbuf_storage_g2_r2_biten <= '0;
        end else begin
            if(~hwif_in_trigger_sig_n) begin
                wbuf_storage_g2_r2_pending <= '0;
                wbuf_storage_g2_r2_data <= '0;
                wbuf_storage_g2_r2_biten <= '0;
            end
            if(decoded_reg_strb_g2_r2 && decoded_req_is_wr) begin
                wbuf_storage_g2_r2_pending <= '1;
                wbuf_storage_g2_r2_data <= (wbuf_storage_g2_r2_data & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_g2_r2_biten <= wbuf_storage_g2_r2_biten | decoded_wr_biten;
            end
        end
    end
    logic wbuf_storage_g3_r1_pending;
    logic [15:0] wbuf_storage_g3_r1_data;
    logic [15:0] wbuf_storage_g3_r1_biten;
    logic wbuf_storage_g3_r1_trigger_q;
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage_g3_r1_pending <= '0;
            wbuf_storage_g3_r1_data <= '0;
            wbuf_storage_g3_r1_biten <= '0;
        end else begin
            if(field_storage_g3_trig_trig_value) begin
                wbuf_storage_g3_r1_pending <= '0;
                wbuf_storage_g3_r1_data <= '0;
                wbuf_storage_g3_r1_biten <= '0;
            end
            if(decoded_reg_strb_g3_r1 && decoded_req_is_wr) begin
                wbuf_storage_g3_r1_pending <= '1;
                wbuf_storage_g3_r1_data <= (wbuf_storage_g3_r1_data & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_g3_r1_biten <= wbuf_storage_g3_r1_biten | decoded_wr_biten;
            end
        end
    end
    logic wbuf_storage_g4_r1_pending;
    logic [15:0] wbuf_storage_g4_r1_data;
    logic [15:0] wbuf_storage_g4_r1_biten;
    logic wbuf_storage_g4_r1_trigger_q;
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage_g4_r1_pending <= '0;
            wbuf_storage_g4_r1_data <= '0;
            wbuf_storage_g4_r1_biten <= '0;
        end else begin
            if(&(field_storage_g4_trig_trig_vec_value)) begin
                wbuf_storage_g4_r1_pending <= '0;
                wbuf_storage_g4_r1_data <= '0;
                wbuf_storage_g4_r1_biten <= '0;
            end
            if(decoded_reg_strb_g4_r1 && decoded_req_is_wr) begin
                wbuf_storage_g4_r1_pending <= '1;
                wbuf_storage_g4_r1_data <= (wbuf_storage_g4_r1_data & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_g4_r1_biten <= wbuf_storage_g4_r1_biten | decoded_wr_biten;
            end
        end
    end
    logic wbuf_storage_g5_r1_pending;
    logic [15:0] wbuf_storage_g5_r1_data;
    logic [15:0] wbuf_storage_g5_r1_biten;
    logic wbuf_storage_g5_r1_trigger_q;
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage_g5_r1_pending <= '0;
            wbuf_storage_g5_r1_data <= '0;
            wbuf_storage_g5_r1_biten <= '0;
        end else begin
            if(hwif_in_trigger_sig) begin
                wbuf_storage_g5_r1_pending <= '0;
                wbuf_storage_g5_r1_data <= '0;
                wbuf_storage_g5_r1_biten <= '0;
            end
            if(decoded_reg_strb_g5_r1 && decoded_req_is_wr) begin
                wbuf_storage_g5_r1_pending <= '1;
                wbuf_storage_g5_r1_data <= (wbuf_storage_g5_r1_data & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_g5_r1_biten <= wbuf_storage_g5_r1_biten | decoded_wr_biten;
            end
        end
    end
    logic wbuf_storage_g6_r1_pending;
    logic [15:0] wbuf_storage_g6_r1_data;
    logic [15:0] wbuf_storage_g6_r1_biten;
    logic wbuf_storage_g6_r1_trigger_q;
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage_g6_r1_pending <= '0;
            wbuf_storage_g6_r1_data <= '0;
            wbuf_storage_g6_r1_biten <= '0;
        end else begin
            if(hwif_in_trigger_sig) begin
                wbuf_storage_g6_r1_pending <= '0;
                wbuf_storage_g6_r1_data <= '0;
                wbuf_storage_g6_r1_biten <= '0;
            end
            if(decoded_reg_strb_g6_r1 && decoded_req_is_wr) begin
                wbuf_storage_g6_r1_pending <= '1;
                wbuf_storage_g6_r1_data <= (wbuf_storage_g6_r1_data & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_g6_r1_biten <= wbuf_storage_g6_r1_biten | decoded_wr_biten;
            end
        end
    end
    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    // always_comb begin
    always @(*) begin
        logic [63:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_f1_value;
        load_next_c = '0;
        if(wbuf_storage_reg1_pending && wbuf_storage_reg1_trigger_q) begin // SW write
            next_c = (field_storage_reg1_f1_value & ~wbuf_storage_reg1_biten[63:0]) | (wbuf_storage_reg1_data[63:0] & wbuf_storage_reg1_biten[63:0]);
            load_next_c = '1;
        end
        field_combo_reg1_f1_next = next_c;
        field_combo_reg1_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_f1_value <= 64'h0;
        end else if(field_combo_reg1_f1_load_next) begin
            field_storage_reg1_f1_value <= field_combo_reg1_f1_next;
        end
    end
    assign hwif_out_reg1_f1 = field_storage_reg1_f1_value;
    // always_comb begin
    always @(*) begin
        logic [63:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_msb0_f1_value;
        load_next_c = '0;
        if(wbuf_storage_reg1_msb0_pending && wbuf_storage_reg1_msb0_trigger_q) begin // SW write
            next_c = (field_storage_reg1_msb0_f1_value & ~wbuf_storage_reg1_msb0_biten[63:0]) | (wbuf_storage_reg1_msb0_data[63:0] & wbuf_storage_reg1_msb0_biten[63:0]);
            load_next_c = '1;
        end
        field_combo_reg1_msb0_f1_next = next_c;
        field_combo_reg1_msb0_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_msb0_f1_value <= 64'h0;
        end else if(field_combo_reg1_msb0_f1_load_next) begin
            field_storage_reg1_msb0_f1_value <= field_combo_reg1_msb0_f1_next;
        end
    end
    assign hwif_out_reg1_msb0_f1 = field_storage_reg1_msb0_f1_value;
    // always_comb begin
    always @(*) begin
        logic [11:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg2_f1_value;
        load_next_c = '0;
        if(wbuf_storage_reg2_pending && wbuf_storage_reg2_trigger_q) begin // SW write
            next_c = (field_storage_reg2_f1_value & ~wbuf_storage_reg2_biten[19:8]) | (wbuf_storage_reg2_data[19:8] & wbuf_storage_reg2_biten[19:8]);
            load_next_c = '1;
        end
        field_combo_reg2_f1_next = next_c;
        field_combo_reg2_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg2_f1_value <= 12'h0;
        end else if(field_combo_reg2_f1_load_next) begin
            field_storage_reg2_f1_value <= field_combo_reg2_f1_next;
        end
    end
    assign hwif_out_reg2_f1 = field_storage_reg2_f1_value;
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg2_f2_value;
        load_next_c = '0;
        if(wbuf_storage_reg2_pending && wbuf_storage_reg2_trigger_q) begin // SW write
            next_c = (field_storage_reg2_f2_value & ~wbuf_storage_reg2_biten[23:20]) | (wbuf_storage_reg2_data[23:20] & wbuf_storage_reg2_biten[23:20]);
            load_next_c = '1;
        end
        field_combo_reg2_f2_next = next_c;
        field_combo_reg2_f2_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg2_f2_value <= 4'h0;
        end else if(field_combo_reg2_f2_load_next) begin
            field_storage_reg2_f2_value <= field_combo_reg2_f2_next;
        end
    end
    assign hwif_out_reg2_f2 = field_storage_reg2_f2_value;
    // always_comb begin
    always @(*) begin
        logic [11:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg2_msb0_f1_value;
        load_next_c = '0;
        if(wbuf_storage_reg2_msb0_pending && wbuf_storage_reg2_msb0_trigger_q) begin // SW write
            next_c = (field_storage_reg2_msb0_f1_value & ~wbuf_storage_reg2_msb0_biten[23:12]) | (wbuf_storage_reg2_msb0_data[23:12] & wbuf_storage_reg2_msb0_biten[23:12]);
            load_next_c = '1;
        end
        field_combo_reg2_msb0_f1_next = next_c;
        field_combo_reg2_msb0_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg2_msb0_f1_value <= 12'h0;
        end else if(field_combo_reg2_msb0_f1_load_next) begin
            field_storage_reg2_msb0_f1_value <= field_combo_reg2_msb0_f1_next;
        end
    end
    assign hwif_out_reg2_msb0_f1 = field_storage_reg2_msb0_f1_value;
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg2_msb0_f2_value;
        load_next_c = '0;
        if(wbuf_storage_reg2_msb0_pending && wbuf_storage_reg2_msb0_trigger_q) begin // SW write
            next_c = (field_storage_reg2_msb0_f2_value & ~wbuf_storage_reg2_msb0_biten[11:8]) | (wbuf_storage_reg2_msb0_data[11:8] & wbuf_storage_reg2_msb0_biten[11:8]);
            load_next_c = '1;
        end
        field_combo_reg2_msb0_f2_next = next_c;
        field_combo_reg2_msb0_f2_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg2_msb0_f2_value <= 4'h0;
        end else if(field_combo_reg2_msb0_f2_load_next) begin
            field_storage_reg2_msb0_f2_value <= field_combo_reg2_msb0_f2_next;
        end
    end
    assign hwif_out_reg2_msb0_f2 = field_storage_reg2_msb0_f2_value;
    // always_comb begin
    always @(*) begin
        logic [15:0] next_c;
        logic load_next_c;
        next_c = field_storage_g1_r1_f1_value;
        load_next_c = '0;
        if(decoded_reg_strb_g1_r1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_g1_r1_f1_value & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
            load_next_c = '1;
        end
        field_combo_g1_r1_f1_next = next_c;
        field_combo_g1_r1_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_g1_r1_f1_value <= 16'h0;
        end else if(field_combo_g1_r1_f1_load_next) begin
            field_storage_g1_r1_f1_value <= field_combo_g1_r1_f1_next;
        end
    end
    assign hwif_out_g1_r1_f1 = field_storage_g1_r1_f1_value;
    // always_comb begin
    always @(*) begin
        logic [15:0] next_c;
        logic load_next_c;
        next_c = field_storage_g1_r2_f1_value;
        load_next_c = '0;
        if(wbuf_storage_g1_r2_pending && decoded_reg_strb_g1_r1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_g1_r2_f1_value & ~wbuf_storage_g1_r2_biten[15:0]) | (wbuf_storage_g1_r2_data[15:0] & wbuf_storage_g1_r2_biten[15:0]);
            load_next_c = '1;
        end
        field_combo_g1_r2_f1_next = next_c;
        field_combo_g1_r2_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_g1_r2_f1_value <= 16'h0;
        end else if(field_combo_g1_r2_f1_load_next) begin
            field_storage_g1_r2_f1_value <= field_combo_g1_r2_f1_next;
        end
    end
    assign hwif_out_g1_r2_f1 = field_storage_g1_r2_f1_value;
    // always_comb begin
    always @(*) begin
        logic [15:0] next_c;
        logic load_next_c;
        next_c = field_storage_g2_r1_f1_value;
        load_next_c = '0;
        if(wbuf_storage_g2_r1_pending && hwif_in_trigger_sig) begin // SW write
            next_c = (field_storage_g2_r1_f1_value & ~wbuf_storage_g2_r1_biten[15:0]) | (wbuf_storage_g2_r1_data[15:0] & wbuf_storage_g2_r1_biten[15:0]);
            load_next_c = '1;
        end
        field_combo_g2_r1_f1_next = next_c;
        field_combo_g2_r1_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_g2_r1_f1_value <= 16'h0;
        end else if(field_combo_g2_r1_f1_load_next) begin
            field_storage_g2_r1_f1_value <= field_combo_g2_r1_f1_next;
        end
    end
    assign hwif_out_g2_r1_f1 = field_storage_g2_r1_f1_value;
    // always_comb begin
    always @(*) begin
        logic [15:0] next_c;
        logic load_next_c;
        next_c = field_storage_g2_r2_f1_value;
        load_next_c = '0;
        if(wbuf_storage_g2_r2_pending && ~hwif_in_trigger_sig_n) begin // SW write
            next_c = (field_storage_g2_r2_f1_value & ~wbuf_storage_g2_r2_biten[15:0]) | (wbuf_storage_g2_r2_data[15:0] & wbuf_storage_g2_r2_biten[15:0]);
            load_next_c = '1;
        end
        field_combo_g2_r2_f1_next = next_c;
        field_combo_g2_r2_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_g2_r2_f1_value <= 16'h0;
        end else if(field_combo_g2_r2_f1_load_next) begin
            field_storage_g2_r2_f1_value <= field_combo_g2_r2_f1_next;
        end
    end
    assign hwif_out_g2_r2_f1 = field_storage_g2_r2_f1_value;
    // always_comb begin
    always @(*) begin
        logic [15:0] next_c;
        logic load_next_c;
        next_c = field_storage_g3_r1_f1_value;
        load_next_c = '0;
        if(wbuf_storage_g3_r1_pending && field_storage_g3_trig_trig_value) begin // SW write
            next_c = (field_storage_g3_r1_f1_value & ~wbuf_storage_g3_r1_biten[15:0]) | (wbuf_storage_g3_r1_data[15:0] & wbuf_storage_g3_r1_biten[15:0]);
            load_next_c = '1;
        end
        field_combo_g3_r1_f1_next = next_c;
        field_combo_g3_r1_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_g3_r1_f1_value <= 16'h0;
        end else if(field_combo_g3_r1_f1_load_next) begin
            field_storage_g3_r1_f1_value <= field_combo_g3_r1_f1_next;
        end
    end
    assign hwif_out_g3_r1_f1 = field_storage_g3_r1_f1_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_g3_trig_trig_value;
        load_next_c = '0;
        if(decoded_reg_strb_g3_trig && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_g3_trig_trig_value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo_g3_trig_trig_next = next_c;
        field_combo_g3_trig_trig_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_g3_trig_trig_value <= 1'h0;
        end else if(field_combo_g3_trig_trig_load_next) begin
            field_storage_g3_trig_trig_value <= field_combo_g3_trig_trig_next;
        end
    end
    assign hwif_out_g3_trig_trig = field_storage_g3_trig_trig_value;
    // always_comb begin
    always @(*) begin
        logic [15:0] next_c;
        logic load_next_c;
        next_c = field_storage_g4_r1_f1_value;
        load_next_c = '0;
        if(wbuf_storage_g4_r1_pending && &(field_storage_g4_trig_trig_vec_value)) begin // SW write
            next_c = (field_storage_g4_r1_f1_value & ~wbuf_storage_g4_r1_biten[15:0]) | (wbuf_storage_g4_r1_data[15:0] & wbuf_storage_g4_r1_biten[15:0]);
            load_next_c = '1;
        end
        field_combo_g4_r1_f1_next = next_c;
        field_combo_g4_r1_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_g4_r1_f1_value <= 16'h0;
        end else if(field_combo_g4_r1_f1_load_next) begin
            field_storage_g4_r1_f1_value <= field_combo_g4_r1_f1_next;
        end
    end
    assign hwif_out_g4_r1_f1 = field_storage_g4_r1_f1_value;
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_g4_trig_trig_vec_value;
        load_next_c = '0;
        if(decoded_reg_strb_g4_trig && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_g4_trig_trig_vec_value & ~decoded_wr_biten[3:0]) | (decoded_wr_data[3:0] & decoded_wr_biten[3:0]);
            load_next_c = '1;
        end
        field_combo_g4_trig_trig_vec_next = next_c;
        field_combo_g4_trig_trig_vec_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_g4_trig_trig_vec_value <= 4'h0;
        end else if(field_combo_g4_trig_trig_vec_load_next) begin
            field_storage_g4_trig_trig_vec_value <= field_combo_g4_trig_trig_vec_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [15:0] next_c;
        logic load_next_c;
        next_c = field_storage_g5_r1_f1_value;
        load_next_c = '0;
        if(wbuf_storage_g5_r1_pending && hwif_in_trigger_sig) begin // SW write
            next_c = (field_storage_g5_r1_f1_value & ~wbuf_storage_g5_r1_biten[15:0]) | (wbuf_storage_g5_r1_data[15:0] & wbuf_storage_g5_r1_biten[15:0]);
            load_next_c = '1;
        end
        field_combo_g5_r1_f1_next = next_c;
        field_combo_g5_r1_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_g5_r1_f1_value <= 16'h0;
        end else if(field_combo_g5_r1_f1_load_next) begin
            field_storage_g5_r1_f1_value <= field_combo_g5_r1_f1_next;
        end
    end
    assign hwif_out_g5_r1_f1 = field_storage_g5_r1_f1_value;
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_g5_modcount_c_value;
        load_next_c = '0;
        if(decoded_reg_strb_g5_modcount && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_g5_modcount_c_value & ~decoded_wr_biten[3:0]) | (decoded_wr_data[3:0] & decoded_wr_biten[3:0]);
            load_next_c = '1;
        end
        if(wbuf_storage_g5_r1_pending && hwif_in_trigger_sig) begin // increment
            field_combo_g5_modcount_c_overflow = (((5)'(next_c) + (5)'(4'h1)) > 5'hf);
            next_c = next_c + (4)'(4'h1);
            load_next_c = '1;
        end else begin
            field_combo_g5_modcount_c_overflow = '0;
        end
        field_combo_g5_modcount_c_incrthreshold = (field_storage_g5_modcount_c_value >= 4'hf);
        field_combo_g5_modcount_c_next = next_c;
        field_combo_g5_modcount_c_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_g5_modcount_c_value <= 4'h0;
        end else if(field_combo_g5_modcount_c_load_next) begin
            field_storage_g5_modcount_c_value <= field_combo_g5_modcount_c_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [15:0] next_c;
        logic load_next_c;
        next_c = field_storage_g6_r1_f1_value;
        load_next_c = '0;
        if(decoded_reg_strb_g6_r1 && !decoded_req_is_wr) begin // SW clear on read
            next_c = '0;
            load_next_c = '1;
        end else if(wbuf_storage_g6_r1_pending && hwif_in_trigger_sig) begin // SW write
            next_c = (field_storage_g6_r1_f1_value & ~wbuf_storage_g6_r1_biten[15:0]) | (wbuf_storage_g6_r1_data[15:0] & wbuf_storage_g6_r1_biten[15:0]);
            load_next_c = '1;
        end
        field_combo_g6_r1_f1_next = next_c;
        field_combo_g6_r1_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_g6_r1_f1_value <= 16'h0;
        end else if(field_combo_g6_r1_f1_load_next) begin
            field_storage_g6_r1_f1_value <= field_combo_g6_r1_f1_next;
        end
    end
    assign hwif_out_g6_r1_f1 = field_storage_g6_r1_f1_value;
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_g6_modcount_c_value;
        load_next_c = '0;
        if(decoded_reg_strb_g6_modcount && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_g6_modcount_c_value & ~decoded_wr_biten[3:0]) | (decoded_wr_data[3:0] & decoded_wr_biten[3:0]);
            load_next_c = '1;
        end
        if(wbuf_storage_g6_r1_pending && hwif_in_trigger_sig || decoded_reg_strb_g6_r1 && !decoded_req_is_wr) begin // increment
            field_combo_g6_modcount_c_overflow = (((5)'(next_c) + (5)'(4'h1)) > 5'hf);
            next_c = next_c + (4)'(4'h1);
            load_next_c = '1;
        end else begin
            field_combo_g6_modcount_c_overflow = '0;
        end
        field_combo_g6_modcount_c_incrthreshold = (field_storage_g6_modcount_c_value >= 4'hf);
        field_combo_g6_modcount_c_next = next_c;
        field_combo_g6_modcount_c_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_g6_modcount_c_value <= 4'h0;
        end else if(field_combo_g6_modcount_c_load_next) begin
            field_storage_g6_modcount_c_value <= field_combo_g6_modcount_c_next;
        end
    end

    assign hwif_out_ext_reg1_req = decoded_reg_strb_ext_reg1;
    assign hwif_out_ext_reg1_req_is_wr = decoded_req_is_wr;
    assign hwif_out_ext_reg1_wr_data = decoded_wr_data[15:0];
    assign hwif_out_ext_reg1_wr_biten = decoded_wr_biten[15:0];

    assign hwif_out_ext_block_addr = decoded_addr[0:0];
    assign hwif_out_ext_block_req = decoded_reg_strb_ext_block;
    assign hwif_out_ext_block_req_is_wr = decoded_req_is_wr;
    assign hwif_out_ext_block_wr_data = decoded_wr_data;
    assign hwif_out_ext_block_wr_biten = decoded_wr_biten;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    always @(*) begin
        logic wr_ack;
        wr_ack = '0;
        wr_ack |= hwif_in_ext_reg1_wr_ack;
        wr_ack |= hwif_in_ext_block_wr_ack;
        external_wr_ack = wr_ack;
    end
    assign cpuif_wr_ack = external_wr_ack | (decoded_req & decoded_req_is_wr & ~decoded_strb_is_external);
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

//--------------------------------------------------------------------------
// Readback
//--------------------------------------------------------------------------
    logic readback_external_rd_ack;
    logic readback_external_rd_ack_c;
    always @(*) begin
        logic rd_ack;
        rd_ack = '0;
        rd_ack |= hwif_in_ext_reg1_rd_ack;
        rd_ack |= hwif_in_ext_block_rd_ack;
        readback_external_rd_ack_c = rd_ack;
    end

    assign readback_external_rd_ack = readback_external_rd_ack_c;

    logic readback_err;
    logic readback_done;
    logic [15:0] readback_data;

    // Assign readback values to a flattened array
    logic [15:0] readback_array[27];
    assign readback_array[0][15:0] = (decoded_reg_strb_reg1[0] && !decoded_req_is_wr) ? field_storage_reg1_f1_value[15:0] : '0;
    assign readback_array[1][15:0] = (decoded_reg_strb_reg1[1] && !decoded_req_is_wr) ? field_storage_reg1_f1_value[31:16] : '0;
    assign readback_array[2][15:0] = (decoded_reg_strb_reg1[2] && !decoded_req_is_wr) ? field_storage_reg1_f1_value[47:32] : '0;
    assign readback_array[3][15:0] = (decoded_reg_strb_reg1[3] && !decoded_req_is_wr) ? field_storage_reg1_f1_value[63:48] : '0;
    assign readback_array[4][15:0] = (decoded_reg_strb_reg1_msb0[0] && !decoded_req_is_wr) ? {field_storage_reg1_msb0_f1_value[48], field_storage_reg1_msb0_f1_value[49], field_storage_reg1_msb0_f1_value[50], field_storage_reg1_msb0_f1_value[51], field_storage_reg1_msb0_f1_value[52], field_storage_reg1_msb0_f1_value[53], field_storage_reg1_msb0_f1_value[54], field_storage_reg1_msb0_f1_value[55], field_storage_reg1_msb0_f1_value[56], field_storage_reg1_msb0_f1_value[57], field_storage_reg1_msb0_f1_value[58], field_storage_reg1_msb0_f1_value[59], field_storage_reg1_msb0_f1_value[60], field_storage_reg1_msb0_f1_value[61], field_storage_reg1_msb0_f1_value[62], field_storage_reg1_msb0_f1_value[63]} : '0;
    assign readback_array[5][15:0] = (decoded_reg_strb_reg1_msb0[1] && !decoded_req_is_wr) ? {field_storage_reg1_msb0_f1_value[32], field_storage_reg1_msb0_f1_value[33], field_storage_reg1_msb0_f1_value[34], field_storage_reg1_msb0_f1_value[35], field_storage_reg1_msb0_f1_value[36], field_storage_reg1_msb0_f1_value[37], field_storage_reg1_msb0_f1_value[38], field_storage_reg1_msb0_f1_value[39], field_storage_reg1_msb0_f1_value[40], field_storage_reg1_msb0_f1_value[41], field_storage_reg1_msb0_f1_value[42], field_storage_reg1_msb0_f1_value[43], field_storage_reg1_msb0_f1_value[44], field_storage_reg1_msb0_f1_value[45], field_storage_reg1_msb0_f1_value[46], field_storage_reg1_msb0_f1_value[47]} : '0;
    assign readback_array[6][15:0] = (decoded_reg_strb_reg1_msb0[2] && !decoded_req_is_wr) ? {field_storage_reg1_msb0_f1_value[16], field_storage_reg1_msb0_f1_value[17], field_storage_reg1_msb0_f1_value[18], field_storage_reg1_msb0_f1_value[19], field_storage_reg1_msb0_f1_value[20], field_storage_reg1_msb0_f1_value[21], field_storage_reg1_msb0_f1_value[22], field_storage_reg1_msb0_f1_value[23], field_storage_reg1_msb0_f1_value[24], field_storage_reg1_msb0_f1_value[25], field_storage_reg1_msb0_f1_value[26], field_storage_reg1_msb0_f1_value[27], field_storage_reg1_msb0_f1_value[28], field_storage_reg1_msb0_f1_value[29], field_storage_reg1_msb0_f1_value[30], field_storage_reg1_msb0_f1_value[31]} : '0;
    assign readback_array[7][15:0] = (decoded_reg_strb_reg1_msb0[3] && !decoded_req_is_wr) ? {field_storage_reg1_msb0_f1_value[0], field_storage_reg1_msb0_f1_value[1], field_storage_reg1_msb0_f1_value[2], field_storage_reg1_msb0_f1_value[3], field_storage_reg1_msb0_f1_value[4], field_storage_reg1_msb0_f1_value[5], field_storage_reg1_msb0_f1_value[6], field_storage_reg1_msb0_f1_value[7], field_storage_reg1_msb0_f1_value[8], field_storage_reg1_msb0_f1_value[9], field_storage_reg1_msb0_f1_value[10], field_storage_reg1_msb0_f1_value[11], field_storage_reg1_msb0_f1_value[12], field_storage_reg1_msb0_f1_value[13], field_storage_reg1_msb0_f1_value[14], field_storage_reg1_msb0_f1_value[15]} : '0;
    assign readback_array[8][7:0] = '0;
    assign readback_array[8][15:8] = (decoded_reg_strb_reg2[0] && !decoded_req_is_wr) ? field_storage_reg2_f1_value[7:0] : '0;
    assign readback_array[9][3:0] = (decoded_reg_strb_reg2[1] && !decoded_req_is_wr) ? field_storage_reg2_f1_value[11:8] : '0;
    assign readback_array[9][7:4] = (decoded_reg_strb_reg2[1] && !decoded_req_is_wr) ? field_storage_reg2_f2_value : '0;
    assign readback_array[9][15:8] = '0;
    assign readback_array[10] = (decoded_reg_strb_reg2[1] && !decoded_req_is_wr) ? 16'h0 : '0;
    assign readback_array[11][7:0] = '0;
    assign readback_array[11][15:8] = (decoded_reg_strb_reg2_msb0[0] && !decoded_req_is_wr) ? {field_storage_reg2_msb0_f1_value[4], field_storage_reg2_msb0_f1_value[5], field_storage_reg2_msb0_f1_value[6], field_storage_reg2_msb0_f1_value[7], field_storage_reg2_msb0_f1_value[8], field_storage_reg2_msb0_f1_value[9], field_storage_reg2_msb0_f1_value[10], field_storage_reg2_msb0_f1_value[11]} : '0;
    assign readback_array[12][3:0] = (decoded_reg_strb_reg2_msb0[1] && !decoded_req_is_wr) ? {field_storage_reg2_msb0_f1_value[0], field_storage_reg2_msb0_f1_value[1], field_storage_reg2_msb0_f1_value[2], field_storage_reg2_msb0_f1_value[3]} : '0;
    assign readback_array[12][7:4] = (decoded_reg_strb_reg2_msb0[1] && !decoded_req_is_wr) ? {field_storage_reg2_msb0_f2_value[0], field_storage_reg2_msb0_f2_value[1], field_storage_reg2_msb0_f2_value[2], field_storage_reg2_msb0_f2_value[3]} : '0;
    assign readback_array[12][15:8] = '0;
    assign readback_array[13] = (decoded_reg_strb_reg2_msb0[1] && !decoded_req_is_wr) ? 16'h0 : '0;
    assign readback_array[14][15:0] = (decoded_reg_strb_g1_r1 && !decoded_req_is_wr) ? field_storage_g1_r1_f1_value : '0;
    assign readback_array[15][15:0] = (decoded_reg_strb_g1_r2 && !decoded_req_is_wr) ? field_storage_g1_r2_f1_value : '0;
    assign readback_array[16][15:0] = (decoded_reg_strb_g2_r1 && !decoded_req_is_wr) ? field_storage_g2_r1_f1_value : '0;
    assign readback_array[17][15:0] = (decoded_reg_strb_g2_r2 && !decoded_req_is_wr) ? field_storage_g2_r2_f1_value : '0;
    assign readback_array[18][15:0] = (decoded_reg_strb_g3_r1 && !decoded_req_is_wr) ? field_storage_g3_r1_f1_value : '0;
    assign readback_array[19][15:0] = (decoded_reg_strb_g4_r1 && !decoded_req_is_wr) ? field_storage_g4_r1_f1_value : '0;
    assign readback_array[20][3:0] = (decoded_reg_strb_g4_trig && !decoded_req_is_wr) ? field_storage_g4_trig_trig_vec_value : '0;
    assign readback_array[20][15:4] = '0;
    assign readback_array[21][15:0] = (decoded_reg_strb_g5_r1 && !decoded_req_is_wr) ? field_storage_g5_r1_f1_value : '0;
    assign readback_array[22][3:0] = (decoded_reg_strb_g5_modcount && !decoded_req_is_wr) ? field_storage_g5_modcount_c_value : '0;
    assign readback_array[22][15:4] = '0;
    assign readback_array[23][15:0] = (decoded_reg_strb_g6_r1 && !decoded_req_is_wr) ? field_storage_g6_r1_f1_value : '0;
    assign readback_array[24][3:0] = (decoded_reg_strb_g6_modcount && !decoded_req_is_wr) ? field_storage_g6_modcount_c_value : '0;
    assign readback_array[24][15:4] = '0;
    assign readback_array[25] = hwif_in_ext_reg1_rd_ack ? hwif_in_ext_reg1_rd_data : '0;
    assign readback_array[26] = hwif_in_ext_block_rd_ack ? hwif_in_ext_block_rd_data[15:0] : '0;

    // Reduce the array
    // always_comb begin
    always @(*) begin
        logic [15:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr & ~decoded_strb_is_external;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<27; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign external_rd_ack = readback_external_rd_ack;
    assign cpuif_rd_ack = readback_done | readback_external_rd_ack;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
