// Generated by PeakRDL-regblock HWIF Wrapper Tool
//  https://github.com/SystemRDL/PeakRDL-regblock
//
// This is a wrapper module that flattens the hwif structs into individual signals

module regblock_wrapper (
        input wire clk,
        input wire rst,
        input wire s_apb_psel,
        input wire s_apb_penable,
        input wire s_apb_pwrite,
        input wire [2:0] s_apb_pprot,
        input wire [4:0] s_apb_paddr,
        input wire [7:0] s_apb_pwdata,
        input wire [0:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [7:0] s_apb_prdata,
        output logic s_apb_pslverr,
        input logic hwif_in_incr_en,
        input logic hwif_in_trigger_sig,
        input logic hwif_in_trigger_sig_n,
        input logic [7:0] hwif_in_g3_r1_f1,
        input logic [7:0] hwif_in_g3_r2_f1,
        input logic hwif_in_ext_reg1_rd_ack,
        input logic [7:0] hwif_in_ext_reg1_rd_data,
        input logic hwif_in_ext_block_rd_ack,
        input logic [7:0] hwif_in_ext_block_rd_data,
        input logic hwif_in_ext_block_wr_ack,
        output logic [2:0] hwif_out_reg1_f1,
        output logic [2:0] hwif_out_reg1_f2,
        output logic [2:0] hwif_out_reg1_f3,
        output logic [2:0] hwif_out_reg1_f4,
        output logic [2:0] hwif_out_reg1_f5,
        output logic [2:0] hwif_out_reg1_f6,
        output logic [2:0] hwif_out_reg1_f7,
        output logic [2:0] hwif_out_reg1_f8,
        output logic [2:0] hwif_out_reg1_f9,
        output logic [2:0] hwif_out_reg1_fa,
        output logic [2:0] hwif_out_reg1_msb0_fa,
        output logic [2:0] hwif_out_reg1_msb0_f9,
        output logic [2:0] hwif_out_reg1_msb0_f8,
        output logic [2:0] hwif_out_reg1_msb0_f7,
        output logic [2:0] hwif_out_reg1_msb0_f6,
        output logic [2:0] hwif_out_reg1_msb0_f5,
        output logic [2:0] hwif_out_reg1_msb0_f4,
        output logic [2:0] hwif_out_reg1_msb0_f3,
        output logic [2:0] hwif_out_reg1_msb0_f2,
        output logic [2:0] hwif_out_reg1_msb0_f1,
        output logic [4:0] hwif_out_reg2_f1,
        output logic [4:0] hwif_out_reg2_f2,
        output logic [4:0] hwif_out_reg2_f3,
        output logic [4:0] hwif_out_reg2_f4,
        output logic [7:0] hwif_out_g1_r1_f1,
        output logic [7:0] hwif_out_g1_r2_f1,
        output logic [15:0] hwif_out_g2_r1_f1,
        output logic [15:0] hwif_out_g2_r2_f1,
        output logic hwif_out_g4_trig,
        output logic [7:0] hwif_out_g4_r1_f1,
        output logic [7:0] hwif_out_g4_r2_f1,
        output logic [1:0] hwif_out_ext_reg1_req,
        output logic hwif_out_ext_reg1_req_is_wr,
        output logic hwif_out_ext_block_req,
        output logic hwif_out_ext_block_addr,
        output logic hwif_out_ext_block_req_is_wr,
        output logic [7:0] hwif_out_ext_block_wr_data,
        output logic [7:0] hwif_out_ext_block_wr_biten
    );

    //--------------------------------------------------------------------------
    // Internal hwif struct signals
    //--------------------------------------------------------------------------
    regblock_pkg::regblock__in_t hwif_in;
    regblock_pkg::regblock__out_t hwif_out;

    //--------------------------------------------------------------------------
    // Flatten struct to individual signals
    //--------------------------------------------------------------------------
    assign hwif_in.incr_en = hwif_in_incr_en;
    assign hwif_in.trigger_sig = hwif_in_trigger_sig;
    assign hwif_in.trigger_sig_n = hwif_in_trigger_sig_n;
    assign hwif_in.g3_r1.f1.next = hwif_in_g3_r1_f1;
    assign hwif_in.g3_r2.f1.next = hwif_in_g3_r2_f1;
    assign hwif_in.ext_reg1.rd_ack = hwif_in_ext_reg1_rd_ack;
    assign hwif_in.ext_reg1.rd_data = hwif_in_ext_reg1_rd_data;
    assign hwif_in.ext_block.rd_ack = hwif_in_ext_block_rd_ack;
    assign hwif_in.ext_block.rd_data = hwif_in_ext_block_rd_data;
    assign hwif_in.ext_block.wr_ack = hwif_in_ext_block_wr_ack;

    assign hwif_out_reg1_f1 = hwif_out.reg1.f1.value;
    assign hwif_out_reg1_f2 = hwif_out.reg1.f2.value;
    assign hwif_out_reg1_f3 = hwif_out.reg1.f3.value;
    assign hwif_out_reg1_f4 = hwif_out.reg1.f4.value;
    assign hwif_out_reg1_f5 = hwif_out.reg1.f5.value;
    assign hwif_out_reg1_f6 = hwif_out.reg1.f6.value;
    assign hwif_out_reg1_f7 = hwif_out.reg1.f7.value;
    assign hwif_out_reg1_f8 = hwif_out.reg1.f8.value;
    assign hwif_out_reg1_f9 = hwif_out.reg1.f9.value;
    assign hwif_out_reg1_fa = hwif_out.reg1.fa.value;
    assign hwif_out_reg1_msb0_fa = hwif_out.reg1_msb0.fa.value;
    assign hwif_out_reg1_msb0_f9 = hwif_out.reg1_msb0.f9.value;
    assign hwif_out_reg1_msb0_f8 = hwif_out.reg1_msb0.f8.value;
    assign hwif_out_reg1_msb0_f7 = hwif_out.reg1_msb0.f7.value;
    assign hwif_out_reg1_msb0_f6 = hwif_out.reg1_msb0.f6.value;
    assign hwif_out_reg1_msb0_f5 = hwif_out.reg1_msb0.f5.value;
    assign hwif_out_reg1_msb0_f4 = hwif_out.reg1_msb0.f4.value;
    assign hwif_out_reg1_msb0_f3 = hwif_out.reg1_msb0.f3.value;
    assign hwif_out_reg1_msb0_f2 = hwif_out.reg1_msb0.f2.value;
    assign hwif_out_reg1_msb0_f1 = hwif_out.reg1_msb0.f1.value;
    assign hwif_out_reg2_f1 = hwif_out.reg2.f1.value;
    assign hwif_out_reg2_f2 = hwif_out.reg2.f2.value;
    assign hwif_out_reg2_f3 = hwif_out.reg2.f3.value;
    assign hwif_out_reg2_f4 = hwif_out.reg2.f4.value;
    assign hwif_out_g1_r1_f1 = hwif_out.g1_r1.f1.value;
    assign hwif_out_g1_r2_f1 = hwif_out.g1_r2.f1.value;
    assign hwif_out_g2_r1_f1 = hwif_out.g2_r1.f1.value;
    assign hwif_out_g2_r2_f1 = hwif_out.g2_r2.f1.value;
    assign hwif_out_g4_trig = hwif_out.g4_trig.trig.value;
    assign hwif_out_g4_r1_f1 = hwif_out.g4_r1.f1.value;
    assign hwif_out_g4_r2_f1 = hwif_out.g4_r2.f1.value;
    assign hwif_out_ext_reg1_req = hwif_out.ext_reg1.req;
    assign hwif_out_ext_reg1_req_is_wr = hwif_out.ext_reg1.req_is_wr;
    assign hwif_out_ext_block_req = hwif_out.ext_block.req;
    assign hwif_out_ext_block_addr = hwif_out.ext_block.addr;
    assign hwif_out_ext_block_req_is_wr = hwif_out.ext_block.req_is_wr;
    assign hwif_out_ext_block_wr_data = hwif_out.ext_block.wr_data;
    assign hwif_out_ext_block_wr_biten = hwif_out.ext_block.wr_biten;

    //--------------------------------------------------------------------------
    // Instantiate the main regblock module
    //--------------------------------------------------------------------------
    regblock i_regblock (
        .clk(clk),
        .rst(rst),
        .s_apb_psel(s_apb_psel),
        .s_apb_penable(s_apb_penable),
        .s_apb_pwrite(s_apb_pwrite),
        .s_apb_pprot(s_apb_pprot),
        .s_apb_paddr(s_apb_paddr),
        .s_apb_pwdata(s_apb_pwdata),
        .s_apb_pstrb(s_apb_pstrb),
        .s_apb_pready(s_apb_pready),
        .s_apb_prdata(s_apb_prdata),
        .s_apb_pslverr(s_apb_pslverr),
        .hwif_in(hwif_in),
        .hwif_out(hwif_out)
    );

endmodule
