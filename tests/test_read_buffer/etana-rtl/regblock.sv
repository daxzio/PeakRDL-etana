// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module regblock (
        input wire clk,
        input wire rst,

        input wire s_apb_psel,
        input wire s_apb_pwrite,
        input wire s_apb_penable,
        input wire [2:0] s_apb_pprot,
        input wire [4:0] s_apb_paddr,
        input wire [7:0] s_apb_pwdata,
        input wire [0:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [7:0] s_apb_prdata,
        output logic s_apb_pslverr,

        input wire [0:0] hwif_in_incr_en,
        input wire [0:0] hwif_in_trigger_sig,
        input wire [0:0] hwif_in_trigger_sig_n,
        output logic [2:0] hwif_out_reg1_f1,
        output logic [2:0] hwif_out_reg1_f2,
        output logic [2:0] hwif_out_reg1_f3,
        output logic [2:0] hwif_out_reg1_f4,
        output logic [2:0] hwif_out_reg1_f5,
        output logic [2:0] hwif_out_reg1_f6,
        output logic [2:0] hwif_out_reg1_f7,
        output logic [2:0] hwif_out_reg1_f8,
        output logic [2:0] hwif_out_reg1_f9,
        output logic [2:0] hwif_out_reg1_fa,
        output logic [2:0] hwif_out_reg1_msb0_fa,
        output logic [2:0] hwif_out_reg1_msb0_f9,
        output logic [2:0] hwif_out_reg1_msb0_f8,
        output logic [2:0] hwif_out_reg1_msb0_f7,
        output logic [2:0] hwif_out_reg1_msb0_f6,
        output logic [2:0] hwif_out_reg1_msb0_f5,
        output logic [2:0] hwif_out_reg1_msb0_f4,
        output logic [2:0] hwif_out_reg1_msb0_f3,
        output logic [2:0] hwif_out_reg1_msb0_f2,
        output logic [2:0] hwif_out_reg1_msb0_f1,
        output logic [4:0] hwif_out_reg2_f1,
        output logic [4:0] hwif_out_reg2_f2,
        output logic [4:0] hwif_out_reg2_f3,
        output logic [4:0] hwif_out_reg2_f4,
        output logic [7:0] hwif_out_g1_r1_f1,
        output logic [7:0] hwif_out_g1_r2_f1,
        output logic [15:0] hwif_out_g2_r1_f1,
        output logic [15:0] hwif_out_g2_r2_f1,
        input wire [7:0] hwif_in_g3_r1_f1,
        input wire [7:0] hwif_in_g3_r2_f1,
        output logic [0:0] hwif_out_g4_trig_trig,
        output logic [7:0] hwif_out_g4_r1_f1,
        output logic [7:0] hwif_out_g4_r2_f1
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [4:0] cpuif_addr;
    logic [7:0] cpuif_wr_data;
    logic [7:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [7:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;


    // Request
    logic is_active;
    always_ff @(posedge clk) begin
        if(rst) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= s_apb_paddr[4:0];
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<1; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    logic [3:0] decoded_reg_strb_reg1;
    logic [3:0] decoded_reg_strb_reg1_msb0;
    logic [3:0] decoded_reg_strb_reg2;
    logic [0:0] decoded_reg_strb_g1_r1;
    logic [0:0] decoded_reg_strb_g1_r2;
    logic [1:0] decoded_reg_strb_g2_r1;
    logic [1:0] decoded_reg_strb_g2_r2;
    logic [0:0] decoded_reg_strb_g3_r1;
    logic [0:0] decoded_reg_strb_g3_r2;
    logic [0:0] decoded_reg_strb_g4_trig;
    logic [0:0] decoded_reg_strb_g4_r1;
    logic [0:0] decoded_reg_strb_g4_r2;
    logic decoded_req;
    logic decoded_req_is_wr;
    /* verilator lint_off UNUSEDSIGNAL */
    logic [7:0] decoded_wr_data;
    logic [7:0] decoded_wr_biten;
    /* verilator lint_on UNUSEDSIGNAL */

    always @(*) begin
        /* verilator lint_off UNUSEDSIGNAL */
        integer next_cpuif_addr;
        /* verilator lint_on UNUSEDSIGNAL */
        decoded_reg_strb_reg1[0] = cpuif_req_masked & (cpuif_addr == 5'h0);
        decoded_reg_strb_reg1[1] = cpuif_req_masked & (cpuif_addr == 5'h1);
        decoded_reg_strb_reg1[2] = cpuif_req_masked & (cpuif_addr == 5'h2);
        decoded_reg_strb_reg1[3] = cpuif_req_masked & (cpuif_addr == 5'h3);
        decoded_reg_strb_reg1_msb0[0] = cpuif_req_masked & (cpuif_addr == 5'h4);
        decoded_reg_strb_reg1_msb0[1] = cpuif_req_masked & (cpuif_addr == 5'h5);
        decoded_reg_strb_reg1_msb0[2] = cpuif_req_masked & (cpuif_addr == 5'h6);
        decoded_reg_strb_reg1_msb0[3] = cpuif_req_masked & (cpuif_addr == 5'h7);
        decoded_reg_strb_reg2[0] = cpuif_req_masked & (cpuif_addr == 5'h8);
        decoded_reg_strb_reg2[1] = cpuif_req_masked & (cpuif_addr == 5'h9);
        decoded_reg_strb_reg2[2] = cpuif_req_masked & (cpuif_addr == 5'ha);
        decoded_reg_strb_reg2[3] = cpuif_req_masked & (cpuif_addr == 5'hb);
        decoded_reg_strb_g1_r1 = cpuif_req_masked & (cpuif_addr == 5'hc);
        decoded_reg_strb_g1_r2 = cpuif_req_masked & (cpuif_addr == 5'hd);
        decoded_reg_strb_g2_r1[0] = cpuif_req_masked & (cpuif_addr == 5'h10);
        decoded_reg_strb_g2_r1[1] = cpuif_req_masked & (cpuif_addr == 5'h11);
        decoded_reg_strb_g2_r2[0] = cpuif_req_masked & (cpuif_addr == 5'h12);
        decoded_reg_strb_g2_r2[1] = cpuif_req_masked & (cpuif_addr == 5'h13);
        decoded_reg_strb_g3_r1 = cpuif_req_masked & (cpuif_addr == 5'h14);
        decoded_reg_strb_g3_r2 = cpuif_req_masked & (cpuif_addr == 5'h15);
        decoded_reg_strb_g4_trig = cpuif_req_masked & (cpuif_addr == 5'h16);
        decoded_reg_strb_g4_r1 = cpuif_req_masked & (cpuif_addr == 5'h17);
        decoded_reg_strb_g4_r2 = cpuif_req_masked & (cpuif_addr == 5'h18);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;


    //--------------------------------------------------------------------------
    // Field storage declarations
    //--------------------------------------------------------------------------

    // Field: regblock.reg1.f1
    logic [2:0] field_storage_reg1_f1_value;
    logic [2:0] field_combo_reg1_f1_next;
    logic field_combo_reg1_f1_load_next;
    logic field_combo_reg1_f1_overflow;
    logic field_combo_reg1_f1_incrthreshold;
    // Field: regblock.reg1.f2
    logic [2:0] field_storage_reg1_f2_value;
    logic [2:0] field_combo_reg1_f2_next;
    logic field_combo_reg1_f2_load_next;
    logic field_combo_reg1_f2_overflow;
    logic field_combo_reg1_f2_incrthreshold;
    // Field: regblock.reg1.f3
    logic [2:0] field_storage_reg1_f3_value;
    logic [2:0] field_combo_reg1_f3_next;
    logic field_combo_reg1_f3_load_next;
    logic field_combo_reg1_f3_overflow;
    logic field_combo_reg1_f3_incrthreshold;
    // Field: regblock.reg1.f4
    logic [2:0] field_storage_reg1_f4_value;
    logic [2:0] field_combo_reg1_f4_next;
    logic field_combo_reg1_f4_load_next;
    logic field_combo_reg1_f4_overflow;
    logic field_combo_reg1_f4_incrthreshold;
    // Field: regblock.reg1.f5
    logic [2:0] field_storage_reg1_f5_value;
    logic [2:0] field_combo_reg1_f5_next;
    logic field_combo_reg1_f5_load_next;
    logic field_combo_reg1_f5_overflow;
    logic field_combo_reg1_f5_incrthreshold;
    // Field: regblock.reg1.f6
    logic [2:0] field_storage_reg1_f6_value;
    logic [2:0] field_combo_reg1_f6_next;
    logic field_combo_reg1_f6_load_next;
    logic field_combo_reg1_f6_overflow;
    logic field_combo_reg1_f6_incrthreshold;
    // Field: regblock.reg1.f7
    logic [2:0] field_storage_reg1_f7_value;
    logic [2:0] field_combo_reg1_f7_next;
    logic field_combo_reg1_f7_load_next;
    logic field_combo_reg1_f7_overflow;
    logic field_combo_reg1_f7_incrthreshold;
    // Field: regblock.reg1.f8
    logic [2:0] field_storage_reg1_f8_value;
    logic [2:0] field_combo_reg1_f8_next;
    logic field_combo_reg1_f8_load_next;
    logic field_combo_reg1_f8_overflow;
    logic field_combo_reg1_f8_incrthreshold;
    // Field: regblock.reg1.f9
    logic [2:0] field_storage_reg1_f9_value;
    logic [2:0] field_combo_reg1_f9_next;
    logic field_combo_reg1_f9_load_next;
    logic field_combo_reg1_f9_overflow;
    logic field_combo_reg1_f9_incrthreshold;
    // Field: regblock.reg1.fa
    logic [2:0] field_storage_reg1_fa_value;
    logic [2:0] field_combo_reg1_fa_next;
    logic field_combo_reg1_fa_load_next;
    logic field_combo_reg1_fa_overflow;
    logic field_combo_reg1_fa_incrthreshold;
    // Field: regblock.reg1_msb0.fa
    logic [2:0] field_storage_reg1_msb0_fa_value;
    logic [2:0] field_combo_reg1_msb0_fa_next;
    logic field_combo_reg1_msb0_fa_load_next;
    logic field_combo_reg1_msb0_fa_overflow;
    logic field_combo_reg1_msb0_fa_incrthreshold;
    // Field: regblock.reg1_msb0.f9
    logic [2:0] field_storage_reg1_msb0_f9_value;
    logic [2:0] field_combo_reg1_msb0_f9_next;
    logic field_combo_reg1_msb0_f9_load_next;
    logic field_combo_reg1_msb0_f9_overflow;
    logic field_combo_reg1_msb0_f9_incrthreshold;
    // Field: regblock.reg1_msb0.f8
    logic [2:0] field_storage_reg1_msb0_f8_value;
    logic [2:0] field_combo_reg1_msb0_f8_next;
    logic field_combo_reg1_msb0_f8_load_next;
    logic field_combo_reg1_msb0_f8_overflow;
    logic field_combo_reg1_msb0_f8_incrthreshold;
    // Field: regblock.reg1_msb0.f7
    logic [2:0] field_storage_reg1_msb0_f7_value;
    logic [2:0] field_combo_reg1_msb0_f7_next;
    logic field_combo_reg1_msb0_f7_load_next;
    logic field_combo_reg1_msb0_f7_overflow;
    logic field_combo_reg1_msb0_f7_incrthreshold;
    // Field: regblock.reg1_msb0.f6
    logic [2:0] field_storage_reg1_msb0_f6_value;
    logic [2:0] field_combo_reg1_msb0_f6_next;
    logic field_combo_reg1_msb0_f6_load_next;
    logic field_combo_reg1_msb0_f6_overflow;
    logic field_combo_reg1_msb0_f6_incrthreshold;
    // Field: regblock.reg1_msb0.f5
    logic [2:0] field_storage_reg1_msb0_f5_value;
    logic [2:0] field_combo_reg1_msb0_f5_next;
    logic field_combo_reg1_msb0_f5_load_next;
    logic field_combo_reg1_msb0_f5_overflow;
    logic field_combo_reg1_msb0_f5_incrthreshold;
    // Field: regblock.reg1_msb0.f4
    logic [2:0] field_storage_reg1_msb0_f4_value;
    logic [2:0] field_combo_reg1_msb0_f4_next;
    logic field_combo_reg1_msb0_f4_load_next;
    logic field_combo_reg1_msb0_f4_overflow;
    logic field_combo_reg1_msb0_f4_incrthreshold;
    // Field: regblock.reg1_msb0.f3
    logic [2:0] field_storage_reg1_msb0_f3_value;
    logic [2:0] field_combo_reg1_msb0_f3_next;
    logic field_combo_reg1_msb0_f3_load_next;
    logic field_combo_reg1_msb0_f3_overflow;
    logic field_combo_reg1_msb0_f3_incrthreshold;
    // Field: regblock.reg1_msb0.f2
    logic [2:0] field_storage_reg1_msb0_f2_value;
    logic [2:0] field_combo_reg1_msb0_f2_next;
    logic field_combo_reg1_msb0_f2_load_next;
    logic field_combo_reg1_msb0_f2_overflow;
    logic field_combo_reg1_msb0_f2_incrthreshold;
    // Field: regblock.reg1_msb0.f1
    logic [2:0] field_storage_reg1_msb0_f1_value;
    logic [2:0] field_combo_reg1_msb0_f1_next;
    logic field_combo_reg1_msb0_f1_load_next;
    logic field_combo_reg1_msb0_f1_overflow;
    logic field_combo_reg1_msb0_f1_incrthreshold;
    // Field: regblock.reg2.f1
    logic [4:0] field_storage_reg2_f1_value;
    logic [4:0] field_combo_reg2_f1_next;
    logic field_combo_reg2_f1_load_next;
    logic field_combo_reg2_f1_overflow;
    logic field_combo_reg2_f1_incrthreshold;
    // Field: regblock.reg2.f2
    logic [4:0] field_storage_reg2_f2_value;
    logic [4:0] field_combo_reg2_f2_next;
    logic field_combo_reg2_f2_load_next;
    logic field_combo_reg2_f2_overflow;
    logic field_combo_reg2_f2_incrthreshold;
    // Field: regblock.reg2.f3
    logic [4:0] field_storage_reg2_f3_value;
    logic [4:0] field_combo_reg2_f3_next;
    logic field_combo_reg2_f3_load_next;
    logic field_combo_reg2_f3_overflow;
    logic field_combo_reg2_f3_incrthreshold;
    // Field: regblock.reg2.f4
    logic [4:0] field_storage_reg2_f4_value;
    logic [4:0] field_combo_reg2_f4_next;
    logic field_combo_reg2_f4_load_next;
    logic field_combo_reg2_f4_overflow;
    logic field_combo_reg2_f4_incrthreshold;
    // Field: regblock.g1_r1.f1
    logic [7:0] field_storage_g1_r1_f1_value;
    logic [7:0] field_combo_g1_r1_f1_next;
    logic field_combo_g1_r1_f1_load_next;
    logic field_combo_g1_r1_f1_overflow;
    logic field_combo_g1_r1_f1_incrthreshold;
    // Field: regblock.g1_r2.f1
    logic [7:0] field_storage_g1_r2_f1_value;
    logic [7:0] field_combo_g1_r2_f1_next;
    logic field_combo_g1_r2_f1_load_next;
    logic field_combo_g1_r2_f1_overflow;
    logic field_combo_g1_r2_f1_incrthreshold;
    // Field: regblock.g2_r1.f1
    logic [15:0] field_storage_g2_r1_f1_value;
    logic [15:0] field_combo_g2_r1_f1_next;
    logic field_combo_g2_r1_f1_load_next;
    logic field_combo_g2_r1_f1_overflow;
    logic field_combo_g2_r1_f1_incrthreshold;
    // Field: regblock.g2_r2.f1
    logic [15:0] field_storage_g2_r2_f1_value;
    logic [15:0] field_combo_g2_r2_f1_next;
    logic field_combo_g2_r2_f1_load_next;
    logic field_combo_g2_r2_f1_overflow;
    logic field_combo_g2_r2_f1_incrthreshold;
    // Field: regblock.g4_trig.trig
    logic [0:0] field_storage_g4_trig_trig_value;
    logic [0:0] field_combo_g4_trig_trig_next;
    logic field_combo_g4_trig_trig_load_next;
    // Field: regblock.g4_r1.f1
    logic [7:0] field_storage_g4_r1_f1_value;
    logic [7:0] field_combo_g4_r1_f1_next;
    logic field_combo_g4_r1_f1_load_next;
    logic field_combo_g4_r1_f1_overflow;
    logic field_combo_g4_r1_f1_incrthreshold;
    // Field: regblock.g4_r2.f1
    logic [7:0] field_storage_g4_r2_f1_value;
    logic [7:0] field_combo_g4_r2_f1_next;
    logic field_combo_g4_r2_f1_load_next;
    logic field_combo_g4_r2_f1_overflow;
    logic field_combo_g4_r2_f1_incrthreshold;
    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_f1_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_reg1_f1_overflow = (((4)'(next_c) + (4)'(3'h1)) > 4'h7);
            next_c = next_c + (3)'(3'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg1_f1_overflow = '0;
        end
        field_combo_reg1_f1_incrthreshold = (field_storage_reg1_f1_value >= 3'h7);
        field_combo_reg1_f1_next = next_c;
        field_combo_reg1_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_f1_value <= 3'h0;
        end else if(field_combo_reg1_f1_load_next) begin
            field_storage_reg1_f1_value <= field_combo_reg1_f1_next;
        end
    end
    assign hwif_out_reg1_f1 = field_storage_reg1_f1_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_f2_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_reg1_f2_overflow = (((4)'(next_c) + (4)'(3'h1)) > 4'h7);
            next_c = next_c + (3)'(3'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg1_f2_overflow = '0;
        end
        field_combo_reg1_f2_incrthreshold = (field_storage_reg1_f2_value >= 3'h7);
        field_combo_reg1_f2_next = next_c;
        field_combo_reg1_f2_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_f2_value <= 3'h0;
        end else if(field_combo_reg1_f2_load_next) begin
            field_storage_reg1_f2_value <= field_combo_reg1_f2_next;
        end
    end
    assign hwif_out_reg1_f2 = field_storage_reg1_f2_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_f3_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_reg1_f3_overflow = (((4)'(next_c) + (4)'(3'h1)) > 4'h7);
            next_c = next_c + (3)'(3'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg1_f3_overflow = '0;
        end
        field_combo_reg1_f3_incrthreshold = (field_storage_reg1_f3_value >= 3'h7);
        field_combo_reg1_f3_next = next_c;
        field_combo_reg1_f3_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_f3_value <= 3'h0;
        end else if(field_combo_reg1_f3_load_next) begin
            field_storage_reg1_f3_value <= field_combo_reg1_f3_next;
        end
    end
    assign hwif_out_reg1_f3 = field_storage_reg1_f3_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_f4_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_reg1_f4_overflow = (((4)'(next_c) + (4)'(3'h1)) > 4'h7);
            next_c = next_c + (3)'(3'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg1_f4_overflow = '0;
        end
        field_combo_reg1_f4_incrthreshold = (field_storage_reg1_f4_value >= 3'h7);
        field_combo_reg1_f4_next = next_c;
        field_combo_reg1_f4_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_f4_value <= 3'h0;
        end else if(field_combo_reg1_f4_load_next) begin
            field_storage_reg1_f4_value <= field_combo_reg1_f4_next;
        end
    end
    assign hwif_out_reg1_f4 = field_storage_reg1_f4_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_f5_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_reg1_f5_overflow = (((4)'(next_c) + (4)'(3'h1)) > 4'h7);
            next_c = next_c + (3)'(3'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg1_f5_overflow = '0;
        end
        field_combo_reg1_f5_incrthreshold = (field_storage_reg1_f5_value >= 3'h7);
        field_combo_reg1_f5_next = next_c;
        field_combo_reg1_f5_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_f5_value <= 3'h0;
        end else if(field_combo_reg1_f5_load_next) begin
            field_storage_reg1_f5_value <= field_combo_reg1_f5_next;
        end
    end
    assign hwif_out_reg1_f5 = field_storage_reg1_f5_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_f6_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_reg1_f6_overflow = (((4)'(next_c) + (4)'(3'h1)) > 4'h7);
            next_c = next_c + (3)'(3'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg1_f6_overflow = '0;
        end
        field_combo_reg1_f6_incrthreshold = (field_storage_reg1_f6_value >= 3'h7);
        field_combo_reg1_f6_next = next_c;
        field_combo_reg1_f6_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_f6_value <= 3'h0;
        end else if(field_combo_reg1_f6_load_next) begin
            field_storage_reg1_f6_value <= field_combo_reg1_f6_next;
        end
    end
    assign hwif_out_reg1_f6 = field_storage_reg1_f6_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_f7_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_reg1_f7_overflow = (((4)'(next_c) + (4)'(3'h1)) > 4'h7);
            next_c = next_c + (3)'(3'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg1_f7_overflow = '0;
        end
        field_combo_reg1_f7_incrthreshold = (field_storage_reg1_f7_value >= 3'h7);
        field_combo_reg1_f7_next = next_c;
        field_combo_reg1_f7_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_f7_value <= 3'h0;
        end else if(field_combo_reg1_f7_load_next) begin
            field_storage_reg1_f7_value <= field_combo_reg1_f7_next;
        end
    end
    assign hwif_out_reg1_f7 = field_storage_reg1_f7_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_f8_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_reg1_f8_overflow = (((4)'(next_c) + (4)'(3'h1)) > 4'h7);
            next_c = next_c + (3)'(3'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg1_f8_overflow = '0;
        end
        field_combo_reg1_f8_incrthreshold = (field_storage_reg1_f8_value >= 3'h7);
        field_combo_reg1_f8_next = next_c;
        field_combo_reg1_f8_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_f8_value <= 3'h0;
        end else if(field_combo_reg1_f8_load_next) begin
            field_storage_reg1_f8_value <= field_combo_reg1_f8_next;
        end
    end
    assign hwif_out_reg1_f8 = field_storage_reg1_f8_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_f9_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_reg1_f9_overflow = (((4)'(next_c) + (4)'(3'h1)) > 4'h7);
            next_c = next_c + (3)'(3'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg1_f9_overflow = '0;
        end
        field_combo_reg1_f9_incrthreshold = (field_storage_reg1_f9_value >= 3'h7);
        field_combo_reg1_f9_next = next_c;
        field_combo_reg1_f9_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_f9_value <= 3'h0;
        end else if(field_combo_reg1_f9_load_next) begin
            field_storage_reg1_f9_value <= field_combo_reg1_f9_next;
        end
    end
    assign hwif_out_reg1_f9 = field_storage_reg1_f9_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_fa_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_reg1_fa_overflow = (((4)'(next_c) + (4)'(3'h1)) > 4'h7);
            next_c = next_c + (3)'(3'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg1_fa_overflow = '0;
        end
        field_combo_reg1_fa_incrthreshold = (field_storage_reg1_fa_value >= 3'h7);
        field_combo_reg1_fa_next = next_c;
        field_combo_reg1_fa_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_fa_value <= 3'h0;
        end else if(field_combo_reg1_fa_load_next) begin
            field_storage_reg1_fa_value <= field_combo_reg1_fa_next;
        end
    end
    assign hwif_out_reg1_fa = field_storage_reg1_fa_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_msb0_fa_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_reg1_msb0_fa_overflow = (((4)'(next_c) + (4)'(3'h1)) > 4'h7);
            next_c = next_c + (3)'(3'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg1_msb0_fa_overflow = '0;
        end
        field_combo_reg1_msb0_fa_incrthreshold = (field_storage_reg1_msb0_fa_value >= 3'h7);
        field_combo_reg1_msb0_fa_next = next_c;
        field_combo_reg1_msb0_fa_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_msb0_fa_value <= 3'h0;
        end else if(field_combo_reg1_msb0_fa_load_next) begin
            field_storage_reg1_msb0_fa_value <= field_combo_reg1_msb0_fa_next;
        end
    end
    assign hwif_out_reg1_msb0_fa = field_storage_reg1_msb0_fa_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_msb0_f9_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_reg1_msb0_f9_overflow = (((4)'(next_c) + (4)'(3'h1)) > 4'h7);
            next_c = next_c + (3)'(3'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg1_msb0_f9_overflow = '0;
        end
        field_combo_reg1_msb0_f9_incrthreshold = (field_storage_reg1_msb0_f9_value >= 3'h7);
        field_combo_reg1_msb0_f9_next = next_c;
        field_combo_reg1_msb0_f9_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_msb0_f9_value <= 3'h0;
        end else if(field_combo_reg1_msb0_f9_load_next) begin
            field_storage_reg1_msb0_f9_value <= field_combo_reg1_msb0_f9_next;
        end
    end
    assign hwif_out_reg1_msb0_f9 = field_storage_reg1_msb0_f9_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_msb0_f8_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_reg1_msb0_f8_overflow = (((4)'(next_c) + (4)'(3'h1)) > 4'h7);
            next_c = next_c + (3)'(3'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg1_msb0_f8_overflow = '0;
        end
        field_combo_reg1_msb0_f8_incrthreshold = (field_storage_reg1_msb0_f8_value >= 3'h7);
        field_combo_reg1_msb0_f8_next = next_c;
        field_combo_reg1_msb0_f8_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_msb0_f8_value <= 3'h0;
        end else if(field_combo_reg1_msb0_f8_load_next) begin
            field_storage_reg1_msb0_f8_value <= field_combo_reg1_msb0_f8_next;
        end
    end
    assign hwif_out_reg1_msb0_f8 = field_storage_reg1_msb0_f8_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_msb0_f7_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_reg1_msb0_f7_overflow = (((4)'(next_c) + (4)'(3'h1)) > 4'h7);
            next_c = next_c + (3)'(3'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg1_msb0_f7_overflow = '0;
        end
        field_combo_reg1_msb0_f7_incrthreshold = (field_storage_reg1_msb0_f7_value >= 3'h7);
        field_combo_reg1_msb0_f7_next = next_c;
        field_combo_reg1_msb0_f7_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_msb0_f7_value <= 3'h0;
        end else if(field_combo_reg1_msb0_f7_load_next) begin
            field_storage_reg1_msb0_f7_value <= field_combo_reg1_msb0_f7_next;
        end
    end
    assign hwif_out_reg1_msb0_f7 = field_storage_reg1_msb0_f7_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_msb0_f6_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_reg1_msb0_f6_overflow = (((4)'(next_c) + (4)'(3'h1)) > 4'h7);
            next_c = next_c + (3)'(3'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg1_msb0_f6_overflow = '0;
        end
        field_combo_reg1_msb0_f6_incrthreshold = (field_storage_reg1_msb0_f6_value >= 3'h7);
        field_combo_reg1_msb0_f6_next = next_c;
        field_combo_reg1_msb0_f6_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_msb0_f6_value <= 3'h0;
        end else if(field_combo_reg1_msb0_f6_load_next) begin
            field_storage_reg1_msb0_f6_value <= field_combo_reg1_msb0_f6_next;
        end
    end
    assign hwif_out_reg1_msb0_f6 = field_storage_reg1_msb0_f6_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_msb0_f5_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_reg1_msb0_f5_overflow = (((4)'(next_c) + (4)'(3'h1)) > 4'h7);
            next_c = next_c + (3)'(3'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg1_msb0_f5_overflow = '0;
        end
        field_combo_reg1_msb0_f5_incrthreshold = (field_storage_reg1_msb0_f5_value >= 3'h7);
        field_combo_reg1_msb0_f5_next = next_c;
        field_combo_reg1_msb0_f5_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_msb0_f5_value <= 3'h0;
        end else if(field_combo_reg1_msb0_f5_load_next) begin
            field_storage_reg1_msb0_f5_value <= field_combo_reg1_msb0_f5_next;
        end
    end
    assign hwif_out_reg1_msb0_f5 = field_storage_reg1_msb0_f5_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_msb0_f4_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_reg1_msb0_f4_overflow = (((4)'(next_c) + (4)'(3'h1)) > 4'h7);
            next_c = next_c + (3)'(3'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg1_msb0_f4_overflow = '0;
        end
        field_combo_reg1_msb0_f4_incrthreshold = (field_storage_reg1_msb0_f4_value >= 3'h7);
        field_combo_reg1_msb0_f4_next = next_c;
        field_combo_reg1_msb0_f4_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_msb0_f4_value <= 3'h0;
        end else if(field_combo_reg1_msb0_f4_load_next) begin
            field_storage_reg1_msb0_f4_value <= field_combo_reg1_msb0_f4_next;
        end
    end
    assign hwif_out_reg1_msb0_f4 = field_storage_reg1_msb0_f4_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_msb0_f3_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_reg1_msb0_f3_overflow = (((4)'(next_c) + (4)'(3'h1)) > 4'h7);
            next_c = next_c + (3)'(3'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg1_msb0_f3_overflow = '0;
        end
        field_combo_reg1_msb0_f3_incrthreshold = (field_storage_reg1_msb0_f3_value >= 3'h7);
        field_combo_reg1_msb0_f3_next = next_c;
        field_combo_reg1_msb0_f3_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_msb0_f3_value <= 3'h0;
        end else if(field_combo_reg1_msb0_f3_load_next) begin
            field_storage_reg1_msb0_f3_value <= field_combo_reg1_msb0_f3_next;
        end
    end
    assign hwif_out_reg1_msb0_f3 = field_storage_reg1_msb0_f3_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_msb0_f2_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_reg1_msb0_f2_overflow = (((4)'(next_c) + (4)'(3'h1)) > 4'h7);
            next_c = next_c + (3)'(3'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg1_msb0_f2_overflow = '0;
        end
        field_combo_reg1_msb0_f2_incrthreshold = (field_storage_reg1_msb0_f2_value >= 3'h7);
        field_combo_reg1_msb0_f2_next = next_c;
        field_combo_reg1_msb0_f2_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_msb0_f2_value <= 3'h0;
        end else if(field_combo_reg1_msb0_f2_load_next) begin
            field_storage_reg1_msb0_f2_value <= field_combo_reg1_msb0_f2_next;
        end
    end
    assign hwif_out_reg1_msb0_f2 = field_storage_reg1_msb0_f2_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg1_msb0_f1_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_reg1_msb0_f1_overflow = (((4)'(next_c) + (4)'(3'h1)) > 4'h7);
            next_c = next_c + (3)'(3'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg1_msb0_f1_overflow = '0;
        end
        field_combo_reg1_msb0_f1_incrthreshold = (field_storage_reg1_msb0_f1_value >= 3'h7);
        field_combo_reg1_msb0_f1_next = next_c;
        field_combo_reg1_msb0_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg1_msb0_f1_value <= 3'h0;
        end else if(field_combo_reg1_msb0_f1_load_next) begin
            field_storage_reg1_msb0_f1_value <= field_combo_reg1_msb0_f1_next;
        end
    end
    assign hwif_out_reg1_msb0_f1 = field_storage_reg1_msb0_f1_value;
    // always_comb begin
    always @(*) begin
        logic [4:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg2_f1_value;
        load_next_c = '0;
        if(decoded_reg_strb_reg2[0] && !decoded_req_is_wr) begin // SW clear on read
            next_c = '0;
            load_next_c = '1;
        end
        if(hwif_in_incr_en) begin // increment
            field_combo_reg2_f1_overflow = (((6)'(next_c) + (6)'(5'h1)) > 6'h1f);
            next_c = next_c + (5)'(5'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg2_f1_overflow = '0;
        end
        field_combo_reg2_f1_incrthreshold = (field_storage_reg2_f1_value >= 5'h1f);
        field_combo_reg2_f1_next = next_c;
        field_combo_reg2_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg2_f1_value <= 5'h0;
        end else if(field_combo_reg2_f1_load_next) begin
            field_storage_reg2_f1_value <= field_combo_reg2_f1_next;
        end
    end
    assign hwif_out_reg2_f1 = field_storage_reg2_f1_value;
    // always_comb begin
    always @(*) begin
        logic [4:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg2_f2_value;
        load_next_c = '0;
        if(decoded_reg_strb_reg2[0] && !decoded_req_is_wr) begin // SW clear on read
            next_c = '0;
            load_next_c = '1;
        end
        if(hwif_in_incr_en) begin // increment
            field_combo_reg2_f2_overflow = (((6)'(next_c) + (6)'(5'h1)) > 6'h1f);
            next_c = next_c + (5)'(5'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg2_f2_overflow = '0;
        end
        field_combo_reg2_f2_incrthreshold = (field_storage_reg2_f2_value >= 5'h1f);
        field_combo_reg2_f2_next = next_c;
        field_combo_reg2_f2_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg2_f2_value <= 5'h0;
        end else if(field_combo_reg2_f2_load_next) begin
            field_storage_reg2_f2_value <= field_combo_reg2_f2_next;
        end
    end
    assign hwif_out_reg2_f2 = field_storage_reg2_f2_value;
    // always_comb begin
    always @(*) begin
        logic [4:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg2_f3_value;
        load_next_c = '0;
        if(decoded_reg_strb_reg2[0] && !decoded_req_is_wr) begin // SW clear on read
            next_c = '0;
            load_next_c = '1;
        end
        if(hwif_in_incr_en) begin // increment
            field_combo_reg2_f3_overflow = (((6)'(next_c) + (6)'(5'h1)) > 6'h1f);
            next_c = next_c + (5)'(5'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg2_f3_overflow = '0;
        end
        field_combo_reg2_f3_incrthreshold = (field_storage_reg2_f3_value >= 5'h1f);
        field_combo_reg2_f3_next = next_c;
        field_combo_reg2_f3_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg2_f3_value <= 5'h0;
        end else if(field_combo_reg2_f3_load_next) begin
            field_storage_reg2_f3_value <= field_combo_reg2_f3_next;
        end
    end
    assign hwif_out_reg2_f3 = field_storage_reg2_f3_value;
    // always_comb begin
    always @(*) begin
        logic [4:0] next_c;
        logic load_next_c;
        next_c = field_storage_reg2_f4_value;
        load_next_c = '0;
        if(decoded_reg_strb_reg2[0] && !decoded_req_is_wr) begin // SW clear on read
            next_c = '0;
            load_next_c = '1;
        end
        if(hwif_in_incr_en) begin // increment
            field_combo_reg2_f4_overflow = (((6)'(next_c) + (6)'(5'h1)) > 6'h1f);
            next_c = next_c + (5)'(5'h1);
            load_next_c = '1;
        end else begin
            field_combo_reg2_f4_overflow = '0;
        end
        field_combo_reg2_f4_incrthreshold = (field_storage_reg2_f4_value >= 5'h1f);
        field_combo_reg2_f4_next = next_c;
        field_combo_reg2_f4_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_reg2_f4_value <= 5'h0;
        end else if(field_combo_reg2_f4_load_next) begin
            field_storage_reg2_f4_value <= field_combo_reg2_f4_next;
        end
    end
    assign hwif_out_reg2_f4 = field_storage_reg2_f4_value;
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_g1_r1_f1_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_g1_r1_f1_overflow = (((9)'(next_c) + (9)'(8'h1)) > 9'hff);
            next_c = next_c + (8)'(8'h1);
            load_next_c = '1;
        end else begin
            field_combo_g1_r1_f1_overflow = '0;
        end
        field_combo_g1_r1_f1_incrthreshold = (field_storage_g1_r1_f1_value >= 8'hff);
        field_combo_g1_r1_f1_next = next_c;
        field_combo_g1_r1_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_g1_r1_f1_value <= 8'h0;
        end else if(field_combo_g1_r1_f1_load_next) begin
            field_storage_g1_r1_f1_value <= field_combo_g1_r1_f1_next;
        end
    end
    assign hwif_out_g1_r1_f1 = field_storage_g1_r1_f1_value;
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_g1_r2_f1_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_g1_r2_f1_overflow = (((9)'(next_c) + (9)'(8'h1)) > 9'hff);
            next_c = next_c + (8)'(8'h1);
            load_next_c = '1;
        end else begin
            field_combo_g1_r2_f1_overflow = '0;
        end
        field_combo_g1_r2_f1_incrthreshold = (field_storage_g1_r2_f1_value >= 8'hff);
        field_combo_g1_r2_f1_next = next_c;
        field_combo_g1_r2_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_g1_r2_f1_value <= 8'h0;
        end else if(field_combo_g1_r2_f1_load_next) begin
            field_storage_g1_r2_f1_value <= field_combo_g1_r2_f1_next;
        end
    end
    assign hwif_out_g1_r2_f1 = field_storage_g1_r2_f1_value;
    // always_comb begin
    always @(*) begin
        logic [15:0] next_c;
        logic load_next_c;
        next_c = field_storage_g2_r1_f1_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_g2_r1_f1_overflow = (((17)'(next_c) + (17)'(16'h1)) > 17'hffff);
            next_c = next_c + (16)'(16'h1);
            load_next_c = '1;
        end else begin
            field_combo_g2_r1_f1_overflow = '0;
        end
        field_combo_g2_r1_f1_incrthreshold = (field_storage_g2_r1_f1_value >= 16'hffff);
        field_combo_g2_r1_f1_next = next_c;
        field_combo_g2_r1_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_g2_r1_f1_value <= 16'haaaa;
        end else if(field_combo_g2_r1_f1_load_next) begin
            field_storage_g2_r1_f1_value <= field_combo_g2_r1_f1_next;
        end
    end
    assign hwif_out_g2_r1_f1 = field_storage_g2_r1_f1_value;
    // always_comb begin
    always @(*) begin
        logic [15:0] next_c;
        logic load_next_c;
        next_c = field_storage_g2_r2_f1_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_g2_r2_f1_overflow = (((17)'(next_c) + (17)'(16'h1)) > 17'hffff);
            next_c = next_c + (16)'(16'h1);
            load_next_c = '1;
        end else begin
            field_combo_g2_r2_f1_overflow = '0;
        end
        field_combo_g2_r2_f1_incrthreshold = (field_storage_g2_r2_f1_value >= 16'hffff);
        field_combo_g2_r2_f1_next = next_c;
        field_combo_g2_r2_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_g2_r2_f1_value <= 16'haaaa;
        end else if(field_combo_g2_r2_f1_load_next) begin
            field_storage_g2_r2_f1_value <= field_combo_g2_r2_f1_next;
        end
    end
    assign hwif_out_g2_r2_f1 = field_storage_g2_r2_f1_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_g4_trig_trig_value;
        load_next_c = '0;
        if(decoded_reg_strb_g4_trig && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_g4_trig_trig_value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo_g4_trig_trig_next = next_c;
        field_combo_g4_trig_trig_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_g4_trig_trig_value <= 1'h0;
        end else if(field_combo_g4_trig_trig_load_next) begin
            field_storage_g4_trig_trig_value <= field_combo_g4_trig_trig_next;
        end
    end
    assign hwif_out_g4_trig_trig = field_storage_g4_trig_trig_value;
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_g4_r1_f1_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_g4_r1_f1_overflow = (((9)'(next_c) + (9)'(8'h1)) > 9'hff);
            next_c = next_c + (8)'(8'h1);
            load_next_c = '1;
        end else begin
            field_combo_g4_r1_f1_overflow = '0;
        end
        field_combo_g4_r1_f1_incrthreshold = (field_storage_g4_r1_f1_value >= 8'hff);
        field_combo_g4_r1_f1_next = next_c;
        field_combo_g4_r1_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_g4_r1_f1_value <= 8'h0;
        end else if(field_combo_g4_r1_f1_load_next) begin
            field_storage_g4_r1_f1_value <= field_combo_g4_r1_f1_next;
        end
    end
    assign hwif_out_g4_r1_f1 = field_storage_g4_r1_f1_value;
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_g4_r2_f1_value;
        load_next_c = '0;

        if(hwif_in_incr_en) begin // increment
            field_combo_g4_r2_f1_overflow = (((9)'(next_c) + (9)'(8'h1)) > 9'hff);
            next_c = next_c + (8)'(8'h1);
            load_next_c = '1;
        end else begin
            field_combo_g4_r2_f1_overflow = '0;
        end
        field_combo_g4_r2_f1_incrthreshold = (field_storage_g4_r2_f1_value >= 8'hff);
        field_combo_g4_r2_f1_next = next_c;
        field_combo_g4_r2_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_g4_r2_f1_value <= 8'h0;
        end else if(field_combo_g4_r2_f1_load_next) begin
            field_storage_g4_r2_f1_value <= field_combo_g4_r2_f1_next;
        end
    end
    assign hwif_out_g4_r2_f1 = field_storage_g4_r2_f1_value;

    //--------------------------------------------------------------------------
    // Read double-buffers
    //--------------------------------------------------------------------------

    logic [31:0] rbuf_storage_reg1;
    always_ff @(posedge clk) begin
        if(decoded_reg_strb_reg1[0] && !decoded_req_is_wr) begin
            rbuf_storage_reg1[2:0] <= field_storage_reg1_f1_value;
            rbuf_storage_reg1[5:3] <= field_storage_reg1_f2_value;
            rbuf_storage_reg1[8:6] <= field_storage_reg1_f3_value;
            rbuf_storage_reg1[11:9] <= field_storage_reg1_f4_value;
            rbuf_storage_reg1[14:12] <= field_storage_reg1_f5_value;
            rbuf_storage_reg1[17:15] <= field_storage_reg1_f6_value;
            rbuf_storage_reg1[20:18] <= field_storage_reg1_f7_value;
            rbuf_storage_reg1[23:21] <= field_storage_reg1_f8_value;
            rbuf_storage_reg1[26:24] <= field_storage_reg1_f9_value;
            rbuf_storage_reg1[29:27] <= field_storage_reg1_fa_value;
            rbuf_storage_reg1[31:30] <= '0;
        end
    end
    logic [31:0] rbuf_storage_reg1_msb0;
    always_ff @(posedge clk) begin
        if(decoded_reg_strb_reg1_msb0[0] && !decoded_req_is_wr) begin
            rbuf_storage_reg1_msb0[0:0] <= '0;
            rbuf_storage_reg1_msb0[3:1] <= {field_storage_reg1_msb0_fa_value[0], field_storage_reg1_msb0_fa_value[1], field_storage_reg1_msb0_fa_value[2]};
            rbuf_storage_reg1_msb0[6:4] <= {field_storage_reg1_msb0_f9_value[0], field_storage_reg1_msb0_f9_value[1], field_storage_reg1_msb0_f9_value[2]};
            rbuf_storage_reg1_msb0[9:7] <= {field_storage_reg1_msb0_f8_value[0], field_storage_reg1_msb0_f8_value[1], field_storage_reg1_msb0_f8_value[2]};
            rbuf_storage_reg1_msb0[12:10] <= {field_storage_reg1_msb0_f7_value[0], field_storage_reg1_msb0_f7_value[1], field_storage_reg1_msb0_f7_value[2]};
            rbuf_storage_reg1_msb0[15:13] <= {field_storage_reg1_msb0_f6_value[0], field_storage_reg1_msb0_f6_value[1], field_storage_reg1_msb0_f6_value[2]};
            rbuf_storage_reg1_msb0[18:16] <= {field_storage_reg1_msb0_f5_value[0], field_storage_reg1_msb0_f5_value[1], field_storage_reg1_msb0_f5_value[2]};
            rbuf_storage_reg1_msb0[21:19] <= {field_storage_reg1_msb0_f4_value[0], field_storage_reg1_msb0_f4_value[1], field_storage_reg1_msb0_f4_value[2]};
            rbuf_storage_reg1_msb0[24:22] <= {field_storage_reg1_msb0_f3_value[0], field_storage_reg1_msb0_f3_value[1], field_storage_reg1_msb0_f3_value[2]};
            rbuf_storage_reg1_msb0[27:25] <= {field_storage_reg1_msb0_f2_value[0], field_storage_reg1_msb0_f2_value[1], field_storage_reg1_msb0_f2_value[2]};
            rbuf_storage_reg1_msb0[30:28] <= {field_storage_reg1_msb0_f1_value[0], field_storage_reg1_msb0_f1_value[1], field_storage_reg1_msb0_f1_value[2]};
            rbuf_storage_reg1_msb0[31:31] <= '0;
        end
    end
    logic [31:0] rbuf_storage_reg2;
    always_ff @(posedge clk) begin
        if(decoded_reg_strb_reg2[0] && !decoded_req_is_wr) begin
            rbuf_storage_reg2[4:0] <= field_storage_reg2_f1_value;
            rbuf_storage_reg2[9:5] <= '0;
            rbuf_storage_reg2[14:10] <= field_storage_reg2_f2_value;
            rbuf_storage_reg2[21:15] <= '0;
            rbuf_storage_reg2[26:22] <= field_storage_reg2_f3_value;
            rbuf_storage_reg2[31:27] <= field_storage_reg2_f4_value;
        end
    end
    logic [7:0] rbuf_storage_g1_r1;
    always_ff @(posedge clk) begin
        if(decoded_reg_strb_g1_r1 && !decoded_req_is_wr) begin
            rbuf_storage_g1_r1[7:0] <= field_storage_g1_r1_f1_value;
        end
    end
    logic [7:0] rbuf_storage_g1_r2;
    always_ff @(posedge clk) begin
        if(decoded_reg_strb_g1_r1 && !decoded_req_is_wr) begin
            rbuf_storage_g1_r2[7:0] <= field_storage_g1_r2_f1_value;
        end
    end
    logic [15:0] rbuf_storage_g2_r1;
    always_ff @(posedge clk) begin
        if(decoded_reg_strb_g2_r1[0] && !decoded_req_is_wr) begin
            rbuf_storage_g2_r1[15:0] <= field_storage_g2_r1_f1_value;
        end
    end
    logic [15:0] rbuf_storage_g2_r2;
    always_ff @(posedge clk) begin
        if(decoded_reg_strb_g2_r1[0] && !decoded_req_is_wr) begin
            rbuf_storage_g2_r2[15:0] <= field_storage_g2_r2_f1_value;
        end
    end
    logic [7:0] rbuf_storage_g3_r1;
    always_ff @(posedge clk) begin
        if(hwif_in_trigger_sig) begin
            rbuf_storage_g3_r1[7:0] <= hwif_in_g3_r1_f1;
        end
    end
    logic [7:0] rbuf_storage_g3_r2;
    always_ff @(posedge clk) begin
        if(~hwif_in_trigger_sig_n) begin
            rbuf_storage_g3_r2[7:0] <= hwif_in_g3_r2_f1;
        end
    end
    logic [7:0] rbuf_storage_g4_r1;
    always_ff @(posedge clk) begin
        if(field_storage_g4_trig_trig_value) begin
            rbuf_storage_g4_r1[7:0] <= field_storage_g4_r1_f1_value;
        end
    end
    logic [7:0] rbuf_storage_g4_r2;
    always_ff @(posedge clk) begin
        if(decoded_reg_strb_g4_trig && decoded_req_is_wr && (|(decoded_wr_biten[0:0]))) begin
            rbuf_storage_g4_r2[7:0] <= field_storage_g4_r2_f1_value;
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

//--------------------------------------------------------------------------
// Readback
//--------------------------------------------------------------------------
    logic readback_external_rd_ack;
    assign readback_external_rd_ack = 0;

    logic readback_err;
    logic readback_done;
    logic [7:0] readback_data;

    // Assign readback values to a flattened array
    logic [7:0] readback_array[22];
    assign readback_array[0][2:0] = (decoded_reg_strb_reg1[0] && !decoded_req_is_wr) ? field_storage_reg1_f1_value : '0;
    assign readback_array[0][5:3] = (decoded_reg_strb_reg1[0] && !decoded_req_is_wr) ? field_storage_reg1_f2_value : '0;
    assign readback_array[0][7:6] = (decoded_reg_strb_reg1[0] && !decoded_req_is_wr) ? field_storage_reg1_f3_value[1:0] : '0;
    assign readback_array[1] = (decoded_reg_strb_reg1[1] && !decoded_req_is_wr) ? rbuf_storage_reg1[15:8] : '0;
    assign readback_array[2] = (decoded_reg_strb_reg1[2] && !decoded_req_is_wr) ? rbuf_storage_reg1[23:16] : '0;
    assign readback_array[3] = (decoded_reg_strb_reg1[3] && !decoded_req_is_wr) ? rbuf_storage_reg1[31:24] : '0;
    assign readback_array[4][0:0] = '0;
    assign readback_array[4][3:1] = (decoded_reg_strb_reg1_msb0[0] && !decoded_req_is_wr) ? {field_storage_reg1_msb0_fa_value[0], field_storage_reg1_msb0_fa_value[1], field_storage_reg1_msb0_fa_value[2]} : '0;
    assign readback_array[4][6:4] = (decoded_reg_strb_reg1_msb0[0] && !decoded_req_is_wr) ? {field_storage_reg1_msb0_f9_value[0], field_storage_reg1_msb0_f9_value[1], field_storage_reg1_msb0_f9_value[2]} : '0;
    assign readback_array[4][7:7] = (decoded_reg_strb_reg1_msb0[0] && !decoded_req_is_wr) ? field_storage_reg1_msb0_f8_value[2] : '0;
    assign readback_array[5] = (decoded_reg_strb_reg1_msb0[1] && !decoded_req_is_wr) ? rbuf_storage_reg1_msb0[15:8] : '0;
    assign readback_array[6] = (decoded_reg_strb_reg1_msb0[2] && !decoded_req_is_wr) ? rbuf_storage_reg1_msb0[23:16] : '0;
    assign readback_array[7] = (decoded_reg_strb_reg1_msb0[3] && !decoded_req_is_wr) ? rbuf_storage_reg1_msb0[31:24] : '0;
    assign readback_array[8][4:0] = (decoded_reg_strb_reg2[0] && !decoded_req_is_wr) ? field_storage_reg2_f1_value : '0;
    assign readback_array[8][7:5] = '0;
    assign readback_array[9] = (decoded_reg_strb_reg2[1] && !decoded_req_is_wr) ? rbuf_storage_reg2[15:8] : '0;
    assign readback_array[10] = (decoded_reg_strb_reg2[2] && !decoded_req_is_wr) ? rbuf_storage_reg2[23:16] : '0;
    assign readback_array[11] = (decoded_reg_strb_reg2[3] && !decoded_req_is_wr) ? rbuf_storage_reg2[31:24] : '0;
    assign readback_array[12][7:0] = (decoded_reg_strb_g1_r1 && !decoded_req_is_wr) ? field_storage_g1_r1_f1_value : '0;
    assign readback_array[13][7:0] = (decoded_reg_strb_g1_r2 && !decoded_req_is_wr) ? rbuf_storage_g1_r2 : '0;
    assign readback_array[14][7:0] = (decoded_reg_strb_g2_r1[0] && !decoded_req_is_wr) ? field_storage_g2_r1_f1_value[7:0] : '0;
    assign readback_array[15] = (decoded_reg_strb_g2_r1[1] && !decoded_req_is_wr) ? rbuf_storage_g2_r1[15:8] : '0;
    assign readback_array[16] = (decoded_reg_strb_g2_r2[0] && !decoded_req_is_wr) ? rbuf_storage_g2_r2[7:0] : '0;
    assign readback_array[17] = (decoded_reg_strb_g2_r2[1] && !decoded_req_is_wr) ? rbuf_storage_g2_r2[15:8] : '0;
    assign readback_array[18][7:0] = (decoded_reg_strb_g3_r1 && !decoded_req_is_wr) ? rbuf_storage_g3_r1 : '0;
    assign readback_array[19][7:0] = (decoded_reg_strb_g3_r2 && !decoded_req_is_wr) ? rbuf_storage_g3_r2 : '0;
    assign readback_array[20][7:0] = (decoded_reg_strb_g4_r1 && !decoded_req_is_wr) ? rbuf_storage_g4_r1 : '0;
    assign readback_array[21][7:0] = (decoded_reg_strb_g4_r2 && !decoded_req_is_wr) ? rbuf_storage_g4_r2 : '0;

    // Reduce the array
    // always_comb begin
    always @(*) begin
        logic [7:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<22; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
