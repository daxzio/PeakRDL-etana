// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module regblock (
        input wire clk,
        input wire rst,

        input wire s_apb_psel,
        input wire s_apb_pwrite,
        input wire s_apb_penable,
        input wire [2:0] s_apb_pprot,
        input wire [3:0] s_apb_paddr,
        input wire [7:0] s_apb_pwdata,
        input wire [0:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [7:0] s_apb_prdata,
        output logic s_apb_pslverr,

        output logic [0:0] hwif_out_r1_intr,
        input wire [15:0] hwif_in_r1_f,
        output logic [0:0] hwif_out_r1_f_swacc,
        output logic [0:0] hwif_out_r1_f_incrthreshold,
        output logic [0:0] hwif_out_r1_f_decrthreshold,
        output logic [0:0] hwif_out_r2_intr,
        output logic [15:0] hwif_out_r2_f,
        output logic [0:0] hwif_out_r2_f_swmod,
        output logic [0:0] hwif_out_r2_f_incrthreshold,
        output logic [0:0] hwif_out_r2_f_decrthreshold,
        output logic [0:0] hwif_out_r3_intr,
        output logic [15:0] hwif_out_r3_f,
        output logic [0:0] hwif_out_r3_f_swmod,
        output logic [0:0] hwif_out_r3_f_incrthreshold,
        output logic [0:0] hwif_out_r3_f_decrthreshold,
        output logic [0:0] hwif_out_r4_intr,
        output logic [15:0] hwif_out_r4_f,
        output logic [0:0] hwif_out_r4_f_swmod,
        output logic [0:0] hwif_out_r4_f_swacc,
        output logic [0:0] hwif_out_r4_f_incrthreshold,
        output logic [0:0] hwif_out_r4_f_decrthreshold,
        output logic [0:0] hwif_out_r5_intr,
        output logic [15:0] hwif_out_r5_f,
        output logic [0:0] hwif_out_r5_f_swmod,
        output logic [0:0] hwif_out_r5_f_swacc,
        output logic [0:0] hwif_out_r5_f_incrthreshold,
        output logic [0:0] hwif_out_r5_f_decrthreshold,
        output logic [0:0] hwif_out_r6_intr,
        input wire [15:0] hwif_in_r6_f,
        output logic [15:0] hwif_out_r6_f,
        output logic [0:0] hwif_out_r6_f_swmod,
        output logic [0:0] hwif_out_r6_f_incrthreshold,
        output logic [0:0] hwif_out_r6_f_decrthreshold,
        input wire [0:0] hwif_in_r6_f_we
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [3:0] cpuif_addr;
    logic [7:0] cpuif_wr_data;
    logic [7:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [7:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;


    // Request
    logic is_active;
    always_ff @(posedge clk) begin
        if(rst) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= s_apb_paddr[3:0];
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<1; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    logic [1:0] decoded_reg_strb_r1;
    logic [1:0] decoded_reg_strb_r2;
    logic [1:0] decoded_reg_strb_r3;
    logic [1:0] decoded_reg_strb_r4;
    logic [1:0] decoded_reg_strb_r5;
    logic [1:0] decoded_reg_strb_r6;
    logic decoded_req;
    logic decoded_req_is_wr;
    /* verilator lint_off UNUSEDSIGNAL */
    logic [7:0] decoded_wr_data;
    logic [7:0] decoded_wr_biten;
    /* verilator lint_on UNUSEDSIGNAL */

    always @(*) begin
        /* verilator lint_off UNUSEDSIGNAL */
        integer next_cpuif_addr;
        /* verilator lint_on UNUSEDSIGNAL */
        decoded_reg_strb_r1[0] = cpuif_req_masked & (cpuif_addr == 4'h0);
        decoded_reg_strb_r1[1] = cpuif_req_masked & (cpuif_addr == 4'h1);
        decoded_reg_strb_r2[0] = cpuif_req_masked & (cpuif_addr == 4'h2);
        decoded_reg_strb_r2[1] = cpuif_req_masked & (cpuif_addr == 4'h3);
        decoded_reg_strb_r3[0] = cpuif_req_masked & (cpuif_addr == 4'h4);
        decoded_reg_strb_r3[1] = cpuif_req_masked & (cpuif_addr == 4'h5);
        decoded_reg_strb_r4[0] = cpuif_req_masked & (cpuif_addr == 4'h6);
        decoded_reg_strb_r4[1] = cpuif_req_masked & (cpuif_addr == 4'h7);
        decoded_reg_strb_r5[0] = cpuif_req_masked & (cpuif_addr == 4'h8);
        decoded_reg_strb_r5[1] = cpuif_req_masked & (cpuif_addr == 4'h9);
        decoded_reg_strb_r6[0] = cpuif_req_masked & (cpuif_addr == 4'ha);
        decoded_reg_strb_r6[1] = cpuif_req_masked & (cpuif_addr == 4'hb);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;


    //--------------------------------------------------------------------------
    // Field storage declarations
    //--------------------------------------------------------------------------

    // Field: regblock.r2.f
    logic [15:0] field_storage_r2_f_value;
    logic [15:0] field_combo_r2_f_next;
    logic field_combo_r2_f_load_next;
    // Field: regblock.r3.f
    logic [15:0] field_storage_r3_f_value;
    logic [15:0] field_combo_r3_f_next;
    logic field_combo_r3_f_load_next;
    // Field: regblock.r4.f
    logic [15:0] field_storage_r4_f_value;
    logic [15:0] field_combo_r4_f_next;
    logic field_combo_r4_f_load_next;
    // Field: regblock.r5.f
    logic [15:0] field_storage_r5_f_value;
    logic [15:0] field_combo_r5_f_next;
    logic field_combo_r5_f_load_next;
    // Field: regblock.r6.f
    logic [15:0] field_storage_r6_f_value;
    logic [15:0] field_combo_r6_f_next;
    logic field_combo_r6_f_load_next;

    //--------------------------------------------------------------------------
    // Write double-buffers
    //--------------------------------------------------------------------------
    logic wbuf_storage_r2_pending;
    logic [15:0] wbuf_storage_r2_data;
    logic [15:0] wbuf_storage_r2_biten;
    logic wbuf_storage_r2_trigger_q;
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage_r2_pending <= '0;
            wbuf_storage_r2_data <= '0;
            wbuf_storage_r2_biten <= '0;
            wbuf_storage_r2_trigger_q <= '0;
        end else begin
            if(wbuf_storage_r2_trigger_q) begin
                wbuf_storage_r2_pending <= '0;
                wbuf_storage_r2_data <= '0;
                wbuf_storage_r2_biten <= '0;
            end
            if(decoded_reg_strb_r2[0] && decoded_req_is_wr) begin
                wbuf_storage_r2_pending <= '1;
                wbuf_storage_r2_data[7:0] <= (wbuf_storage_r2_data[7:0] & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_r2_biten[7:0] <= wbuf_storage_r2_biten[7:0] | decoded_wr_biten;
            end
            if(decoded_reg_strb_r2[1] && decoded_req_is_wr) begin
                wbuf_storage_r2_pending <= '1;
                wbuf_storage_r2_data[15:8] <= (wbuf_storage_r2_data[15:8] & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_r2_biten[15:8] <= wbuf_storage_r2_biten[15:8] | decoded_wr_biten;
            end
            wbuf_storage_r2_trigger_q <= decoded_reg_strb_r2[1] && decoded_req_is_wr;
        end
    end
    logic wbuf_storage_r3_pending;
    logic [15:0] wbuf_storage_r3_data;
    logic [15:0] wbuf_storage_r3_biten;
    logic wbuf_storage_r3_trigger_q;
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage_r3_pending <= '0;
            wbuf_storage_r3_data <= '0;
            wbuf_storage_r3_biten <= '0;
            wbuf_storage_r3_trigger_q <= '0;
        end else begin
            if(wbuf_storage_r3_trigger_q) begin
                wbuf_storage_r3_pending <= '0;
                wbuf_storage_r3_data <= '0;
                wbuf_storage_r3_biten <= '0;
            end
            if(decoded_reg_strb_r3[0] && decoded_req_is_wr) begin
                wbuf_storage_r3_pending <= '1;
                wbuf_storage_r3_data[7:0] <= (wbuf_storage_r3_data[7:0] & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_r3_biten[7:0] <= wbuf_storage_r3_biten[7:0] | decoded_wr_biten;
            end
            if(decoded_reg_strb_r3[1] && decoded_req_is_wr) begin
                wbuf_storage_r3_pending <= '1;
                wbuf_storage_r3_data[15:8] <= (wbuf_storage_r3_data[15:8] & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_r3_biten[15:8] <= wbuf_storage_r3_biten[15:8] | decoded_wr_biten;
            end
            wbuf_storage_r3_trigger_q <= decoded_reg_strb_r3[1] && decoded_req_is_wr;
        end
    end
    logic wbuf_storage_r4_pending;
    logic [15:0] wbuf_storage_r4_data;
    logic [15:0] wbuf_storage_r4_biten;
    logic wbuf_storage_r4_trigger_q;
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage_r4_pending <= '0;
            wbuf_storage_r4_data <= '0;
            wbuf_storage_r4_biten <= '0;
            wbuf_storage_r4_trigger_q <= '0;
        end else begin
            if(wbuf_storage_r4_trigger_q) begin
                wbuf_storage_r4_pending <= '0;
                wbuf_storage_r4_data <= '0;
                wbuf_storage_r4_biten <= '0;
            end
            if(decoded_reg_strb_r4[0] && decoded_req_is_wr) begin
                wbuf_storage_r4_pending <= '1;
                wbuf_storage_r4_data[7:0] <= (wbuf_storage_r4_data[7:0] & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_r4_biten[7:0] <= wbuf_storage_r4_biten[7:0] | decoded_wr_biten;
            end
            if(decoded_reg_strb_r4[1] && decoded_req_is_wr) begin
                wbuf_storage_r4_pending <= '1;
                wbuf_storage_r4_data[15:8] <= (wbuf_storage_r4_data[15:8] & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_r4_biten[15:8] <= wbuf_storage_r4_biten[15:8] | decoded_wr_biten;
            end
            wbuf_storage_r4_trigger_q <= decoded_reg_strb_r4[1] && decoded_req_is_wr;
        end
    end
    logic wbuf_storage_r5_pending;
    logic [15:0] wbuf_storage_r5_data;
    logic [15:0] wbuf_storage_r5_biten;
    logic wbuf_storage_r5_trigger_q;
    always_ff @(posedge clk) begin
        if(rst) begin
            wbuf_storage_r5_pending <= '0;
            wbuf_storage_r5_data <= '0;
            wbuf_storage_r5_biten <= '0;
            wbuf_storage_r5_trigger_q <= '0;
        end else begin
            if(wbuf_storage_r5_trigger_q) begin
                wbuf_storage_r5_pending <= '0;
                wbuf_storage_r5_data <= '0;
                wbuf_storage_r5_biten <= '0;
            end
            if(decoded_reg_strb_r5[0] && decoded_req_is_wr) begin
                wbuf_storage_r5_pending <= '1;
                wbuf_storage_r5_data[7:0] <= (wbuf_storage_r5_data[7:0] & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_r5_biten[7:0] <= wbuf_storage_r5_biten[7:0] | decoded_wr_biten;
            end
            if(decoded_reg_strb_r5[1] && decoded_req_is_wr) begin
                wbuf_storage_r5_pending <= '1;
                wbuf_storage_r5_data[15:8] <= (wbuf_storage_r5_data[15:8] & ~decoded_wr_biten) | (decoded_wr_data & decoded_wr_biten);
                wbuf_storage_r5_biten[15:8] <= wbuf_storage_r5_biten[15:8] | decoded_wr_biten;
            end
            wbuf_storage_r5_trigger_q <= decoded_reg_strb_r5[1] && decoded_req_is_wr;
        end
    end
    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    assign hwif_out_r1_f_swacc = decoded_reg_strb_r1[0] && !decoded_req_is_wr || (|decoded_reg_strb_r1[1:0] && decoded_req_is_wr);
    // always_comb begin
    always @(*) begin
        logic [15:0] next_c;
        logic load_next_c;
        next_c = field_storage_r2_f_value;
        load_next_c = '0;
        if(wbuf_storage_r2_pending && wbuf_storage_r2_trigger_q) begin // SW write
            next_c = (field_storage_r2_f_value & ~wbuf_storage_r2_biten[15:0]) | (wbuf_storage_r2_data[15:0] & wbuf_storage_r2_biten[15:0]);
            load_next_c = '1;
        end
        field_combo_r2_f_next = next_c;
        field_combo_r2_f_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r2_f_value <= 16'h4020;
        end else if(field_combo_r2_f_load_next) begin
            field_storage_r2_f_value <= field_combo_r2_f_next;
        end
    end
    assign hwif_out_r2_f = field_storage_r2_f_value;
    assign hwif_out_r2_f_swmod = wbuf_storage_r2_pending && wbuf_storage_r2_trigger_q;
    // always_comb begin
    always @(*) begin
        logic [15:0] next_c;
        logic load_next_c;
        next_c = field_storage_r3_f_value;
        load_next_c = '0;
        if(decoded_reg_strb_r3[0] && !decoded_req_is_wr) begin // SW clear on read
            next_c = '0;
            load_next_c = '1;
        end else if(wbuf_storage_r3_pending && wbuf_storage_r3_trigger_q) begin // SW write
            next_c = (field_storage_r3_f_value & ~wbuf_storage_r3_biten[15:0]) | (wbuf_storage_r3_data[15:0] & wbuf_storage_r3_biten[15:0]);
            load_next_c = '1;
        end
        field_combo_r3_f_next = next_c;
        field_combo_r3_f_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r3_f_value <= 16'h1030;
        end else if(field_combo_r3_f_load_next) begin
            field_storage_r3_f_value <= field_combo_r3_f_next;
        end
    end
    assign hwif_out_r3_f = field_storage_r3_f_value;
    assign hwif_out_r3_f_swmod = wbuf_storage_r3_pending && wbuf_storage_r3_trigger_q || decoded_reg_strb_r3[0] && !decoded_req_is_wr;
    // always_comb begin
    always @(*) begin
        logic [15:0] next_c;
        logic load_next_c;
        next_c = field_storage_r4_f_value;
        load_next_c = '0;
        if(wbuf_storage_r4_pending && wbuf_storage_r4_trigger_q) begin // SW write
            next_c = (field_storage_r4_f_value & ~wbuf_storage_r4_biten[15:0]) | (wbuf_storage_r4_data[15:0] & wbuf_storage_r4_biten[15:0]);
            load_next_c = '1;
        end
        field_combo_r4_f_next = next_c;
        field_combo_r4_f_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r4_f_value <= 16'h1234;
        end else if(field_combo_r4_f_load_next) begin
            field_storage_r4_f_value <= field_combo_r4_f_next;
        end
    end
    assign hwif_out_r4_f = field_storage_r4_f_value;
    assign hwif_out_r4_f_swmod = wbuf_storage_r4_pending && wbuf_storage_r4_trigger_q;
    assign hwif_out_r4_f_swacc = decoded_reg_strb_r4[0] && !decoded_req_is_wr || wbuf_storage_r4_pending && wbuf_storage_r4_trigger_q;
    // always_comb begin
    always @(*) begin
        logic [15:0] next_c;
        logic load_next_c;
        next_c = field_storage_r5_f_value;
        load_next_c = '0;
        if(wbuf_storage_r5_pending && wbuf_storage_r5_trigger_q) begin // SW write
            next_c = (field_storage_r5_f_value & ~wbuf_storage_r5_biten[15:0]) | (wbuf_storage_r5_data[15:0] & wbuf_storage_r5_biten[15:0]);
            load_next_c = '1;
        end
        field_combo_r5_f_next = next_c;
        field_combo_r5_f_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r5_f_value <= 16'habcd;
        end else if(field_combo_r5_f_load_next) begin
            field_storage_r5_f_value <= field_combo_r5_f_next;
        end
    end
    assign hwif_out_r5_f = field_storage_r5_f_value;
    assign hwif_out_r5_f_swmod = wbuf_storage_r5_pending && wbuf_storage_r5_trigger_q;
    assign hwif_out_r5_f_swacc = wbuf_storage_r5_pending && wbuf_storage_r5_trigger_q || (|decoded_reg_strb_r5[1:0] && !decoded_req_is_wr);
    // always_comb begin
    always @(*) begin
        logic [15:0] next_c;
        logic load_next_c;
        next_c = field_storage_r6_f_value;
        load_next_c = '0;
        if(decoded_reg_strb_r6[0] && !decoded_req_is_wr) begin // SW clear on read
            next_c = '0;
            load_next_c = '1;
        end else if(hwif_in_r6_f_we) begin // HW Write - we
            next_c = hwif_in_r6_f;
            load_next_c = '1;
        end
        field_combo_r6_f_next = next_c;
        field_combo_r6_f_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r6_f_value <= 16'h1030;
        end else if(field_combo_r6_f_load_next) begin
            field_storage_r6_f_value <= field_combo_r6_f_next;
        end
    end
    assign hwif_out_r6_f = field_storage_r6_f_value;
    assign hwif_out_r6_f_swmod = decoded_reg_strb_r6[0] && !decoded_req_is_wr;

    //--------------------------------------------------------------------------
    // Read double-buffers
    //--------------------------------------------------------------------------

    logic [15:0] rbuf_storage_r1;
    always_ff @(posedge clk) begin
        if(decoded_reg_strb_r1[0] && !decoded_req_is_wr) begin
            rbuf_storage_r1[15:0] <= hwif_in_r1_f;
        end
    end
    logic [15:0] rbuf_storage_r2;
    always_ff @(posedge clk) begin
        if(decoded_reg_strb_r2[0] && !decoded_req_is_wr) begin
            rbuf_storage_r2[15:0] <= field_storage_r2_f_value;
        end
    end
    logic [15:0] rbuf_storage_r3;
    always_ff @(posedge clk) begin
        if(decoded_reg_strb_r3[0] && !decoded_req_is_wr) begin
            rbuf_storage_r3[15:0] <= field_storage_r3_f_value;
        end
    end
    logic [15:0] rbuf_storage_r4;
    always_ff @(posedge clk) begin
        if(decoded_reg_strb_r4[0] && !decoded_req_is_wr) begin
            rbuf_storage_r4[15:0] <= field_storage_r4_f_value;
        end
    end
    logic [15:0] rbuf_storage_r6;
    always_ff @(posedge clk) begin
        if(decoded_reg_strb_r6[0] && !decoded_req_is_wr) begin
            rbuf_storage_r6[15:0] <= field_storage_r6_f_value;
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

//--------------------------------------------------------------------------
// Readback
//--------------------------------------------------------------------------
    logic readback_external_rd_ack;
    assign readback_external_rd_ack = 0;

    logic readback_err;
    logic readback_done;
    logic [7:0] readback_data;

    // Assign readback values to a flattened array
    logic [7:0] readback_array[12];
    assign readback_array[0][7:0] = (decoded_reg_strb_r1[0] && !decoded_req_is_wr) ? hwif_in_r1_f[7:0] : '0;
    assign readback_array[1] = (decoded_reg_strb_r1[1] && !decoded_req_is_wr) ? rbuf_storage_r1[15:8] : '0;
    assign readback_array[2][7:0] = (decoded_reg_strb_r2[0] && !decoded_req_is_wr) ? field_storage_r2_f_value[7:0] : '0;
    assign readback_array[3] = (decoded_reg_strb_r2[1] && !decoded_req_is_wr) ? rbuf_storage_r2[15:8] : '0;
    assign readback_array[4][7:0] = (decoded_reg_strb_r3[0] && !decoded_req_is_wr) ? field_storage_r3_f_value[7:0] : '0;
    assign readback_array[5] = (decoded_reg_strb_r3[1] && !decoded_req_is_wr) ? rbuf_storage_r3[15:8] : '0;
    assign readback_array[6][7:0] = (decoded_reg_strb_r4[0] && !decoded_req_is_wr) ? field_storage_r4_f_value[7:0] : '0;
    assign readback_array[7] = (decoded_reg_strb_r4[1] && !decoded_req_is_wr) ? rbuf_storage_r4[15:8] : '0;
    assign readback_array[8][7:0] = (decoded_reg_strb_r5[0] && !decoded_req_is_wr) ? field_storage_r5_f_value[7:0] : '0;
    assign readback_array[9][7:0] = (decoded_reg_strb_r5[1] && !decoded_req_is_wr) ? field_storage_r5_f_value[15:8] : '0;
    assign readback_array[10][7:0] = (decoded_reg_strb_r6[0] && !decoded_req_is_wr) ? field_storage_r6_f_value[7:0] : '0;
    assign readback_array[11] = (decoded_reg_strb_r6[1] && !decoded_req_is_wr) ? rbuf_storage_r6[15:8] : '0;

    // Reduce the array
    // always_comb begin
    always @(*) begin
        logic [7:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<12; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
