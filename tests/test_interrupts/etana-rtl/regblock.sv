// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module regblock (
        input wire clk,
        input wire rst,

        input wire s_apb_psel,
        input wire s_apb_pwrite,
        input wire s_apb_penable,
        input wire [2:0] s_apb_pprot,
        input wire [8:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,

        output logic [0:0] hwif_out_level_irqs_1_intr,
        input wire [7:0] hwif_in_level_irqs_1_irq0,
        output logic [0:0] hwif_out_level_irqs_1_irq0_incrthreshold,
        output logic [0:0] hwif_out_level_irqs_1_irq0_decrthreshold,
        input wire [0:0] hwif_in_level_irqs_1_irq1,
        output logic [0:0] hwif_out_level_irqs_1_irq1_incrthreshold,
        output logic [0:0] hwif_out_level_irqs_1_irq1_decrthreshold,
        output logic [0:0] hwif_out_level_irqs_2_intr,
        output logic [0:0] hwif_out_level_irqs_2_halt,
        input wire [7:0] hwif_in_level_irqs_2_irq0,
        output logic [0:0] hwif_out_level_irqs_2_irq0_incrthreshold,
        output logic [0:0] hwif_out_level_irqs_2_irq0_decrthreshold,
        input wire [0:0] hwif_in_level_irqs_2_irq1,
        output logic [0:0] hwif_out_level_irqs_2_irq1_incrthreshold,
        output logic [0:0] hwif_out_level_irqs_2_irq1_decrthreshold,
        output logic [0:0] hwif_out_level_irqs_3_intr,
        output logic [0:0] hwif_out_level_irqs_3_halt,
        input wire [7:0] hwif_in_level_irqs_3_irq0,
        output logic [0:0] hwif_out_level_irqs_3_irq0_incrthreshold,
        output logic [0:0] hwif_out_level_irqs_3_irq0_decrthreshold,
        input wire [0:0] hwif_in_level_irqs_3_irq1,
        output logic [0:0] hwif_out_level_irqs_3_irq1_incrthreshold,
        output logic [0:0] hwif_out_level_irqs_3_irq1_decrthreshold,
        output logic [0:0] hwif_out_posedge_irqs_intr,
        input wire [7:0] hwif_in_posedge_irqs_irq0,
        output logic [0:0] hwif_out_posedge_irqs_irq0_incrthreshold,
        output logic [0:0] hwif_out_posedge_irqs_irq0_decrthreshold,
        input wire [0:0] hwif_in_posedge_irqs_irq1,
        output logic [0:0] hwif_out_posedge_irqs_irq1_incrthreshold,
        output logic [0:0] hwif_out_posedge_irqs_irq1_decrthreshold,
        output logic [0:0] hwif_out_negedge_irqs_intr,
        input wire [7:0] hwif_in_negedge_irqs_irq0,
        output logic [0:0] hwif_out_negedge_irqs_irq0_incrthreshold,
        output logic [0:0] hwif_out_negedge_irqs_irq0_decrthreshold,
        input wire [0:0] hwif_in_negedge_irqs_irq1,
        output logic [0:0] hwif_out_negedge_irqs_irq1_incrthreshold,
        output logic [0:0] hwif_out_negedge_irqs_irq1_decrthreshold,
        output logic [0:0] hwif_out_bothedge_irqs_intr,
        input wire [7:0] hwif_in_bothedge_irqs_irq0,
        output logic [0:0] hwif_out_bothedge_irqs_irq0_incrthreshold,
        output logic [0:0] hwif_out_bothedge_irqs_irq0_decrthreshold,
        input wire [0:0] hwif_in_bothedge_irqs_irq1,
        output logic [0:0] hwif_out_bothedge_irqs_irq1_incrthreshold,
        output logic [0:0] hwif_out_bothedge_irqs_irq1_decrthreshold,
        output logic [0:0] hwif_out_top_irq_intr,
        output logic [0:0] hwif_out_top_irq_level_active_incrthreshold,
        output logic [0:0] hwif_out_top_irq_level_active_decrthreshold,
        output logic [0:0] hwif_out_top_irq_posedge_active_incrthreshold,
        output logic [0:0] hwif_out_top_irq_posedge_active_decrthreshold,
        output logic [0:0] hwif_out_top_irq_negedge_active_incrthreshold,
        output logic [0:0] hwif_out_top_irq_negedge_active_decrthreshold,
        output logic [0:0] hwif_out_top_irq_bothedge_active_incrthreshold,
        output logic [0:0] hwif_out_top_irq_bothedge_active_decrthreshold,
        output logic [0:0] hwif_out_top_irq_level_halt_active_incrthreshold,
        output logic [0:0] hwif_out_top_irq_level_halt_active_decrthreshold,
        output logic [0:0] hwif_out_stickyreg_intr,
        input wire [7:0] hwif_in_stickyreg_stickyfield,
        output logic [0:0] hwif_out_stickyreg_stickyfield_incrthreshold,
        output logic [0:0] hwif_out_stickyreg_stickyfield_decrthreshold,
        output logic [0:0] hwif_out_ctrl_enable_intr,
        output logic [0:0] hwif_out_ctrl_mask_intr,
        output logic [0:0] hwif_out_ctrl_haltenable_intr,
        output logic [0:0] hwif_out_ctrl_haltmask_intr
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [8:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;


    // Request
    logic is_active;
    always_ff @(posedge clk) begin
        if(rst) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= {s_apb_paddr[8:2], 2'b0};
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<4; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    logic [0:0] decoded_reg_strb_level_irqs_1;
    logic [0:0] decoded_reg_strb_level_irqs_2;
    logic [0:0] decoded_reg_strb_level_irqs_3;
    logic [0:0] decoded_reg_strb_posedge_irqs;
    logic [0:0] decoded_reg_strb_negedge_irqs;
    logic [0:0] decoded_reg_strb_bothedge_irqs;
    logic [0:0] decoded_reg_strb_top_irq;
    logic [0:0] decoded_reg_strb_stickyreg;
    logic [0:0] decoded_reg_strb_ctrl_enable;
    logic [0:0] decoded_reg_strb_ctrl_mask;
    logic [0:0] decoded_reg_strb_ctrl_haltenable;
    logic [0:0] decoded_reg_strb_ctrl_haltmask;
    logic decoded_req;
    logic decoded_req_is_wr;
    /* verilator lint_off UNUSEDSIGNAL */
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;
    /* verilator lint_on UNUSEDSIGNAL */

    always @(*) begin
        /* verilator lint_off UNUSEDSIGNAL */
        integer next_cpuif_addr;
        /* verilator lint_on UNUSEDSIGNAL */
        decoded_reg_strb_level_irqs_1 = cpuif_req_masked & (cpuif_addr == 9'h0);
        decoded_reg_strb_level_irqs_2 = cpuif_req_masked & (cpuif_addr == 9'h4);
        decoded_reg_strb_level_irqs_3 = cpuif_req_masked & (cpuif_addr == 9'h8);
        decoded_reg_strb_posedge_irqs = cpuif_req_masked & (cpuif_addr == 9'h10);
        decoded_reg_strb_negedge_irqs = cpuif_req_masked & (cpuif_addr == 9'h20);
        decoded_reg_strb_bothedge_irqs = cpuif_req_masked & (cpuif_addr == 9'h30);
        decoded_reg_strb_top_irq = cpuif_req_masked & (cpuif_addr == 9'h40);
        decoded_reg_strb_stickyreg = cpuif_req_masked & (cpuif_addr == 9'h50);
        decoded_reg_strb_ctrl_enable = cpuif_req_masked & (cpuif_addr == 9'h100);
        decoded_reg_strb_ctrl_mask = cpuif_req_masked & (cpuif_addr == 9'h104);
        decoded_reg_strb_ctrl_haltenable = cpuif_req_masked & (cpuif_addr == 9'h108);
        decoded_reg_strb_ctrl_haltmask = cpuif_req_masked & (cpuif_addr == 9'h10c);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;


    //--------------------------------------------------------------------------
    // Field storage declarations
    //--------------------------------------------------------------------------

    // Field: regblock.level_irqs_1.irq0
    logic [7:0] field_storage_level_irqs_1_irq0_value;
    logic [7:0] field_combo_level_irqs_1_irq0_next;
    logic field_combo_level_irqs_1_irq0_load_next;
    // Field: regblock.level_irqs_1.irq1
    logic [0:0] field_storage_level_irqs_1_irq1_value;
    logic [0:0] field_combo_level_irqs_1_irq1_next;
    logic field_combo_level_irqs_1_irq1_load_next;
    // Field: regblock.level_irqs_2.irq0
    logic [7:0] field_storage_level_irqs_2_irq0_value;
    logic [7:0] field_combo_level_irqs_2_irq0_next;
    logic field_combo_level_irqs_2_irq0_load_next;
    // Field: regblock.level_irqs_2.irq1
    logic [0:0] field_storage_level_irqs_2_irq1_value;
    logic [0:0] field_combo_level_irqs_2_irq1_next;
    logic field_combo_level_irqs_2_irq1_load_next;
    // Field: regblock.level_irqs_3.irq0
    logic [7:0] field_storage_level_irqs_3_irq0_value;
    logic [7:0] field_combo_level_irqs_3_irq0_next;
    logic field_combo_level_irqs_3_irq0_load_next;
    // Field: regblock.level_irqs_3.irq1
    logic [0:0] field_storage_level_irqs_3_irq1_value;
    logic [0:0] field_combo_level_irqs_3_irq1_next;
    logic field_combo_level_irqs_3_irq1_load_next;
    // Field: regblock.posedge_irqs.irq0
    logic [7:0] field_storage_posedge_irqs_irq0_value;
    logic [7:0] field_storage_posedge_irqs_irq0_next_q;
    logic [7:0] field_combo_posedge_irqs_irq0_next;
    logic field_combo_posedge_irqs_irq0_load_next;
    // Field: regblock.posedge_irqs.irq1
    logic [0:0] field_storage_posedge_irqs_irq1_value;
    logic [0:0] field_storage_posedge_irqs_irq1_next_q;
    logic [0:0] field_combo_posedge_irqs_irq1_next;
    logic field_combo_posedge_irqs_irq1_load_next;
    // Field: regblock.negedge_irqs.irq0
    logic [7:0] field_storage_negedge_irqs_irq0_value;
    logic [7:0] field_storage_negedge_irqs_irq0_next_q;
    logic [7:0] field_combo_negedge_irqs_irq0_next;
    logic field_combo_negedge_irqs_irq0_load_next;
    // Field: regblock.negedge_irqs.irq1
    logic [0:0] field_storage_negedge_irqs_irq1_value;
    logic [0:0] field_storage_negedge_irqs_irq1_next_q;
    logic [0:0] field_combo_negedge_irqs_irq1_next;
    logic field_combo_negedge_irqs_irq1_load_next;
    // Field: regblock.bothedge_irqs.irq0
    logic [7:0] field_storage_bothedge_irqs_irq0_value;
    logic [7:0] field_storage_bothedge_irqs_irq0_next_q;
    logic [7:0] field_combo_bothedge_irqs_irq0_next;
    logic field_combo_bothedge_irqs_irq0_load_next;
    // Field: regblock.bothedge_irqs.irq1
    logic [0:0] field_storage_bothedge_irqs_irq1_value;
    logic [0:0] field_storage_bothedge_irqs_irq1_next_q;
    logic [0:0] field_combo_bothedge_irqs_irq1_next;
    logic field_combo_bothedge_irqs_irq1_load_next;
    // Field: regblock.top_irq.level_active
    logic [0:0] field_storage_top_irq_level_active_value;
    logic [0:0] field_combo_top_irq_level_active_next;
    logic field_combo_top_irq_level_active_load_next;
    // Field: regblock.top_irq.posedge_active
    logic [0:0] field_storage_top_irq_posedge_active_value;
    logic [0:0] field_combo_top_irq_posedge_active_next;
    logic field_combo_top_irq_posedge_active_load_next;
    // Field: regblock.top_irq.negedge_active
    logic [0:0] field_storage_top_irq_negedge_active_value;
    logic [0:0] field_combo_top_irq_negedge_active_next;
    logic field_combo_top_irq_negedge_active_load_next;
    // Field: regblock.top_irq.bothedge_active
    logic [0:0] field_storage_top_irq_bothedge_active_value;
    logic [0:0] field_combo_top_irq_bothedge_active_next;
    logic field_combo_top_irq_bothedge_active_load_next;
    // Field: regblock.top_irq.level_halt_active
    logic [0:0] field_storage_top_irq_level_halt_active_value;
    logic [0:0] field_combo_top_irq_level_halt_active_next;
    logic field_combo_top_irq_level_halt_active_load_next;
    // Field: regblock.stickyreg.stickyfield
    logic [7:0] field_storage_stickyreg_stickyfield_value;
    logic [7:0] field_combo_stickyreg_stickyfield_next;
    logic field_combo_stickyreg_stickyfield_load_next;
    // Field: regblock.ctrl_enable.irq0
    logic [7:0] field_storage_ctrl_enable_irq0_value;
    logic [7:0] field_combo_ctrl_enable_irq0_next;
    logic field_combo_ctrl_enable_irq0_load_next;
    // Field: regblock.ctrl_enable.irq1
    logic [0:0] field_storage_ctrl_enable_irq1_value;
    logic [0:0] field_combo_ctrl_enable_irq1_next;
    logic field_combo_ctrl_enable_irq1_load_next;
    // Field: regblock.ctrl_mask.irq0
    logic [7:0] field_storage_ctrl_mask_irq0_value;
    logic [7:0] field_combo_ctrl_mask_irq0_next;
    logic field_combo_ctrl_mask_irq0_load_next;
    // Field: regblock.ctrl_mask.irq1
    logic [0:0] field_storage_ctrl_mask_irq1_value;
    logic [0:0] field_combo_ctrl_mask_irq1_next;
    logic field_combo_ctrl_mask_irq1_load_next;
    // Field: regblock.ctrl_haltenable.irq0
    logic [7:0] field_storage_ctrl_haltenable_irq0_value;
    logic [7:0] field_combo_ctrl_haltenable_irq0_next;
    logic field_combo_ctrl_haltenable_irq0_load_next;
    // Field: regblock.ctrl_haltenable.irq1
    logic [0:0] field_storage_ctrl_haltenable_irq1_value;
    logic [0:0] field_combo_ctrl_haltenable_irq1_next;
    logic field_combo_ctrl_haltenable_irq1_load_next;
    // Field: regblock.ctrl_haltmask.irq0
    logic [7:0] field_storage_ctrl_haltmask_irq0_value;
    logic [7:0] field_combo_ctrl_haltmask_irq0_next;
    logic field_combo_ctrl_haltmask_irq0_load_next;
    // Field: regblock.ctrl_haltmask.irq1
    logic [0:0] field_storage_ctrl_haltmask_irq1_value;
    logic [0:0] field_combo_ctrl_haltmask_irq1_next;
    logic field_combo_ctrl_haltmask_irq1_load_next;
    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_level_irqs_1_irq0_value;
        load_next_c = '0;
        if(decoded_reg_strb_level_irqs_1 && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage_level_irqs_1_irq0_value & ~(decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if(hwif_in_level_irqs_1_irq0 != '0) begin // stickybit
            next_c = field_storage_level_irqs_1_irq0_value | hwif_in_level_irqs_1_irq0;
            load_next_c = '1;
        end
        field_combo_level_irqs_1_irq0_next = next_c;
        field_combo_level_irqs_1_irq0_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_level_irqs_1_irq0_value <= 8'h0;
        end else if(field_combo_level_irqs_1_irq0_load_next) begin
            field_storage_level_irqs_1_irq0_value <= field_combo_level_irqs_1_irq0_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_level_irqs_1_irq1_value;
        load_next_c = '0;
        if(decoded_reg_strb_level_irqs_1 && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage_level_irqs_1_irq1_value & ~(decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else if(hwif_in_level_irqs_1_irq1) begin // stickybit
            next_c = '1;
            load_next_c = '1;
        end
        field_combo_level_irqs_1_irq1_next = next_c;
        field_combo_level_irqs_1_irq1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_level_irqs_1_irq1_value <= 1'h0;
        end else if(field_combo_level_irqs_1_irq1_load_next) begin
            field_storage_level_irqs_1_irq1_value <= field_combo_level_irqs_1_irq1_next;
        end
    end
    assign hwif_out_level_irqs_1_intr =
        |field_storage_level_irqs_1_irq0_value
        || |field_storage_level_irqs_1_irq1_value;
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_level_irqs_2_irq0_value;
        load_next_c = '0;
        if(decoded_reg_strb_level_irqs_2 && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage_level_irqs_2_irq0_value & ~(decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if(hwif_in_level_irqs_2_irq0 != '0) begin // stickybit
            next_c = field_storage_level_irqs_2_irq0_value | hwif_in_level_irqs_2_irq0;
            load_next_c = '1;
        end
        field_combo_level_irqs_2_irq0_next = next_c;
        field_combo_level_irqs_2_irq0_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_level_irqs_2_irq0_value <= 8'h0;
        end else if(field_combo_level_irqs_2_irq0_load_next) begin
            field_storage_level_irqs_2_irq0_value <= field_combo_level_irqs_2_irq0_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_level_irqs_2_irq1_value;
        load_next_c = '0;
        if(decoded_reg_strb_level_irqs_2 && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage_level_irqs_2_irq1_value & ~(decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else if(hwif_in_level_irqs_2_irq1) begin // stickybit
            next_c = '1;
            load_next_c = '1;
        end
        field_combo_level_irqs_2_irq1_next = next_c;
        field_combo_level_irqs_2_irq1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_level_irqs_2_irq1_value <= 1'h0;
        end else if(field_combo_level_irqs_2_irq1_load_next) begin
            field_storage_level_irqs_2_irq1_value <= field_combo_level_irqs_2_irq1_next;
        end
    end
    assign hwif_out_level_irqs_2_intr =
        |(field_storage_level_irqs_2_irq0_value & field_storage_ctrl_enable_irq0_value)
        || |(field_storage_level_irqs_2_irq1_value & field_storage_ctrl_enable_irq1_value);
    assign hwif_out_level_irqs_2_halt =
        |(field_storage_level_irqs_2_irq0_value & field_storage_ctrl_haltenable_irq0_value)
        || |(field_storage_level_irqs_2_irq1_value & field_storage_ctrl_haltenable_irq1_value);
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_level_irqs_3_irq0_value;
        load_next_c = '0;
        if(decoded_reg_strb_level_irqs_3 && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage_level_irqs_3_irq0_value & ~(decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if(hwif_in_level_irqs_3_irq0 != '0) begin // stickybit
            next_c = field_storage_level_irqs_3_irq0_value | hwif_in_level_irqs_3_irq0;
            load_next_c = '1;
        end
        field_combo_level_irqs_3_irq0_next = next_c;
        field_combo_level_irqs_3_irq0_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_level_irqs_3_irq0_value <= 8'h0;
        end else if(field_combo_level_irqs_3_irq0_load_next) begin
            field_storage_level_irqs_3_irq0_value <= field_combo_level_irqs_3_irq0_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_level_irqs_3_irq1_value;
        load_next_c = '0;
        if(decoded_reg_strb_level_irqs_3 && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage_level_irqs_3_irq1_value & ~(decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else if(hwif_in_level_irqs_3_irq1) begin // stickybit
            next_c = '1;
            load_next_c = '1;
        end
        field_combo_level_irqs_3_irq1_next = next_c;
        field_combo_level_irqs_3_irq1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_level_irqs_3_irq1_value <= 1'h0;
        end else if(field_combo_level_irqs_3_irq1_load_next) begin
            field_storage_level_irqs_3_irq1_value <= field_combo_level_irqs_3_irq1_next;
        end
    end
    assign hwif_out_level_irqs_3_intr =
        |(field_storage_level_irqs_3_irq0_value & ~field_storage_ctrl_mask_irq0_value)
        || |(field_storage_level_irqs_3_irq1_value & ~field_storage_ctrl_mask_irq1_value);
    assign hwif_out_level_irqs_3_halt =
        |(field_storage_level_irqs_3_irq0_value & ~field_storage_ctrl_haltmask_irq0_value)
        || |(field_storage_level_irqs_3_irq1_value & ~field_storage_ctrl_haltmask_irq1_value);
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_posedge_irqs_irq0_value;
        load_next_c = '0;
        if(decoded_reg_strb_posedge_irqs && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage_posedge_irqs_irq0_value & ~(decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if((~field_storage_posedge_irqs_irq0_next_q & hwif_in_posedge_irqs_irq0) != '0) begin // posedge stickybit
            next_c = field_storage_posedge_irqs_irq0_value | (~field_storage_posedge_irqs_irq0_next_q & hwif_in_posedge_irqs_irq0);
            load_next_c = '1;
        end
        field_combo_posedge_irqs_irq0_next = next_c;
        field_combo_posedge_irqs_irq0_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_posedge_irqs_irq0_value <= 8'h0;
            field_storage_posedge_irqs_irq0_next_q <= 8'h0;
        end else if(field_combo_posedge_irqs_irq0_load_next) begin
            field_storage_posedge_irqs_irq0_value <= field_combo_posedge_irqs_irq0_next;
        end
        field_storage_posedge_irqs_irq0_next_q <= hwif_in_posedge_irqs_irq0;
    end
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_posedge_irqs_irq1_value;
        load_next_c = '0;
        if(decoded_reg_strb_posedge_irqs && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage_posedge_irqs_irq1_value & ~(decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else if(~field_storage_posedge_irqs_irq1_next_q & hwif_in_posedge_irqs_irq1) begin // posedge stickybit
            next_c = '1;
            load_next_c = '1;
        end
        field_combo_posedge_irqs_irq1_next = next_c;
        field_combo_posedge_irqs_irq1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_posedge_irqs_irq1_value <= 1'h0;
            field_storage_posedge_irqs_irq1_next_q <= 1'h0;
        end else if(field_combo_posedge_irqs_irq1_load_next) begin
            field_storage_posedge_irqs_irq1_value <= field_combo_posedge_irqs_irq1_next;
        end
        field_storage_posedge_irqs_irq1_next_q <= hwif_in_posedge_irqs_irq1;
    end
    assign hwif_out_posedge_irqs_intr =
        |field_storage_posedge_irqs_irq0_value
        || |field_storage_posedge_irqs_irq1_value;
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_negedge_irqs_irq0_value;
        load_next_c = '0;
        if(decoded_reg_strb_negedge_irqs && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage_negedge_irqs_irq0_value & ~(decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if((field_storage_negedge_irqs_irq0_next_q & ~hwif_in_negedge_irqs_irq0) != '0) begin // negedge stickybit
            next_c = field_storage_negedge_irqs_irq0_value | (field_storage_negedge_irqs_irq0_next_q & ~hwif_in_negedge_irqs_irq0);
            load_next_c = '1;
        end
        field_combo_negedge_irqs_irq0_next = next_c;
        field_combo_negedge_irqs_irq0_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_negedge_irqs_irq0_value <= 8'h0;
            field_storage_negedge_irqs_irq0_next_q <= 8'h0;
        end else if(field_combo_negedge_irqs_irq0_load_next) begin
            field_storage_negedge_irqs_irq0_value <= field_combo_negedge_irqs_irq0_next;
        end
        field_storage_negedge_irqs_irq0_next_q <= hwif_in_negedge_irqs_irq0;
    end
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_negedge_irqs_irq1_value;
        load_next_c = '0;
        if(decoded_reg_strb_negedge_irqs && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage_negedge_irqs_irq1_value & ~(decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else if(field_storage_negedge_irqs_irq1_next_q & ~hwif_in_negedge_irqs_irq1) begin // negedge stickybit
            next_c = '1;
            load_next_c = '1;
        end
        field_combo_negedge_irqs_irq1_next = next_c;
        field_combo_negedge_irqs_irq1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_negedge_irqs_irq1_value <= 1'h0;
            field_storage_negedge_irqs_irq1_next_q <= 1'h0;
        end else if(field_combo_negedge_irqs_irq1_load_next) begin
            field_storage_negedge_irqs_irq1_value <= field_combo_negedge_irqs_irq1_next;
        end
        field_storage_negedge_irqs_irq1_next_q <= hwif_in_negedge_irqs_irq1;
    end
    assign hwif_out_negedge_irqs_intr =
        |field_storage_negedge_irqs_irq0_value
        || |field_storage_negedge_irqs_irq1_value;
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_bothedge_irqs_irq0_value;
        load_next_c = '0;
        if(decoded_reg_strb_bothedge_irqs && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage_bothedge_irqs_irq0_value & ~(decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if(field_storage_bothedge_irqs_irq0_next_q != hwif_in_bothedge_irqs_irq0) begin // bothedge stickybit
            next_c = field_storage_bothedge_irqs_irq0_value | (field_storage_bothedge_irqs_irq0_next_q ^ hwif_in_bothedge_irqs_irq0);
            load_next_c = '1;
        end
        field_combo_bothedge_irqs_irq0_next = next_c;
        field_combo_bothedge_irqs_irq0_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_bothedge_irqs_irq0_value <= 8'h0;
            field_storage_bothedge_irqs_irq0_next_q <= 8'h0;
        end else if(field_combo_bothedge_irqs_irq0_load_next) begin
            field_storage_bothedge_irqs_irq0_value <= field_combo_bothedge_irqs_irq0_next;
        end
        field_storage_bothedge_irqs_irq0_next_q <= hwif_in_bothedge_irqs_irq0;
    end
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_bothedge_irqs_irq1_value;
        load_next_c = '0;
        if(decoded_reg_strb_bothedge_irqs && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage_bothedge_irqs_irq1_value & ~(decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else if(field_storage_bothedge_irqs_irq1_next_q != hwif_in_bothedge_irqs_irq1) begin // bothedge stickybit
            next_c = '1;
            load_next_c = '1;
        end
        field_combo_bothedge_irqs_irq1_next = next_c;
        field_combo_bothedge_irqs_irq1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_bothedge_irqs_irq1_value <= 1'h0;
            field_storage_bothedge_irqs_irq1_next_q <= 1'h0;
        end else if(field_combo_bothedge_irqs_irq1_load_next) begin
            field_storage_bothedge_irqs_irq1_value <= field_combo_bothedge_irqs_irq1_next;
        end
        field_storage_bothedge_irqs_irq1_next_q <= hwif_in_bothedge_irqs_irq1;
    end
    assign hwif_out_bothedge_irqs_intr =
        |field_storage_bothedge_irqs_irq0_value
        || |field_storage_bothedge_irqs_irq1_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_top_irq_level_active_value;
        load_next_c = '0;

        // HW Write
        next_c = hwif_out_level_irqs_1_intr;
        load_next_c = '1;
        field_combo_top_irq_level_active_next = next_c;
        field_combo_top_irq_level_active_load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo_top_irq_level_active_load_next) begin
            field_storage_top_irq_level_active_value <= field_combo_top_irq_level_active_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_top_irq_posedge_active_value;
        load_next_c = '0;

        // HW Write
        next_c = hwif_out_posedge_irqs_intr;
        load_next_c = '1;
        field_combo_top_irq_posedge_active_next = next_c;
        field_combo_top_irq_posedge_active_load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo_top_irq_posedge_active_load_next) begin
            field_storage_top_irq_posedge_active_value <= field_combo_top_irq_posedge_active_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_top_irq_negedge_active_value;
        load_next_c = '0;

        // HW Write
        next_c = hwif_out_negedge_irqs_intr;
        load_next_c = '1;
        field_combo_top_irq_negedge_active_next = next_c;
        field_combo_top_irq_negedge_active_load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo_top_irq_negedge_active_load_next) begin
            field_storage_top_irq_negedge_active_value <= field_combo_top_irq_negedge_active_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_top_irq_bothedge_active_value;
        load_next_c = '0;

        // HW Write
        next_c = hwif_out_bothedge_irqs_intr;
        load_next_c = '1;
        field_combo_top_irq_bothedge_active_next = next_c;
        field_combo_top_irq_bothedge_active_load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo_top_irq_bothedge_active_load_next) begin
            field_storage_top_irq_bothedge_active_value <= field_combo_top_irq_bothedge_active_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_top_irq_level_halt_active_value;
        load_next_c = '0;

        // HW Write
        next_c = hwif_out_level_irqs_2_halt;
        load_next_c = '1;
        field_combo_top_irq_level_halt_active_next = next_c;
        field_combo_top_irq_level_halt_active_load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo_top_irq_level_halt_active_load_next) begin
            field_storage_top_irq_level_halt_active_value <= field_combo_top_irq_level_halt_active_next;
        end
    end
    assign hwif_out_top_irq_intr =
        |field_storage_top_irq_level_active_value
        || |field_storage_top_irq_posedge_active_value
        || |field_storage_top_irq_negedge_active_value
        || |field_storage_top_irq_bothedge_active_value
        || |field_storage_top_irq_level_halt_active_value;
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_stickyreg_stickyfield_value;
        load_next_c = '0;
        if(decoded_reg_strb_stickyreg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_stickyreg_stickyfield_value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if((field_storage_stickyreg_stickyfield_value == '0) && (hwif_in_stickyreg_stickyfield != '0)) begin // multi-bit sticky
            next_c = hwif_in_stickyreg_stickyfield;
            load_next_c = '1;
        end
        field_combo_stickyreg_stickyfield_next = next_c;
        field_combo_stickyreg_stickyfield_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_stickyreg_stickyfield_value <= 8'h0;
        end else if(field_combo_stickyreg_stickyfield_load_next) begin
            field_storage_stickyreg_stickyfield_value <= field_combo_stickyreg_stickyfield_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_ctrl_enable_irq0_value;
        load_next_c = '0;
        if(decoded_reg_strb_ctrl_enable && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_ctrl_enable_irq0_value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo_ctrl_enable_irq0_next = next_c;
        field_combo_ctrl_enable_irq0_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_ctrl_enable_irq0_value <= 8'h0;
        end else if(field_combo_ctrl_enable_irq0_load_next) begin
            field_storage_ctrl_enable_irq0_value <= field_combo_ctrl_enable_irq0_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_ctrl_enable_irq1_value;
        load_next_c = '0;
        if(decoded_reg_strb_ctrl_enable && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_ctrl_enable_irq1_value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo_ctrl_enable_irq1_next = next_c;
        field_combo_ctrl_enable_irq1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_ctrl_enable_irq1_value <= 1'h0;
        end else if(field_combo_ctrl_enable_irq1_load_next) begin
            field_storage_ctrl_enable_irq1_value <= field_combo_ctrl_enable_irq1_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_ctrl_mask_irq0_value;
        load_next_c = '0;
        if(decoded_reg_strb_ctrl_mask && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_ctrl_mask_irq0_value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo_ctrl_mask_irq0_next = next_c;
        field_combo_ctrl_mask_irq0_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_ctrl_mask_irq0_value <= 8'h0;
        end else if(field_combo_ctrl_mask_irq0_load_next) begin
            field_storage_ctrl_mask_irq0_value <= field_combo_ctrl_mask_irq0_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_ctrl_mask_irq1_value;
        load_next_c = '0;
        if(decoded_reg_strb_ctrl_mask && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_ctrl_mask_irq1_value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo_ctrl_mask_irq1_next = next_c;
        field_combo_ctrl_mask_irq1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_ctrl_mask_irq1_value <= 1'h0;
        end else if(field_combo_ctrl_mask_irq1_load_next) begin
            field_storage_ctrl_mask_irq1_value <= field_combo_ctrl_mask_irq1_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_ctrl_haltenable_irq0_value;
        load_next_c = '0;
        if(decoded_reg_strb_ctrl_haltenable && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_ctrl_haltenable_irq0_value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo_ctrl_haltenable_irq0_next = next_c;
        field_combo_ctrl_haltenable_irq0_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_ctrl_haltenable_irq0_value <= 8'h0;
        end else if(field_combo_ctrl_haltenable_irq0_load_next) begin
            field_storage_ctrl_haltenable_irq0_value <= field_combo_ctrl_haltenable_irq0_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_ctrl_haltenable_irq1_value;
        load_next_c = '0;
        if(decoded_reg_strb_ctrl_haltenable && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_ctrl_haltenable_irq1_value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo_ctrl_haltenable_irq1_next = next_c;
        field_combo_ctrl_haltenable_irq1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_ctrl_haltenable_irq1_value <= 1'h0;
        end else if(field_combo_ctrl_haltenable_irq1_load_next) begin
            field_storage_ctrl_haltenable_irq1_value <= field_combo_ctrl_haltenable_irq1_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_ctrl_haltmask_irq0_value;
        load_next_c = '0;
        if(decoded_reg_strb_ctrl_haltmask && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_ctrl_haltmask_irq0_value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo_ctrl_haltmask_irq0_next = next_c;
        field_combo_ctrl_haltmask_irq0_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_ctrl_haltmask_irq0_value <= 8'h0;
        end else if(field_combo_ctrl_haltmask_irq0_load_next) begin
            field_storage_ctrl_haltmask_irq0_value <= field_combo_ctrl_haltmask_irq0_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_ctrl_haltmask_irq1_value;
        load_next_c = '0;
        if(decoded_reg_strb_ctrl_haltmask && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_ctrl_haltmask_irq1_value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo_ctrl_haltmask_irq1_next = next_c;
        field_combo_ctrl_haltmask_irq1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_ctrl_haltmask_irq1_value <= 1'h0;
        end else if(field_combo_ctrl_haltmask_irq1_load_next) begin
            field_storage_ctrl_haltmask_irq1_value <= field_combo_ctrl_haltmask_irq1_next;
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

//--------------------------------------------------------------------------
// Readback
//--------------------------------------------------------------------------
    logic readback_external_rd_ack;
    assign readback_external_rd_ack = 0;

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[12];
    assign readback_array[0][7:0] = (decoded_reg_strb_level_irqs_1 && !decoded_req_is_wr) ? field_storage_level_irqs_1_irq0_value : '0;
    assign readback_array[0][8:8] = (decoded_reg_strb_level_irqs_1 && !decoded_req_is_wr) ? field_storage_level_irqs_1_irq1_value : '0;
    assign readback_array[0][31:9] = '0;
    assign readback_array[1][7:0] = (decoded_reg_strb_level_irqs_2 && !decoded_req_is_wr) ? field_storage_level_irqs_2_irq0_value : '0;
    assign readback_array[1][8:8] = (decoded_reg_strb_level_irqs_2 && !decoded_req_is_wr) ? field_storage_level_irqs_2_irq1_value : '0;
    assign readback_array[1][31:9] = '0;
    assign readback_array[2][7:0] = (decoded_reg_strb_level_irqs_3 && !decoded_req_is_wr) ? field_storage_level_irqs_3_irq0_value : '0;
    assign readback_array[2][8:8] = (decoded_reg_strb_level_irqs_3 && !decoded_req_is_wr) ? field_storage_level_irqs_3_irq1_value : '0;
    assign readback_array[2][31:9] = '0;
    assign readback_array[3][7:0] = (decoded_reg_strb_posedge_irqs && !decoded_req_is_wr) ? field_storage_posedge_irqs_irq0_value : '0;
    assign readback_array[3][8:8] = (decoded_reg_strb_posedge_irqs && !decoded_req_is_wr) ? field_storage_posedge_irqs_irq1_value : '0;
    assign readback_array[3][31:9] = '0;
    assign readback_array[4][7:0] = (decoded_reg_strb_negedge_irqs && !decoded_req_is_wr) ? field_storage_negedge_irqs_irq0_value : '0;
    assign readback_array[4][8:8] = (decoded_reg_strb_negedge_irqs && !decoded_req_is_wr) ? field_storage_negedge_irqs_irq1_value : '0;
    assign readback_array[4][31:9] = '0;
    assign readback_array[5][7:0] = (decoded_reg_strb_bothedge_irqs && !decoded_req_is_wr) ? field_storage_bothedge_irqs_irq0_value : '0;
    assign readback_array[5][8:8] = (decoded_reg_strb_bothedge_irqs && !decoded_req_is_wr) ? field_storage_bothedge_irqs_irq1_value : '0;
    assign readback_array[5][31:9] = '0;
    assign readback_array[6][0:0] = (decoded_reg_strb_top_irq && !decoded_req_is_wr) ? field_storage_top_irq_level_active_value : '0;
    assign readback_array[6][1:1] = (decoded_reg_strb_top_irq && !decoded_req_is_wr) ? field_storage_top_irq_posedge_active_value : '0;
    assign readback_array[6][2:2] = (decoded_reg_strb_top_irq && !decoded_req_is_wr) ? field_storage_top_irq_negedge_active_value : '0;
    assign readback_array[6][3:3] = (decoded_reg_strb_top_irq && !decoded_req_is_wr) ? field_storage_top_irq_bothedge_active_value : '0;
    assign readback_array[6][4:4] = (decoded_reg_strb_top_irq && !decoded_req_is_wr) ? field_storage_top_irq_level_halt_active_value : '0;
    assign readback_array[6][31:5] = '0;
    assign readback_array[7][7:0] = (decoded_reg_strb_stickyreg && !decoded_req_is_wr) ? field_storage_stickyreg_stickyfield_value : '0;
    assign readback_array[7][31:8] = '0;
    assign readback_array[8][7:0] = (decoded_reg_strb_ctrl_enable && !decoded_req_is_wr) ? field_storage_ctrl_enable_irq0_value : '0;
    assign readback_array[8][8:8] = (decoded_reg_strb_ctrl_enable && !decoded_req_is_wr) ? field_storage_ctrl_enable_irq1_value : '0;
    assign readback_array[8][31:9] = '0;
    assign readback_array[9][7:0] = (decoded_reg_strb_ctrl_mask && !decoded_req_is_wr) ? field_storage_ctrl_mask_irq0_value : '0;
    assign readback_array[9][8:8] = (decoded_reg_strb_ctrl_mask && !decoded_req_is_wr) ? field_storage_ctrl_mask_irq1_value : '0;
    assign readback_array[9][31:9] = '0;
    assign readback_array[10][7:0] = (decoded_reg_strb_ctrl_haltenable && !decoded_req_is_wr) ? field_storage_ctrl_haltenable_irq0_value : '0;
    assign readback_array[10][8:8] = (decoded_reg_strb_ctrl_haltenable && !decoded_req_is_wr) ? field_storage_ctrl_haltenable_irq1_value : '0;
    assign readback_array[10][31:9] = '0;
    assign readback_array[11][7:0] = (decoded_reg_strb_ctrl_haltmask && !decoded_req_is_wr) ? field_storage_ctrl_haltmask_irq0_value : '0;
    assign readback_array[11][8:8] = (decoded_reg_strb_ctrl_haltmask && !decoded_req_is_wr) ? field_storage_ctrl_haltmask_irq1_value : '0;
    assign readback_array[11][31:9] = '0;

    // Reduce the array
    // always_comb begin
    always @(*) begin
        logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<12; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
