// Generated by PeakRDL-regblock HWIF Wrapper Tool
//  https://github.com/SystemRDL/PeakRDL-regblock
//
// This is a wrapper module that flattens the hwif structs into individual signals

module regblock_wrapper (
        input wire clk,
        input wire rst,
        input wire s_apb_psel,
        input wire s_apb_penable,
        input wire s_apb_pwrite,
        input wire [2:0] s_apb_pprot,
        input wire [8:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,
        input logic [7:0] hwif_in_level_irqs_1_irq0,
        input logic hwif_in_level_irqs_1_irq1,
        input logic [7:0] hwif_in_level_irqs_2_irq0,
        input logic hwif_in_level_irqs_2_irq1,
        input logic [7:0] hwif_in_level_irqs_3_irq0,
        input logic hwif_in_level_irqs_3_irq1,
        input logic [7:0] hwif_in_level_irqs_we_irq0,
        input logic hwif_in_level_irqs_we_irq1,
        input logic [7:0] hwif_in_level_irqs_wel_irq0,
        input logic hwif_in_level_irqs_wel_irq1,
        input logic [7:0] hwif_in_posedge_irqs_irq0,
        input logic hwif_in_posedge_irqs_irq1,
        input logic [7:0] hwif_in_posedge_we_irqs_irq0,
        input logic hwif_in_posedge_we_irqs_irq1,
        input logic [7:0] hwif_in_posedge_wel_irqs_irq0,
        input logic hwif_in_posedge_wel_irqs_irq1,
        input logic [7:0] hwif_in_negedge_irqs_irq0,
        input logic hwif_in_negedge_irqs_irq1,
        input logic [7:0] hwif_in_negedge_we_irqs_irq0,
        input logic hwif_in_negedge_we_irqs_irq1,
        input logic [7:0] hwif_in_negedge_wel_irqs_irq0,
        input logic hwif_in_negedge_wel_irqs_irq1,
        input logic [7:0] hwif_in_bothedge_irqs_irq0,
        input logic hwif_in_bothedge_irqs_irq1,
        input logic [7:0] hwif_in_bothedge_we_irqs_irq0,
        input logic hwif_in_bothedge_we_irqs_irq1,
        input logic [7:0] hwif_in_bothedge_wel_irqs_irq0,
        input logic hwif_in_bothedge_wel_irqs_irq1,
        input logic [7:0] hwif_in_stickyreg_stickyfield,
        output logic hwif_out_level_irqs_1_intr,
        output logic hwif_out_level_irqs_2_intr,
        output logic hwif_out_level_irqs_2_halt,
        output logic hwif_out_level_irqs_3_intr,
        output logic hwif_out_level_irqs_3_halt,
        output logic hwif_out_level_irqs_we_intr,
        output logic hwif_out_level_irqs_wel_intr,
        output logic hwif_out_posedge_irqs_intr,
        output logic hwif_out_posedge_we_irqs_intr,
        output logic hwif_out_posedge_wel_irqs_intr,
        output logic hwif_out_negedge_irqs_intr,
        output logic hwif_out_negedge_we_irqs_intr,
        output logic hwif_out_negedge_wel_irqs_intr,
        output logic hwif_out_bothedge_irqs_intr,
        output logic hwif_out_bothedge_we_irqs_intr,
        output logic hwif_out_bothedge_wel_irqs_intr,
        output logic hwif_out_top_irq_intr
    );

    //--------------------------------------------------------------------------
    // Internal hwif struct signals
    //--------------------------------------------------------------------------
    regblock_pkg::regblock__in_t hwif_in;
    regblock_pkg::regblock__out_t hwif_out;

    //--------------------------------------------------------------------------
    // Flatten struct to individual signals
    //--------------------------------------------------------------------------
    assign hwif_in.level_irqs_1.irq0.next = hwif_in_level_irqs_1_irq0;
    assign hwif_in.level_irqs_1.irq1.next = hwif_in_level_irqs_1_irq1;
    assign hwif_in.level_irqs_2.irq0.next = hwif_in_level_irqs_2_irq0;
    assign hwif_in.level_irqs_2.irq1.next = hwif_in_level_irqs_2_irq1;
    assign hwif_in.level_irqs_3.irq0.next = hwif_in_level_irqs_3_irq0;
    assign hwif_in.level_irqs_3.irq1.next = hwif_in_level_irqs_3_irq1;
    assign hwif_in.level_irqs_we.irq0.next = hwif_in_level_irqs_we_irq0;
    assign hwif_in.level_irqs_we.irq1.next = hwif_in_level_irqs_we_irq1;
    assign hwif_in.level_irqs_wel.irq0.next = hwif_in_level_irqs_wel_irq0;
    assign hwif_in.level_irqs_wel.irq1.next = hwif_in_level_irqs_wel_irq1;
    assign hwif_in.posedge_irqs.irq0.next = hwif_in_posedge_irqs_irq0;
    assign hwif_in.posedge_irqs.irq1.next = hwif_in_posedge_irqs_irq1;
    assign hwif_in.posedge_we_irqs.irq0.next = hwif_in_posedge_we_irqs_irq0;
    assign hwif_in.posedge_we_irqs.irq1.next = hwif_in_posedge_we_irqs_irq1;
    assign hwif_in.posedge_wel_irqs.irq0.next = hwif_in_posedge_wel_irqs_irq0;
    assign hwif_in.posedge_wel_irqs.irq1.next = hwif_in_posedge_wel_irqs_irq1;
    assign hwif_in.negedge_irqs.irq0.next = hwif_in_negedge_irqs_irq0;
    assign hwif_in.negedge_irqs.irq1.next = hwif_in_negedge_irqs_irq1;
    assign hwif_in.negedge_we_irqs.irq0.next = hwif_in_negedge_we_irqs_irq0;
    assign hwif_in.negedge_we_irqs.irq1.next = hwif_in_negedge_we_irqs_irq1;
    assign hwif_in.negedge_wel_irqs.irq0.next = hwif_in_negedge_wel_irqs_irq0;
    assign hwif_in.negedge_wel_irqs.irq1.next = hwif_in_negedge_wel_irqs_irq1;
    assign hwif_in.bothedge_irqs.irq0.next = hwif_in_bothedge_irqs_irq0;
    assign hwif_in.bothedge_irqs.irq1.next = hwif_in_bothedge_irqs_irq1;
    assign hwif_in.bothedge_we_irqs.irq0.next = hwif_in_bothedge_we_irqs_irq0;
    assign hwif_in.bothedge_we_irqs.irq1.next = hwif_in_bothedge_we_irqs_irq1;
    assign hwif_in.bothedge_wel_irqs.irq0.next = hwif_in_bothedge_wel_irqs_irq0;
    assign hwif_in.bothedge_wel_irqs.irq1.next = hwif_in_bothedge_wel_irqs_irq1;
    assign hwif_in.stickyreg.stickyfield.next = hwif_in_stickyreg_stickyfield;

    assign hwif_out_level_irqs_1_intr = hwif_out.level_irqs_1.intr;
    assign hwif_out_level_irqs_2_intr = hwif_out.level_irqs_2.intr;
    assign hwif_out_level_irqs_2_halt = hwif_out.level_irqs_2.halt;
    assign hwif_out_level_irqs_3_intr = hwif_out.level_irqs_3.intr;
    assign hwif_out_level_irqs_3_halt = hwif_out.level_irqs_3.halt;
    assign hwif_out_level_irqs_we_intr = hwif_out.level_irqs_we.intr;
    assign hwif_out_level_irqs_wel_intr = hwif_out.level_irqs_wel.intr;
    assign hwif_out_posedge_irqs_intr = hwif_out.posedge_irqs.intr;
    assign hwif_out_posedge_we_irqs_intr = hwif_out.posedge_we_irqs.intr;
    assign hwif_out_posedge_wel_irqs_intr = hwif_out.posedge_wel_irqs.intr;
    assign hwif_out_negedge_irqs_intr = hwif_out.negedge_irqs.intr;
    assign hwif_out_negedge_we_irqs_intr = hwif_out.negedge_we_irqs.intr;
    assign hwif_out_negedge_wel_irqs_intr = hwif_out.negedge_wel_irqs.intr;
    assign hwif_out_bothedge_irqs_intr = hwif_out.bothedge_irqs.intr;
    assign hwif_out_bothedge_we_irqs_intr = hwif_out.bothedge_we_irqs.intr;
    assign hwif_out_bothedge_wel_irqs_intr = hwif_out.bothedge_wel_irqs.intr;
    assign hwif_out_top_irq_intr = hwif_out.top_irq.intr;

    //--------------------------------------------------------------------------
    // Instantiate the main regblock module
    //--------------------------------------------------------------------------
    regblock i_regblock (
        .clk(clk),
        .rst(rst),
        .s_apb_psel(s_apb_psel),
        .s_apb_penable(s_apb_penable),
        .s_apb_pwrite(s_apb_pwrite),
        .s_apb_pprot(s_apb_pprot),
        .s_apb_paddr(s_apb_paddr),
        .s_apb_pwdata(s_apb_pwdata),
        .s_apb_pstrb(s_apb_pstrb),
        .s_apb_pready(s_apb_pready),
        .s_apb_prdata(s_apb_prdata),
        .s_apb_pslverr(s_apb_pslverr),
        .hwif_in(hwif_in),
        .hwif_out(hwif_out)
    );

endmodule
