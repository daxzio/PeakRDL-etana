// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module regblock (
        input wire clk,
        input wire rst,

        input wire s_apb_psel,
        input wire s_apb_penable,
        input wire s_apb_pwrite,
        input wire [2:0] s_apb_pprot,
        input wire [8:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,

        input regblock_pkg::regblock__in_t hwif_in,
        output regblock_pkg::regblock__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [8:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    // Request
    logic is_active;
    always_ff @(posedge clk) begin
        if(rst) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= {s_apb_paddr[8:2], 2'b0};
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<4; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic level_irqs_1;
        logic level_irqs_2;
        logic level_irqs_3;
        logic posedge_irqs;
        logic negedge_irqs;
        logic bothedge_irqs;
        logic top_irq;
        logic stickyreg;
        logic ctrl_enable;
        logic ctrl_mask;
        logic ctrl_haltenable;
        logic ctrl_haltmask;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        decoded_reg_strb.level_irqs_1 = cpuif_req_masked & (cpuif_addr == 9'h0);
        decoded_reg_strb.level_irqs_2 = cpuif_req_masked & (cpuif_addr == 9'h4);
        decoded_reg_strb.level_irqs_3 = cpuif_req_masked & (cpuif_addr == 9'h8);
        decoded_reg_strb.posedge_irqs = cpuif_req_masked & (cpuif_addr == 9'h10);
        decoded_reg_strb.negedge_irqs = cpuif_req_masked & (cpuif_addr == 9'h20);
        decoded_reg_strb.bothedge_irqs = cpuif_req_masked & (cpuif_addr == 9'h30);
        decoded_reg_strb.top_irq = cpuif_req_masked & (cpuif_addr == 9'h40);
        decoded_reg_strb.stickyreg = cpuif_req_masked & (cpuif_addr == 9'h50);
        decoded_reg_strb.ctrl_enable = cpuif_req_masked & (cpuif_addr == 9'h100);
        decoded_reg_strb.ctrl_mask = cpuif_req_masked & (cpuif_addr == 9'h104);
        decoded_reg_strb.ctrl_haltenable = cpuif_req_masked & (cpuif_addr == 9'h108);
        decoded_reg_strb.ctrl_haltmask = cpuif_req_masked & (cpuif_addr == 9'h10c);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } irq0;
            struct {
                logic next;
                logic load_next;
            } irq1;
        } level_irqs_1;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } irq0;
            struct {
                logic next;
                logic load_next;
            } irq1;
        } level_irqs_2;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } irq0;
            struct {
                logic next;
                logic load_next;
            } irq1;
        } level_irqs_3;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } irq0;
            struct {
                logic next;
                logic load_next;
            } irq1;
        } posedge_irqs;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } irq0;
            struct {
                logic next;
                logic load_next;
            } irq1;
        } negedge_irqs;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } irq0;
            struct {
                logic next;
                logic load_next;
            } irq1;
        } bothedge_irqs;
        struct {
            struct {
                logic next;
                logic load_next;
            } level_active;
            struct {
                logic next;
                logic load_next;
            } posedge_active;
            struct {
                logic next;
                logic load_next;
            } negedge_active;
            struct {
                logic next;
                logic load_next;
            } bothedge_active;
            struct {
                logic next;
                logic load_next;
            } level_halt_active;
        } top_irq;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } stickyfield;
        } stickyreg;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } irq0;
            struct {
                logic next;
                logic load_next;
            } irq1;
        } ctrl_enable;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } irq0;
            struct {
                logic next;
                logic load_next;
            } irq1;
        } ctrl_mask;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } irq0;
            struct {
                logic next;
                logic load_next;
            } irq1;
        } ctrl_haltenable;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } irq0;
            struct {
                logic next;
                logic load_next;
            } irq1;
        } ctrl_haltmask;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic [7:0] value;
            } irq0;
            struct {
                logic value;
            } irq1;
        } level_irqs_1;
        struct {
            struct {
                logic [7:0] value;
            } irq0;
            struct {
                logic value;
            } irq1;
        } level_irqs_2;
        struct {
            struct {
                logic [7:0] value;
            } irq0;
            struct {
                logic value;
            } irq1;
        } level_irqs_3;
        struct {
            struct {
                logic [7:0] value;
                logic [7:0] next_q;
            } irq0;
            struct {
                logic value;
                logic next_q;
            } irq1;
        } posedge_irqs;
        struct {
            struct {
                logic [7:0] value;
                logic [7:0] next_q;
            } irq0;
            struct {
                logic value;
                logic next_q;
            } irq1;
        } negedge_irqs;
        struct {
            struct {
                logic [7:0] value;
                logic [7:0] next_q;
            } irq0;
            struct {
                logic value;
                logic next_q;
            } irq1;
        } bothedge_irqs;
        struct {
            struct {
                logic value;
            } level_active;
            struct {
                logic value;
            } posedge_active;
            struct {
                logic value;
            } negedge_active;
            struct {
                logic value;
            } bothedge_active;
            struct {
                logic value;
            } level_halt_active;
        } top_irq;
        struct {
            struct {
                logic [7:0] value;
            } stickyfield;
        } stickyreg;
        struct {
            struct {
                logic [7:0] value;
            } irq0;
            struct {
                logic value;
            } irq1;
        } ctrl_enable;
        struct {
            struct {
                logic [7:0] value;
            } irq0;
            struct {
                logic value;
            } irq1;
        } ctrl_mask;
        struct {
            struct {
                logic [7:0] value;
            } irq0;
            struct {
                logic value;
            } irq1;
        } ctrl_haltenable;
        struct {
            struct {
                logic [7:0] value;
            } irq0;
            struct {
                logic value;
            } irq1;
        } ctrl_haltmask;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: regblock.level_irqs_1.irq0
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.level_irqs_1.irq0.value;
        load_next_c = '0;
        if(decoded_reg_strb.level_irqs_1 && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.level_irqs_1.irq0.value & ~(decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if(hwif_in.level_irqs_1.irq0.next != '0) begin // stickybit
            next_c = field_storage.level_irqs_1.irq0.value | hwif_in.level_irqs_1.irq0.next;
            load_next_c = '1;
        end
        field_combo.level_irqs_1.irq0.next = next_c;
        field_combo.level_irqs_1.irq0.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.level_irqs_1.irq0.value <= 8'h0;
        end else begin
            if(field_combo.level_irqs_1.irq0.load_next) begin
                field_storage.level_irqs_1.irq0.value <= field_combo.level_irqs_1.irq0.next;
            end
        end
    end
    // Field: regblock.level_irqs_1.irq1
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.level_irqs_1.irq1.value;
        load_next_c = '0;
        if(decoded_reg_strb.level_irqs_1 && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.level_irqs_1.irq1.value & ~(decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else if(hwif_in.level_irqs_1.irq1.next) begin // stickybit
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.level_irqs_1.irq1.next = next_c;
        field_combo.level_irqs_1.irq1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.level_irqs_1.irq1.value <= 1'h0;
        end else begin
            if(field_combo.level_irqs_1.irq1.load_next) begin
                field_storage.level_irqs_1.irq1.value <= field_combo.level_irqs_1.irq1.next;
            end
        end
    end
    assign hwif_out.level_irqs_1.intr =
        |field_storage.level_irqs_1.irq0.value
        || |field_storage.level_irqs_1.irq1.value;
    // Field: regblock.level_irqs_2.irq0
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.level_irqs_2.irq0.value;
        load_next_c = '0;
        if(decoded_reg_strb.level_irqs_2 && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.level_irqs_2.irq0.value & ~(decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if(hwif_in.level_irqs_2.irq0.next != '0) begin // stickybit
            next_c = field_storage.level_irqs_2.irq0.value | hwif_in.level_irqs_2.irq0.next;
            load_next_c = '1;
        end
        field_combo.level_irqs_2.irq0.next = next_c;
        field_combo.level_irqs_2.irq0.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.level_irqs_2.irq0.value <= 8'h0;
        end else begin
            if(field_combo.level_irqs_2.irq0.load_next) begin
                field_storage.level_irqs_2.irq0.value <= field_combo.level_irqs_2.irq0.next;
            end
        end
    end
    // Field: regblock.level_irqs_2.irq1
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.level_irqs_2.irq1.value;
        load_next_c = '0;
        if(decoded_reg_strb.level_irqs_2 && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.level_irqs_2.irq1.value & ~(decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else if(hwif_in.level_irqs_2.irq1.next) begin // stickybit
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.level_irqs_2.irq1.next = next_c;
        field_combo.level_irqs_2.irq1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.level_irqs_2.irq1.value <= 1'h0;
        end else begin
            if(field_combo.level_irqs_2.irq1.load_next) begin
                field_storage.level_irqs_2.irq1.value <= field_combo.level_irqs_2.irq1.next;
            end
        end
    end
    assign hwif_out.level_irqs_2.intr =
        |(field_storage.level_irqs_2.irq0.value & field_storage.ctrl_enable.irq0.value)
        || |(field_storage.level_irqs_2.irq1.value & field_storage.ctrl_enable.irq1.value);
    assign hwif_out.level_irqs_2.halt =
        |(field_storage.level_irqs_2.irq0.value & field_storage.ctrl_haltenable.irq0.value)
        || |(field_storage.level_irqs_2.irq1.value & field_storage.ctrl_haltenable.irq1.value);
    // Field: regblock.level_irqs_3.irq0
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.level_irqs_3.irq0.value;
        load_next_c = '0;
        if(decoded_reg_strb.level_irqs_3 && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.level_irqs_3.irq0.value & ~(decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if(hwif_in.level_irqs_3.irq0.next != '0) begin // stickybit
            next_c = field_storage.level_irqs_3.irq0.value | hwif_in.level_irqs_3.irq0.next;
            load_next_c = '1;
        end
        field_combo.level_irqs_3.irq0.next = next_c;
        field_combo.level_irqs_3.irq0.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.level_irqs_3.irq0.value <= 8'h0;
        end else begin
            if(field_combo.level_irqs_3.irq0.load_next) begin
                field_storage.level_irqs_3.irq0.value <= field_combo.level_irqs_3.irq0.next;
            end
        end
    end
    // Field: regblock.level_irqs_3.irq1
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.level_irqs_3.irq1.value;
        load_next_c = '0;
        if(decoded_reg_strb.level_irqs_3 && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.level_irqs_3.irq1.value & ~(decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else if(hwif_in.level_irqs_3.irq1.next) begin // stickybit
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.level_irqs_3.irq1.next = next_c;
        field_combo.level_irqs_3.irq1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.level_irqs_3.irq1.value <= 1'h0;
        end else begin
            if(field_combo.level_irqs_3.irq1.load_next) begin
                field_storage.level_irqs_3.irq1.value <= field_combo.level_irqs_3.irq1.next;
            end
        end
    end
    assign hwif_out.level_irqs_3.intr =
        |(field_storage.level_irqs_3.irq0.value & ~field_storage.ctrl_mask.irq0.value)
        || |(field_storage.level_irqs_3.irq1.value & ~field_storage.ctrl_mask.irq1.value);
    assign hwif_out.level_irqs_3.halt =
        |(field_storage.level_irqs_3.irq0.value & ~field_storage.ctrl_haltmask.irq0.value)
        || |(field_storage.level_irqs_3.irq1.value & ~field_storage.ctrl_haltmask.irq1.value);
    // Field: regblock.posedge_irqs.irq0
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.posedge_irqs.irq0.value;
        load_next_c = '0;
        if(decoded_reg_strb.posedge_irqs && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.posedge_irqs.irq0.value & ~(decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if((~field_storage.posedge_irqs.irq0.next_q & hwif_in.posedge_irqs.irq0.next) != '0) begin // posedge stickybit
            next_c = field_storage.posedge_irqs.irq0.value | (~field_storage.posedge_irqs.irq0.next_q & hwif_in.posedge_irqs.irq0.next);
            load_next_c = '1;
        end
        field_combo.posedge_irqs.irq0.next = next_c;
        field_combo.posedge_irqs.irq0.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.posedge_irqs.irq0.value <= 8'h0;
            field_storage.posedge_irqs.irq0.next_q <= 8'h0;
        end else begin
            if(field_combo.posedge_irqs.irq0.load_next) begin
                field_storage.posedge_irqs.irq0.value <= field_combo.posedge_irqs.irq0.next;
            end
            field_storage.posedge_irqs.irq0.next_q <= hwif_in.posedge_irqs.irq0.next;
        end
    end
    // Field: regblock.posedge_irqs.irq1
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.posedge_irqs.irq1.value;
        load_next_c = '0;
        if(decoded_reg_strb.posedge_irqs && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.posedge_irqs.irq1.value & ~(decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else if((~field_storage.posedge_irqs.irq1.next_q & hwif_in.posedge_irqs.irq1.next) != '0) begin // posedge stickybit
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.posedge_irqs.irq1.next = next_c;
        field_combo.posedge_irqs.irq1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.posedge_irqs.irq1.value <= 1'h0;
            field_storage.posedge_irqs.irq1.next_q <= 1'h0;
        end else begin
            if(field_combo.posedge_irqs.irq1.load_next) begin
                field_storage.posedge_irqs.irq1.value <= field_combo.posedge_irqs.irq1.next;
            end
            field_storage.posedge_irqs.irq1.next_q <= hwif_in.posedge_irqs.irq1.next;
        end
    end
    assign hwif_out.posedge_irqs.intr =
        |field_storage.posedge_irqs.irq0.value
        || |field_storage.posedge_irqs.irq1.value;
    // Field: regblock.negedge_irqs.irq0
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.negedge_irqs.irq0.value;
        load_next_c = '0;
        if(decoded_reg_strb.negedge_irqs && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.negedge_irqs.irq0.value & ~(decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if((field_storage.negedge_irqs.irq0.next_q & ~hwif_in.negedge_irqs.irq0.next) != '0) begin // negedge stickybit
            next_c = field_storage.negedge_irqs.irq0.value | (field_storage.negedge_irqs.irq0.next_q & ~hwif_in.negedge_irqs.irq0.next);
            load_next_c = '1;
        end
        field_combo.negedge_irqs.irq0.next = next_c;
        field_combo.negedge_irqs.irq0.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.negedge_irqs.irq0.value <= 8'h0;
            field_storage.negedge_irqs.irq0.next_q <= 8'h0;
        end else begin
            if(field_combo.negedge_irqs.irq0.load_next) begin
                field_storage.negedge_irqs.irq0.value <= field_combo.negedge_irqs.irq0.next;
            end
            field_storage.negedge_irqs.irq0.next_q <= hwif_in.negedge_irqs.irq0.next;
        end
    end
    // Field: regblock.negedge_irqs.irq1
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.negedge_irqs.irq1.value;
        load_next_c = '0;
        if(decoded_reg_strb.negedge_irqs && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.negedge_irqs.irq1.value & ~(decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else if((field_storage.negedge_irqs.irq1.next_q & ~hwif_in.negedge_irqs.irq1.next) != '0) begin // negedge stickybit
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.negedge_irqs.irq1.next = next_c;
        field_combo.negedge_irqs.irq1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.negedge_irqs.irq1.value <= 1'h0;
            field_storage.negedge_irqs.irq1.next_q <= 1'h0;
        end else begin
            if(field_combo.negedge_irqs.irq1.load_next) begin
                field_storage.negedge_irqs.irq1.value <= field_combo.negedge_irqs.irq1.next;
            end
            field_storage.negedge_irqs.irq1.next_q <= hwif_in.negedge_irqs.irq1.next;
        end
    end
    assign hwif_out.negedge_irqs.intr =
        |field_storage.negedge_irqs.irq0.value
        || |field_storage.negedge_irqs.irq1.value;
    // Field: regblock.bothedge_irqs.irq0
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.bothedge_irqs.irq0.value;
        load_next_c = '0;
        if(decoded_reg_strb.bothedge_irqs && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.bothedge_irqs.irq0.value & ~(decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if(field_storage.bothedge_irqs.irq0.next_q != hwif_in.bothedge_irqs.irq0.next) begin // bothedge stickybit
            next_c = field_storage.bothedge_irqs.irq0.value | (field_storage.bothedge_irqs.irq0.next_q ^ hwif_in.bothedge_irqs.irq0.next);
            load_next_c = '1;
        end
        field_combo.bothedge_irqs.irq0.next = next_c;
        field_combo.bothedge_irqs.irq0.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.bothedge_irqs.irq0.value <= 8'h0;
            field_storage.bothedge_irqs.irq0.next_q <= 8'h0;
        end else begin
            if(field_combo.bothedge_irqs.irq0.load_next) begin
                field_storage.bothedge_irqs.irq0.value <= field_combo.bothedge_irqs.irq0.next;
            end
            field_storage.bothedge_irqs.irq0.next_q <= hwif_in.bothedge_irqs.irq0.next;
        end
    end
    // Field: regblock.bothedge_irqs.irq1
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.bothedge_irqs.irq1.value;
        load_next_c = '0;
        if(decoded_reg_strb.bothedge_irqs && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.bothedge_irqs.irq1.value & ~(decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else if(field_storage.bothedge_irqs.irq1.next_q != hwif_in.bothedge_irqs.irq1.next) begin // bothedge stickybit
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.bothedge_irqs.irq1.next = next_c;
        field_combo.bothedge_irqs.irq1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.bothedge_irqs.irq1.value <= 1'h0;
            field_storage.bothedge_irqs.irq1.next_q <= 1'h0;
        end else begin
            if(field_combo.bothedge_irqs.irq1.load_next) begin
                field_storage.bothedge_irqs.irq1.value <= field_combo.bothedge_irqs.irq1.next;
            end
            field_storage.bothedge_irqs.irq1.next_q <= hwif_in.bothedge_irqs.irq1.next;
        end
    end
    assign hwif_out.bothedge_irqs.intr =
        |field_storage.bothedge_irqs.irq0.value
        || |field_storage.bothedge_irqs.irq1.value;
    // Field: regblock.top_irq.level_active
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.top_irq.level_active.value;
        load_next_c = '0;

        // HW Write
        next_c = hwif_out.level_irqs_1.intr;
        load_next_c = '1;
        field_combo.top_irq.level_active.next = next_c;
        field_combo.top_irq.level_active.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.top_irq.level_active.load_next) begin
            field_storage.top_irq.level_active.value <= field_combo.top_irq.level_active.next;
        end
    end
    // Field: regblock.top_irq.posedge_active
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.top_irq.posedge_active.value;
        load_next_c = '0;

        // HW Write
        next_c = hwif_out.posedge_irqs.intr;
        load_next_c = '1;
        field_combo.top_irq.posedge_active.next = next_c;
        field_combo.top_irq.posedge_active.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.top_irq.posedge_active.load_next) begin
            field_storage.top_irq.posedge_active.value <= field_combo.top_irq.posedge_active.next;
        end
    end
    // Field: regblock.top_irq.negedge_active
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.top_irq.negedge_active.value;
        load_next_c = '0;

        // HW Write
        next_c = hwif_out.negedge_irqs.intr;
        load_next_c = '1;
        field_combo.top_irq.negedge_active.next = next_c;
        field_combo.top_irq.negedge_active.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.top_irq.negedge_active.load_next) begin
            field_storage.top_irq.negedge_active.value <= field_combo.top_irq.negedge_active.next;
        end
    end
    // Field: regblock.top_irq.bothedge_active
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.top_irq.bothedge_active.value;
        load_next_c = '0;

        // HW Write
        next_c = hwif_out.bothedge_irqs.intr;
        load_next_c = '1;
        field_combo.top_irq.bothedge_active.next = next_c;
        field_combo.top_irq.bothedge_active.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.top_irq.bothedge_active.load_next) begin
            field_storage.top_irq.bothedge_active.value <= field_combo.top_irq.bothedge_active.next;
        end
    end
    // Field: regblock.top_irq.level_halt_active
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.top_irq.level_halt_active.value;
        load_next_c = '0;

        // HW Write
        next_c = hwif_out.level_irqs_2.halt;
        load_next_c = '1;
        field_combo.top_irq.level_halt_active.next = next_c;
        field_combo.top_irq.level_halt_active.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.top_irq.level_halt_active.load_next) begin
            field_storage.top_irq.level_halt_active.value <= field_combo.top_irq.level_halt_active.next;
        end
    end
    assign hwif_out.top_irq.intr =
        |field_storage.top_irq.level_active.value
        || |field_storage.top_irq.posedge_active.value
        || |field_storage.top_irq.negedge_active.value
        || |field_storage.top_irq.bothedge_active.value
        || |field_storage.top_irq.level_halt_active.value;
    // Field: regblock.stickyreg.stickyfield
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.stickyreg.stickyfield.value;
        load_next_c = '0;
        if(decoded_reg_strb.stickyreg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.stickyreg.stickyfield.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if((field_storage.stickyreg.stickyfield.value == '0) && (hwif_in.stickyreg.stickyfield.next != '0)) begin // multi-bit sticky
            next_c = hwif_in.stickyreg.stickyfield.next;
            load_next_c = '1;
        end
        field_combo.stickyreg.stickyfield.next = next_c;
        field_combo.stickyreg.stickyfield.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.stickyreg.stickyfield.value <= 8'h0;
        end else begin
            if(field_combo.stickyreg.stickyfield.load_next) begin
                field_storage.stickyreg.stickyfield.value <= field_combo.stickyreg.stickyfield.next;
            end
        end
    end
    // Field: regblock.ctrl_enable.irq0
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ctrl_enable.irq0.value;
        load_next_c = '0;
        if(decoded_reg_strb.ctrl_enable && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.ctrl_enable.irq0.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo.ctrl_enable.irq0.next = next_c;
        field_combo.ctrl_enable.irq0.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.ctrl_enable.irq0.value <= 8'h0;
        end else begin
            if(field_combo.ctrl_enable.irq0.load_next) begin
                field_storage.ctrl_enable.irq0.value <= field_combo.ctrl_enable.irq0.next;
            end
        end
    end
    // Field: regblock.ctrl_enable.irq1
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ctrl_enable.irq1.value;
        load_next_c = '0;
        if(decoded_reg_strb.ctrl_enable && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.ctrl_enable.irq1.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo.ctrl_enable.irq1.next = next_c;
        field_combo.ctrl_enable.irq1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.ctrl_enable.irq1.value <= 1'h0;
        end else begin
            if(field_combo.ctrl_enable.irq1.load_next) begin
                field_storage.ctrl_enable.irq1.value <= field_combo.ctrl_enable.irq1.next;
            end
        end
    end
    // Field: regblock.ctrl_mask.irq0
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ctrl_mask.irq0.value;
        load_next_c = '0;
        if(decoded_reg_strb.ctrl_mask && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.ctrl_mask.irq0.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo.ctrl_mask.irq0.next = next_c;
        field_combo.ctrl_mask.irq0.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.ctrl_mask.irq0.value <= 8'h0;
        end else begin
            if(field_combo.ctrl_mask.irq0.load_next) begin
                field_storage.ctrl_mask.irq0.value <= field_combo.ctrl_mask.irq0.next;
            end
        end
    end
    // Field: regblock.ctrl_mask.irq1
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ctrl_mask.irq1.value;
        load_next_c = '0;
        if(decoded_reg_strb.ctrl_mask && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.ctrl_mask.irq1.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo.ctrl_mask.irq1.next = next_c;
        field_combo.ctrl_mask.irq1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.ctrl_mask.irq1.value <= 1'h0;
        end else begin
            if(field_combo.ctrl_mask.irq1.load_next) begin
                field_storage.ctrl_mask.irq1.value <= field_combo.ctrl_mask.irq1.next;
            end
        end
    end
    // Field: regblock.ctrl_haltenable.irq0
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ctrl_haltenable.irq0.value;
        load_next_c = '0;
        if(decoded_reg_strb.ctrl_haltenable && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.ctrl_haltenable.irq0.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo.ctrl_haltenable.irq0.next = next_c;
        field_combo.ctrl_haltenable.irq0.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.ctrl_haltenable.irq0.value <= 8'h0;
        end else begin
            if(field_combo.ctrl_haltenable.irq0.load_next) begin
                field_storage.ctrl_haltenable.irq0.value <= field_combo.ctrl_haltenable.irq0.next;
            end
        end
    end
    // Field: regblock.ctrl_haltenable.irq1
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ctrl_haltenable.irq1.value;
        load_next_c = '0;
        if(decoded_reg_strb.ctrl_haltenable && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.ctrl_haltenable.irq1.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo.ctrl_haltenable.irq1.next = next_c;
        field_combo.ctrl_haltenable.irq1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.ctrl_haltenable.irq1.value <= 1'h0;
        end else begin
            if(field_combo.ctrl_haltenable.irq1.load_next) begin
                field_storage.ctrl_haltenable.irq1.value <= field_combo.ctrl_haltenable.irq1.next;
            end
        end
    end
    // Field: regblock.ctrl_haltmask.irq0
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ctrl_haltmask.irq0.value;
        load_next_c = '0;
        if(decoded_reg_strb.ctrl_haltmask && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.ctrl_haltmask.irq0.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo.ctrl_haltmask.irq0.next = next_c;
        field_combo.ctrl_haltmask.irq0.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.ctrl_haltmask.irq0.value <= 8'h0;
        end else begin
            if(field_combo.ctrl_haltmask.irq0.load_next) begin
                field_storage.ctrl_haltmask.irq0.value <= field_combo.ctrl_haltmask.irq0.next;
            end
        end
    end
    // Field: regblock.ctrl_haltmask.irq1
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ctrl_haltmask.irq1.value;
        load_next_c = '0;
        if(decoded_reg_strb.ctrl_haltmask && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.ctrl_haltmask.irq1.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo.ctrl_haltmask.irq1.next = next_c;
        field_combo.ctrl_haltmask.irq1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.ctrl_haltmask.irq1.value <= 1'h0;
        end else begin
            if(field_combo.ctrl_haltmask.irq1.load_next) begin
                field_storage.ctrl_haltmask.irq1.value <= field_combo.ctrl_haltmask.irq1.next;
            end
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[12];
    assign readback_array[0][7:0] = (decoded_reg_strb.level_irqs_1 && !decoded_req_is_wr) ? field_storage.level_irqs_1.irq0.value : '0;
    assign readback_array[0][8:8] = (decoded_reg_strb.level_irqs_1 && !decoded_req_is_wr) ? field_storage.level_irqs_1.irq1.value : '0;
    assign readback_array[0][31:9] = '0;
    assign readback_array[1][7:0] = (decoded_reg_strb.level_irqs_2 && !decoded_req_is_wr) ? field_storage.level_irqs_2.irq0.value : '0;
    assign readback_array[1][8:8] = (decoded_reg_strb.level_irqs_2 && !decoded_req_is_wr) ? field_storage.level_irqs_2.irq1.value : '0;
    assign readback_array[1][31:9] = '0;
    assign readback_array[2][7:0] = (decoded_reg_strb.level_irqs_3 && !decoded_req_is_wr) ? field_storage.level_irqs_3.irq0.value : '0;
    assign readback_array[2][8:8] = (decoded_reg_strb.level_irqs_3 && !decoded_req_is_wr) ? field_storage.level_irqs_3.irq1.value : '0;
    assign readback_array[2][31:9] = '0;
    assign readback_array[3][7:0] = (decoded_reg_strb.posedge_irqs && !decoded_req_is_wr) ? field_storage.posedge_irqs.irq0.value : '0;
    assign readback_array[3][8:8] = (decoded_reg_strb.posedge_irqs && !decoded_req_is_wr) ? field_storage.posedge_irqs.irq1.value : '0;
    assign readback_array[3][31:9] = '0;
    assign readback_array[4][7:0] = (decoded_reg_strb.negedge_irqs && !decoded_req_is_wr) ? field_storage.negedge_irqs.irq0.value : '0;
    assign readback_array[4][8:8] = (decoded_reg_strb.negedge_irqs && !decoded_req_is_wr) ? field_storage.negedge_irqs.irq1.value : '0;
    assign readback_array[4][31:9] = '0;
    assign readback_array[5][7:0] = (decoded_reg_strb.bothedge_irqs && !decoded_req_is_wr) ? field_storage.bothedge_irqs.irq0.value : '0;
    assign readback_array[5][8:8] = (decoded_reg_strb.bothedge_irqs && !decoded_req_is_wr) ? field_storage.bothedge_irqs.irq1.value : '0;
    assign readback_array[5][31:9] = '0;
    assign readback_array[6][0:0] = (decoded_reg_strb.top_irq && !decoded_req_is_wr) ? field_storage.top_irq.level_active.value : '0;
    assign readback_array[6][1:1] = (decoded_reg_strb.top_irq && !decoded_req_is_wr) ? field_storage.top_irq.posedge_active.value : '0;
    assign readback_array[6][2:2] = (decoded_reg_strb.top_irq && !decoded_req_is_wr) ? field_storage.top_irq.negedge_active.value : '0;
    assign readback_array[6][3:3] = (decoded_reg_strb.top_irq && !decoded_req_is_wr) ? field_storage.top_irq.bothedge_active.value : '0;
    assign readback_array[6][4:4] = (decoded_reg_strb.top_irq && !decoded_req_is_wr) ? field_storage.top_irq.level_halt_active.value : '0;
    assign readback_array[6][31:5] = '0;
    assign readback_array[7][7:0] = (decoded_reg_strb.stickyreg && !decoded_req_is_wr) ? field_storage.stickyreg.stickyfield.value : '0;
    assign readback_array[7][31:8] = '0;
    assign readback_array[8][7:0] = (decoded_reg_strb.ctrl_enable && !decoded_req_is_wr) ? field_storage.ctrl_enable.irq0.value : '0;
    assign readback_array[8][8:8] = (decoded_reg_strb.ctrl_enable && !decoded_req_is_wr) ? field_storage.ctrl_enable.irq1.value : '0;
    assign readback_array[8][31:9] = '0;
    assign readback_array[9][7:0] = (decoded_reg_strb.ctrl_mask && !decoded_req_is_wr) ? field_storage.ctrl_mask.irq0.value : '0;
    assign readback_array[9][8:8] = (decoded_reg_strb.ctrl_mask && !decoded_req_is_wr) ? field_storage.ctrl_mask.irq1.value : '0;
    assign readback_array[9][31:9] = '0;
    assign readback_array[10][7:0] = (decoded_reg_strb.ctrl_haltenable && !decoded_req_is_wr) ? field_storage.ctrl_haltenable.irq0.value : '0;
    assign readback_array[10][8:8] = (decoded_reg_strb.ctrl_haltenable && !decoded_req_is_wr) ? field_storage.ctrl_haltenable.irq1.value : '0;
    assign readback_array[10][31:9] = '0;
    assign readback_array[11][7:0] = (decoded_reg_strb.ctrl_haltmask && !decoded_req_is_wr) ? field_storage.ctrl_haltmask.irq0.value : '0;
    assign readback_array[11][8:8] = (decoded_reg_strb.ctrl_haltmask && !decoded_req_is_wr) ? field_storage.ctrl_haltmask.irq1.value : '0;
    assign readback_array[11][31:9] = '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<12; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
