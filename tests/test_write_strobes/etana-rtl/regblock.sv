// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module regblock (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [3:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        input wire [31:0] s_cpuif_wr_biten,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err


    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [3:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign cpuif_wr_biten = s_cpuif_wr_biten;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    logic [0:0] decoded_reg_strb_r1;
    logic [0:0] decoded_reg_strb_r2;
    logic [0:0] decoded_reg_strb_r3;
    logic [0:0] decoded_reg_strb_r4;
    logic decoded_req;
    logic decoded_req_is_wr;
    /* verilator lint_off UNUSEDSIGNAL */
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;
    /* verilator lint_on UNUSEDSIGNAL */

    always @(*) begin
        /* verilator lint_off UNUSEDSIGNAL */
        integer next_cpuif_addr;
        /* verilator lint_on UNUSEDSIGNAL */
        decoded_reg_strb_r1 = cpuif_req_masked & (cpuif_addr == 4'h0);
        decoded_reg_strb_r2 = cpuif_req_masked & (cpuif_addr == 4'h4);
        decoded_reg_strb_r3 = cpuif_req_masked & (cpuif_addr == 4'h8);
        decoded_reg_strb_r4 = cpuif_req_masked & (cpuif_addr == 4'hc);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;


    //--------------------------------------------------------------------------
    // Field storage declarations
    //--------------------------------------------------------------------------

    // Field: regblock.r1.f1
    logic [3:0] field_storage_r1_f1_value;
    logic [3:0] field_combo_r1_f1_next;
    logic field_combo_r1_f1_load_next;
    // Field: regblock.r1.f2
    logic [3:0] field_storage_r1_f2_value;
    logic [3:0] field_combo_r1_f2_next;
    logic field_combo_r1_f2_load_next;
    // Field: regblock.r1.f3
    logic [3:0] field_storage_r1_f3_value;
    logic [3:0] field_combo_r1_f3_next;
    logic field_combo_r1_f3_load_next;
    // Field: regblock.r2.f1
    logic [3:0] field_storage_r2_f1_value;
    logic [3:0] field_combo_r2_f1_next;
    logic field_combo_r2_f1_load_next;
    // Field: regblock.r2.f2
    logic [3:0] field_storage_r2_f2_value;
    logic [3:0] field_combo_r2_f2_next;
    logic field_combo_r2_f2_load_next;
    // Field: regblock.r2.f3
    logic [3:0] field_storage_r2_f3_value;
    logic [3:0] field_combo_r2_f3_next;
    logic field_combo_r2_f3_load_next;
    // Field: regblock.r3.f1
    logic [7:0] field_storage_r3_f1_value;
    logic [7:0] field_combo_r3_f1_next;
    logic field_combo_r3_f1_load_next;
    // Field: regblock.r3.f2
    logic [7:0] field_storage_r3_f2_value;
    logic [7:0] field_combo_r3_f2_next;
    logic field_combo_r3_f2_load_next;
    // Field: regblock.r4.f3
    logic [7:0] field_storage_r4_f3_value;
    logic [7:0] field_combo_r4_f3_next;
    logic field_combo_r4_f3_load_next;
    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_r1_f1_value;
        load_next_c = '0;
        if(decoded_reg_strb_r1 && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage_r1_f1_value | (decoded_wr_data[3:0] & decoded_wr_biten[3:0]);
            load_next_c = '1;
        end
        field_combo_r1_f1_next = next_c;
        field_combo_r1_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r1_f1_value <= 4'h0;
        end else if(field_combo_r1_f1_load_next) begin
            field_storage_r1_f1_value <= field_combo_r1_f1_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_r1_f2_value;
        load_next_c = '0;
        if(decoded_reg_strb_r1 && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage_r1_f2_value & ~(decoded_wr_data[7:4] & decoded_wr_biten[7:4]);
            load_next_c = '1;
        end
        field_combo_r1_f2_next = next_c;
        field_combo_r1_f2_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r1_f2_value <= 4'hf;
        end else if(field_combo_r1_f2_load_next) begin
            field_storage_r1_f2_value <= field_combo_r1_f2_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_r1_f3_value;
        load_next_c = '0;
        if(decoded_reg_strb_r1 && decoded_req_is_wr) begin // SW write 1 toggle
            next_c = field_storage_r1_f3_value ^ (decoded_wr_data[11:8] & decoded_wr_biten[11:8]);
            load_next_c = '1;
        end
        field_combo_r1_f3_next = next_c;
        field_combo_r1_f3_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r1_f3_value <= 4'h0;
        end else if(field_combo_r1_f3_load_next) begin
            field_storage_r1_f3_value <= field_combo_r1_f3_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_r2_f1_value;
        load_next_c = '0;
        if(decoded_reg_strb_r2 && decoded_req_is_wr) begin // SW write 0 set
            next_c = field_storage_r2_f1_value | (~decoded_wr_data[3:0] & decoded_wr_biten[3:0]);
            load_next_c = '1;
        end
        field_combo_r2_f1_next = next_c;
        field_combo_r2_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r2_f1_value <= 4'h0;
        end else if(field_combo_r2_f1_load_next) begin
            field_storage_r2_f1_value <= field_combo_r2_f1_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_r2_f2_value;
        load_next_c = '0;
        if(decoded_reg_strb_r2 && decoded_req_is_wr) begin // SW write 0 clear
            next_c = field_storage_r2_f2_value & (decoded_wr_data[7:4] | ~decoded_wr_biten[7:4]);
            load_next_c = '1;
        end
        field_combo_r2_f2_next = next_c;
        field_combo_r2_f2_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r2_f2_value <= 4'hf;
        end else if(field_combo_r2_f2_load_next) begin
            field_storage_r2_f2_value <= field_combo_r2_f2_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_r2_f3_value;
        load_next_c = '0;
        if(decoded_reg_strb_r2 && decoded_req_is_wr) begin // SW write 0 toggle
            next_c = field_storage_r2_f3_value ^ (~decoded_wr_data[11:8] & decoded_wr_biten[11:8]);
            load_next_c = '1;
        end
        field_combo_r2_f3_next = next_c;
        field_combo_r2_f3_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r2_f3_value <= 4'h0;
        end else if(field_combo_r2_f3_load_next) begin
            field_storage_r2_f3_value <= field_combo_r2_f3_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_r3_f1_value;
        load_next_c = '0;
        if(decoded_reg_strb_r3 && decoded_req_is_wr) begin // SW write clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo_r3_f1_next = next_c;
        field_combo_r3_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r3_f1_value <= 8'hf0;
        end else if(field_combo_r3_f1_load_next) begin
            field_storage_r3_f1_value <= field_combo_r3_f1_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_r3_f2_value;
        load_next_c = '0;
        if(decoded_reg_strb_r3 && decoded_req_is_wr) begin // SW write set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo_r3_f2_next = next_c;
        field_combo_r3_f2_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r3_f2_value <= 8'hf;
        end else if(field_combo_r3_f2_load_next) begin
            field_storage_r3_f2_value <= field_combo_r3_f2_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_r4_f3_value;
        load_next_c = '0;
        if(decoded_reg_strb_r4 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_r4_f3_value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo_r4_f3_next = next_c;
        field_combo_r4_f3_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r4_f3_value <= 8'h0;
        end else if(field_combo_r4_f3_load_next) begin
            field_storage_r4_f3_value <= field_combo_r4_f3_next;
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

//--------------------------------------------------------------------------
// Readback
//--------------------------------------------------------------------------
    logic readback_external_rd_ack;
    assign readback_external_rd_ack = 0;

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[4];
    assign readback_array[0][3:0] = (decoded_reg_strb_r1 && !decoded_req_is_wr) ? field_storage_r1_f1_value : '0;
    assign readback_array[0][7:4] = (decoded_reg_strb_r1 && !decoded_req_is_wr) ? field_storage_r1_f2_value : '0;
    assign readback_array[0][11:8] = (decoded_reg_strb_r1 && !decoded_req_is_wr) ? field_storage_r1_f3_value : '0;
    assign readback_array[0][31:12] = '0;
    assign readback_array[1][3:0] = (decoded_reg_strb_r2 && !decoded_req_is_wr) ? field_storage_r2_f1_value : '0;
    assign readback_array[1][7:4] = (decoded_reg_strb_r2 && !decoded_req_is_wr) ? field_storage_r2_f2_value : '0;
    assign readback_array[1][11:8] = (decoded_reg_strb_r2 && !decoded_req_is_wr) ? field_storage_r2_f3_value : '0;
    assign readback_array[1][31:12] = '0;
    assign readback_array[2][7:0] = (decoded_reg_strb_r3 && !decoded_req_is_wr) ? field_storage_r3_f1_value : '0;
    assign readback_array[2][15:8] = (decoded_reg_strb_r3 && !decoded_req_is_wr) ? field_storage_r3_f2_value : '0;
    assign readback_array[2][31:16] = '0;
    assign readback_array[3][7:0] = (decoded_reg_strb_r4 && !decoded_req_is_wr) ? field_storage_r4_f3_value : '0;
    assign readback_array[3][31:8] = '0;

    // Reduce the array
    // always_comb begin
    always @(*) begin
        logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<4; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
