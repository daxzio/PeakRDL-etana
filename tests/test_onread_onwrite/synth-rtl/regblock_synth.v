/* Generated by Yosys 0.58 (git sha1 157aabb58, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3) */

module regblock(clk, rst, s_apb_psel, s_apb_pwrite, s_apb_penable, s_apb_pprot, s_apb_paddr, s_apb_pwdata, s_apb_pstrb, s_apb_pready, s_apb_prdata, s_apb_pslverr);
  input clk;
  wire clk;
  input rst;
  wire rst;
  input s_apb_psel;
  wire s_apb_psel;
  input s_apb_pwrite;
  wire s_apb_pwrite;
  input s_apb_penable;
  wire s_apb_penable;
  input [2:0] s_apb_pprot;
  wire [2:0] s_apb_pprot;
  input [3:0] s_apb_paddr;
  wire [3:0] s_apb_paddr;
  input [31:0] s_apb_pwdata;
  wire [31:0] s_apb_pwdata;
  input [3:0] s_apb_pstrb;
  wire [3:0] s_apb_pstrb;
  output s_apb_pready;
  wire s_apb_pready;
  output [31:0] s_apb_prdata;
  wire [31:0] s_apb_prdata;
  output s_apb_pslverr;
  wire s_apb_pslverr;
  wire _000_;
  wire [7:0] _001_;
  wire [7:0] _002_;
  wire [7:0] _003_;
  wire [7:0] _004_;
  wire [7:0] _005_;
  wire [7:0] _006_;
  wire [3:0] _007_;
  wire [3:0] _008_;
  wire [3:0] _009_;
  wire [3:0] _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire [1:0] _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire [7:0] _030_;
  wire [7:0] _031_;
  wire [3:0] _032_;
  wire [3:0] _033_;
  wire [3:0] _034_;
  wire [7:0] _035_;
  wire [7:0] _036_;
  wire [3:0] _037_;
  wire [3:0] _038_;
  wire [3:0] _039_;
  wire [31:0] _040_;
  wire [31:0] _041_;
  wire _042_;
  wire _043_;
  wire [3:0] _044_;
  wire [3:0] _045_;
  wire [3:0] cpuif_addr;
  wire cpuif_rd_ack;
  wire [31:0] cpuif_rd_data;
  wire cpuif_rd_err;
  reg cpuif_req;
  reg cpuif_req_is_wr;
  wire cpuif_req_masked;
  wire cpuif_req_stall_rd;
  wire cpuif_req_stall_wr;
  wire cpuif_wr_ack;
  wire [31:0] cpuif_wr_biten;
  wire [31:0] cpuif_wr_data;
  wire cpuif_wr_err;
  wire [0:0] decoded_reg_strb_r1;
  wire [0:0] decoded_reg_strb_r2;
  wire [0:0] decoded_reg_strb_r3;
  wire [0:0] decoded_reg_strb_r4;
  wire decoded_req;
  wire decoded_req_is_wr;
  wire [31:0] decoded_wr_biten;
  wire [31:0] decoded_wr_data;
  wire field_combo_r1_f1_load_next;
  wire [7:0] field_combo_r1_f1_next;
  wire field_combo_r1_f2_load_next;
  wire [7:0] field_combo_r1_f2_next;
  wire field_combo_r2_f1_load_next;
  wire field_combo_r2_f2_load_next;
  wire field_combo_r2_f3_load_next;
  wire field_combo_r3_f1_load_next;
  wire field_combo_r3_f2_load_next;
  wire field_combo_r3_f3_load_next;
  wire field_combo_r4_f1_load_next;
  wire field_combo_r4_f2_load_next;
  reg [7:0] field_storage_r1_f1_value;
  reg [7:0] field_storage_r1_f2_value;
  reg [3:0] field_storage_r2_f1_value;
  reg [3:0] field_storage_r2_f2_value;
  reg [3:0] field_storage_r2_f3_value;
  reg [3:0] field_storage_r3_f1_value;
  reg [3:0] field_storage_r3_f2_value;
  reg [3:0] field_storage_r3_f3_value;
  wire [7:0] field_storage_r4_f1_value;
  wire [7:0] field_storage_r4_f2_value;
  reg is_active;
  wire [31:0] \readback_array[0] ;
  wire [31:0] \readback_array[1] ;
  wire [31:0] \readback_array[2] ;
  wire [31:0] \readback_array[3] ;
  wire [31:0] readback_data;
  wire readback_done;
  wire readback_err;
  wire readback_external_rd_ack;
  reg \field_storage_r4_f1_value_reg[5] ;
  always @(posedge clk)
    if (rst) \field_storage_r4_f1_value_reg[5]  <= 1'h1;
    else if (field_combo_r4_f1_load_next) \field_storage_r4_f1_value_reg[5]  <= 1'h0;
  assign field_storage_r4_f1_value[5] = \field_storage_r4_f1_value_reg[5] ;
  always @(posedge clk)
    if (rst) field_storage_r1_f1_value[0] <= 1'h0;
    else if (_013_) field_storage_r1_f1_value[0] <= field_combo_r1_f1_next[0];
  always @(posedge clk)
    if (rst) field_storage_r1_f1_value[1] <= 1'h0;
    else if (_013_) field_storage_r1_f1_value[1] <= field_combo_r1_f1_next[1];
  always @(posedge clk)
    if (rst) field_storage_r1_f1_value[2] <= 1'h0;
    else if (_013_) field_storage_r1_f1_value[2] <= field_combo_r1_f1_next[2];
  always @(posedge clk)
    if (rst) field_storage_r1_f1_value[3] <= 1'h0;
    else if (_013_) field_storage_r1_f1_value[3] <= field_combo_r1_f1_next[3];
  always @(posedge clk)
    if (rst) field_storage_r1_f1_value[4] <= 1'h1;
    else if (_013_) field_storage_r1_f1_value[4] <= field_combo_r1_f1_next[4];
  always @(posedge clk)
    if (rst) field_storage_r1_f1_value[5] <= 1'h1;
    else if (_013_) field_storage_r1_f1_value[5] <= field_combo_r1_f1_next[5];
  always @(posedge clk)
    if (rst) field_storage_r1_f1_value[6] <= 1'h1;
    else if (_013_) field_storage_r1_f1_value[6] <= field_combo_r1_f1_next[6];
  always @(posedge clk)
    if (rst) field_storage_r1_f1_value[7] <= 1'h1;
    else if (_013_) field_storage_r1_f1_value[7] <= field_combo_r1_f1_next[7];
  always @(posedge clk)
    if (rst) field_storage_r3_f3_value[0] <= 1'h0;
    else if (field_combo_r3_f1_load_next) field_storage_r3_f3_value[0] <= _045_[0];
  always @(posedge clk)
    if (rst) field_storage_r3_f3_value[1] <= 1'h0;
    else if (field_combo_r3_f1_load_next) field_storage_r3_f3_value[1] <= _045_[1];
  always @(posedge clk)
    if (rst) field_storage_r3_f3_value[2] <= 1'h0;
    else if (field_combo_r3_f1_load_next) field_storage_r3_f3_value[2] <= _045_[2];
  always @(posedge clk)
    if (rst) field_storage_r3_f3_value[3] <= 1'h0;
    else if (field_combo_r3_f1_load_next) field_storage_r3_f3_value[3] <= _045_[3];
  always @(posedge clk)
    if (rst) field_storage_r3_f2_value[0] <= 1'h1;
    else if (field_combo_r3_f1_load_next) field_storage_r3_f2_value[0] <= _009_[0];
  always @(posedge clk)
    if (rst) field_storage_r3_f2_value[1] <= 1'h1;
    else if (field_combo_r3_f1_load_next) field_storage_r3_f2_value[1] <= _009_[1];
  always @(posedge clk)
    if (rst) field_storage_r3_f2_value[2] <= 1'h1;
    else if (field_combo_r3_f1_load_next) field_storage_r3_f2_value[2] <= _009_[2];
  always @(posedge clk)
    if (rst) field_storage_r3_f2_value[3] <= 1'h1;
    else if (field_combo_r3_f1_load_next) field_storage_r3_f2_value[3] <= _009_[3];
  always @(posedge clk)
    if (rst) field_storage_r3_f1_value[0] <= 1'h0;
    else if (field_combo_r3_f1_load_next) field_storage_r3_f1_value[0] <= _038_[0];
  always @(posedge clk)
    if (rst) field_storage_r3_f1_value[1] <= 1'h0;
    else if (field_combo_r3_f1_load_next) field_storage_r3_f1_value[1] <= _038_[1];
  always @(posedge clk)
    if (rst) field_storage_r3_f1_value[2] <= 1'h0;
    else if (field_combo_r3_f1_load_next) field_storage_r3_f1_value[2] <= _038_[2];
  always @(posedge clk)
    if (rst) field_storage_r3_f1_value[3] <= 1'h0;
    else if (field_combo_r3_f1_load_next) field_storage_r3_f1_value[3] <= _038_[3];
  always @(posedge clk)
    if (rst) field_storage_r2_f3_value[0] <= 1'h0;
    else if (field_combo_r2_f1_load_next) field_storage_r2_f3_value[0] <= _044_[0];
  always @(posedge clk)
    if (rst) field_storage_r2_f3_value[1] <= 1'h0;
    else if (field_combo_r2_f1_load_next) field_storage_r2_f3_value[1] <= _044_[1];
  always @(posedge clk)
    if (rst) field_storage_r2_f3_value[2] <= 1'h0;
    else if (field_combo_r2_f1_load_next) field_storage_r2_f3_value[2] <= _044_[2];
  always @(posedge clk)
    if (rst) field_storage_r2_f3_value[3] <= 1'h0;
    else if (field_combo_r2_f1_load_next) field_storage_r2_f3_value[3] <= _044_[3];
  always @(posedge clk)
    if (rst) field_storage_r2_f2_value[0] <= 1'h1;
    else if (field_combo_r2_f1_load_next) field_storage_r2_f2_value[0] <= _007_[0];
  always @(posedge clk)
    if (rst) field_storage_r2_f2_value[1] <= 1'h1;
    else if (field_combo_r2_f1_load_next) field_storage_r2_f2_value[1] <= _007_[1];
  always @(posedge clk)
    if (rst) field_storage_r2_f2_value[2] <= 1'h1;
    else if (field_combo_r2_f1_load_next) field_storage_r2_f2_value[2] <= _007_[2];
  always @(posedge clk)
    if (rst) field_storage_r2_f2_value[3] <= 1'h1;
    else if (field_combo_r2_f1_load_next) field_storage_r2_f2_value[3] <= _007_[3];
  always @(posedge clk)
    if (rst) field_storage_r2_f1_value[0] <= 1'h0;
    else if (field_combo_r2_f1_load_next) field_storage_r2_f1_value[0] <= _037_[0];
  always @(posedge clk)
    if (rst) field_storage_r2_f1_value[1] <= 1'h0;
    else if (field_combo_r2_f1_load_next) field_storage_r2_f1_value[1] <= _037_[1];
  always @(posedge clk)
    if (rst) field_storage_r2_f1_value[2] <= 1'h0;
    else if (field_combo_r2_f1_load_next) field_storage_r2_f1_value[2] <= _037_[2];
  always @(posedge clk)
    if (rst) field_storage_r2_f1_value[3] <= 1'h0;
    else if (field_combo_r2_f1_load_next) field_storage_r2_f1_value[3] <= _037_[3];
  reg \field_storage_r4_f2_value_reg[6] ;
  always @(posedge clk)
    if (rst) \field_storage_r4_f2_value_reg[6]  <= 1'h0;
    else if (field_combo_r4_f1_load_next) \field_storage_r4_f2_value_reg[6]  <= 1'h1;
  assign field_storage_r4_f2_value[6] = \field_storage_r4_f2_value_reg[6] ;
  always @(posedge clk)
    if (_014_) cpuif_req <= 1'h0;
    else if (s_apb_psel) cpuif_req <= 1'h1;
  always @(posedge clk)
    if (rst) cpuif_req_is_wr <= 1'h0;
    else if (_012_) cpuif_req_is_wr <= s_apb_pwrite;
  reg \cpuif_wr_data_reg[0] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[0]  <= 1'h0;
    else if (_012_) \cpuif_wr_data_reg[0]  <= s_apb_pwdata[0];
  assign cpuif_wr_data[0] = \cpuif_wr_data_reg[0] ;
  reg \cpuif_wr_data_reg[1] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[1]  <= 1'h0;
    else if (_012_) \cpuif_wr_data_reg[1]  <= s_apb_pwdata[1];
  assign cpuif_wr_data[1] = \cpuif_wr_data_reg[1] ;
  reg \cpuif_wr_data_reg[2] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[2]  <= 1'h0;
    else if (_012_) \cpuif_wr_data_reg[2]  <= s_apb_pwdata[2];
  assign cpuif_wr_data[2] = \cpuif_wr_data_reg[2] ;
  reg \cpuif_wr_data_reg[3] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[3]  <= 1'h0;
    else if (_012_) \cpuif_wr_data_reg[3]  <= s_apb_pwdata[3];
  assign cpuif_wr_data[3] = \cpuif_wr_data_reg[3] ;
  reg \cpuif_wr_data_reg[4] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[4]  <= 1'h0;
    else if (_012_) \cpuif_wr_data_reg[4]  <= s_apb_pwdata[4];
  assign cpuif_wr_data[4] = \cpuif_wr_data_reg[4] ;
  reg \cpuif_wr_data_reg[5] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[5]  <= 1'h0;
    else if (_012_) \cpuif_wr_data_reg[5]  <= s_apb_pwdata[5];
  assign cpuif_wr_data[5] = \cpuif_wr_data_reg[5] ;
  reg \cpuif_wr_data_reg[6] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[6]  <= 1'h0;
    else if (_012_) \cpuif_wr_data_reg[6]  <= s_apb_pwdata[6];
  assign cpuif_wr_data[6] = \cpuif_wr_data_reg[6] ;
  reg \cpuif_wr_data_reg[7] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[7]  <= 1'h0;
    else if (_012_) \cpuif_wr_data_reg[7]  <= s_apb_pwdata[7];
  assign cpuif_wr_data[7] = \cpuif_wr_data_reg[7] ;
  reg \cpuif_wr_data_reg[8] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[8]  <= 1'h0;
    else if (_012_) \cpuif_wr_data_reg[8]  <= s_apb_pwdata[8];
  assign cpuif_wr_data[8] = \cpuif_wr_data_reg[8] ;
  reg \cpuif_wr_data_reg[9] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[9]  <= 1'h0;
    else if (_012_) \cpuif_wr_data_reg[9]  <= s_apb_pwdata[9];
  assign cpuif_wr_data[9] = \cpuif_wr_data_reg[9] ;
  reg \cpuif_wr_data_reg[10] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[10]  <= 1'h0;
    else if (_012_) \cpuif_wr_data_reg[10]  <= s_apb_pwdata[10];
  assign cpuif_wr_data[10] = \cpuif_wr_data_reg[10] ;
  reg \cpuif_wr_data_reg[11] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[11]  <= 1'h0;
    else if (_012_) \cpuif_wr_data_reg[11]  <= s_apb_pwdata[11];
  assign cpuif_wr_data[11] = \cpuif_wr_data_reg[11] ;
  reg \cpuif_wr_data_reg[12] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[12]  <= 1'h0;
    else if (_012_) \cpuif_wr_data_reg[12]  <= s_apb_pwdata[12];
  assign cpuif_wr_data[12] = \cpuif_wr_data_reg[12] ;
  reg \cpuif_wr_data_reg[13] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[13]  <= 1'h0;
    else if (_012_) \cpuif_wr_data_reg[13]  <= s_apb_pwdata[13];
  assign cpuif_wr_data[13] = \cpuif_wr_data_reg[13] ;
  reg \cpuif_wr_data_reg[14] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[14]  <= 1'h0;
    else if (_012_) \cpuif_wr_data_reg[14]  <= s_apb_pwdata[14];
  assign cpuif_wr_data[14] = \cpuif_wr_data_reg[14] ;
  reg \cpuif_wr_data_reg[15] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[15]  <= 1'h0;
    else if (_012_) \cpuif_wr_data_reg[15]  <= s_apb_pwdata[15];
  assign cpuif_wr_data[15] = \cpuif_wr_data_reg[15] ;
  reg \cpuif_wr_biten_reg[6] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_biten_reg[6]  <= 1'h0;
    else if (_012_) \cpuif_wr_biten_reg[6]  <= s_apb_pstrb[0];
  assign cpuif_wr_biten[6] = \cpuif_wr_biten_reg[6] ;
  reg \cpuif_addr_reg[2] ;
  always @(posedge clk)
    if (rst) \cpuif_addr_reg[2]  <= 1'h0;
    else if (_012_) \cpuif_addr_reg[2]  <= s_apb_paddr[2];
  assign cpuif_addr[2] = \cpuif_addr_reg[2] ;
  reg \cpuif_addr_reg[3] ;
  always @(posedge clk)
    if (rst) \cpuif_addr_reg[3]  <= 1'h0;
    else if (_012_) \cpuif_addr_reg[3]  <= s_apb_paddr[3];
  assign cpuif_addr[3] = \cpuif_addr_reg[3] ;
  always @(posedge clk)
    if (rst) is_active <= 1'h0;
    else is_active <= _043_;
  always @(posedge clk)
    if (rst) field_storage_r1_f2_value[0] <= 1'h1;
    else if (_013_) field_storage_r1_f2_value[0] <= field_combo_r1_f2_next[0];
  always @(posedge clk)
    if (rst) field_storage_r1_f2_value[1] <= 1'h1;
    else if (_013_) field_storage_r1_f2_value[1] <= field_combo_r1_f2_next[1];
  always @(posedge clk)
    if (rst) field_storage_r1_f2_value[2] <= 1'h1;
    else if (_013_) field_storage_r1_f2_value[2] <= field_combo_r1_f2_next[2];
  always @(posedge clk)
    if (rst) field_storage_r1_f2_value[3] <= 1'h1;
    else if (_013_) field_storage_r1_f2_value[3] <= field_combo_r1_f2_next[3];
  always @(posedge clk)
    if (rst) field_storage_r1_f2_value[4] <= 1'h0;
    else if (_013_) field_storage_r1_f2_value[4] <= field_combo_r1_f2_next[4];
  always @(posedge clk)
    if (rst) field_storage_r1_f2_value[5] <= 1'h0;
    else if (_013_) field_storage_r1_f2_value[5] <= field_combo_r1_f2_next[5];
  always @(posedge clk)
    if (rst) field_storage_r1_f2_value[6] <= 1'h0;
    else if (_013_) field_storage_r1_f2_value[6] <= field_combo_r1_f2_next[6];
  always @(posedge clk)
    if (rst) field_storage_r1_f2_value[7] <= 1'h0;
    else if (_013_) field_storage_r1_f2_value[7] <= field_combo_r1_f2_next[7];
  reg \cpuif_wr_biten_reg[14] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_biten_reg[14]  <= 1'h0;
    else if (_012_) \cpuif_wr_biten_reg[14]  <= s_apb_pstrb[1];
  assign cpuif_wr_biten[14] = \cpuif_wr_biten_reg[14] ;
  assign _017_ = ~cpuif_addr[3];
  assign _016_ = ~cpuif_addr[2];
  assign decoded_reg_strb_r1 = cpuif_req & _022_;
  assign decoded_reg_strb_r2 = cpuif_req & _023_;
  assign decoded_reg_strb_r3 = cpuif_req & _024_;
  assign decoded_reg_strb_r4 = cpuif_req & _025_;
  assign _003_[0] = field_storage_r1_f1_value[0] & _030_[7];
  assign _003_[1] = field_storage_r1_f1_value[1] & _030_[7];
  assign _003_[2] = field_storage_r1_f1_value[2] & _030_[7];
  assign _003_[3] = field_storage_r1_f1_value[3] & _030_[7];
  assign _003_[4] = field_storage_r1_f1_value[4] & _030_[7];
  assign _003_[5] = field_storage_r1_f1_value[5] & _030_[7];
  assign _003_[6] = field_storage_r1_f1_value[6] & _030_[7];
  assign _003_[7] = field_storage_r1_f1_value[7] & _030_[7];
  assign _004_[3] = cpuif_wr_data[3] & cpuif_wr_biten[6];
  assign _004_[7] = cpuif_wr_data[7] & cpuif_wr_biten[6];
  assign _035_[0] = _003_[0] | _004_[0];
  assign _035_[1] = _003_[1] | _004_[1];
  assign _035_[2] = _003_[2] | _004_[2];
  assign _035_[3] = _003_[3] | _004_[3];
  assign _035_[4] = _003_[4] | _004_[4];
  assign _035_[5] = _003_[5] | _004_[5];
  assign _035_[6] = _003_[6] | _004_[6];
  assign _035_[7] = _003_[7] | _004_[7];
  assign _005_[0] = field_storage_r1_f2_value[0] & _031_[7];
  assign _005_[1] = field_storage_r1_f2_value[1] & _031_[7];
  assign _005_[2] = field_storage_r1_f2_value[2] & _031_[7];
  assign _005_[3] = field_storage_r1_f2_value[3] & _031_[7];
  assign _005_[4] = field_storage_r1_f2_value[4] & _031_[7];
  assign _005_[5] = field_storage_r1_f2_value[5] & _031_[7];
  assign _005_[6] = field_storage_r1_f2_value[6] & _031_[7];
  assign _005_[7] = field_storage_r1_f2_value[7] & _031_[7];
  assign _006_[3] = cpuif_wr_data[11] & cpuif_wr_biten[14];
  assign _006_[4] = cpuif_wr_data[12] & cpuif_wr_biten[14];
  assign _006_[5] = cpuif_wr_data[13] & cpuif_wr_biten[14];
  assign _006_[6] = cpuif_wr_data[14] & cpuif_wr_biten[14];
  assign _006_[7] = cpuif_wr_data[15] & cpuif_wr_biten[14];
  assign _036_[0] = _005_[0] | _006_[0];
  assign _036_[1] = _005_[1] | _006_[1];
  assign _036_[2] = _005_[2] | _006_[2];
  assign _036_[3] = _005_[3] | _006_[3];
  assign _036_[4] = _005_[4] | _006_[4];
  assign _036_[5] = _005_[5] | _006_[5];
  assign _036_[6] = _005_[6] | _006_[6];
  assign _036_[7] = _005_[7] | _006_[7];
  assign _004_[0] = cpuif_wr_data[0] & cpuif_wr_biten[6];
  assign _004_[1] = cpuif_wr_data[1] & cpuif_wr_biten[6];
  assign _004_[2] = cpuif_wr_data[2] & cpuif_wr_biten[6];
  assign _037_[0] = field_storage_r2_f1_value[0] | _004_[0];
  assign _037_[1] = field_storage_r2_f1_value[1] | _004_[1];
  assign _037_[2] = field_storage_r2_f1_value[2] | _004_[2];
  assign _037_[3] = field_storage_r2_f1_value[3] | _004_[3];
  assign _004_[4] = cpuif_wr_data[4] & cpuif_wr_biten[6];
  assign _004_[5] = cpuif_wr_data[5] & cpuif_wr_biten[6];
  assign _004_[6] = cpuif_wr_data[6] & cpuif_wr_biten[6];
  assign _007_[0] = field_storage_r2_f2_value[0] & _032_[0];
  assign _007_[1] = field_storage_r2_f2_value[1] & _032_[1];
  assign _007_[2] = field_storage_r2_f2_value[2] & _032_[2];
  assign _007_[3] = field_storage_r2_f2_value[3] & _032_[3];
  assign _006_[0] = cpuif_wr_data[8] & cpuif_wr_biten[14];
  assign _006_[1] = cpuif_wr_data[9] & cpuif_wr_biten[14];
  assign _006_[2] = cpuif_wr_data[10] & cpuif_wr_biten[14];
  assign _044_[0] = field_storage_r2_f3_value[0] ^ _006_[0];
  assign _044_[1] = field_storage_r2_f3_value[1] ^ _006_[1];
  assign _044_[2] = field_storage_r2_f3_value[2] ^ _006_[2];
  assign _044_[3] = field_storage_r2_f3_value[3] ^ _006_[3];
  assign _008_[0] = _033_[0] & cpuif_wr_biten[6];
  assign _008_[1] = _033_[1] & cpuif_wr_biten[6];
  assign _008_[2] = _033_[2] & cpuif_wr_biten[6];
  assign _008_[3] = _033_[3] & cpuif_wr_biten[6];
  assign _038_[0] = field_storage_r3_f1_value[0] | _008_[0];
  assign _038_[1] = field_storage_r3_f1_value[1] | _008_[1];
  assign _038_[2] = field_storage_r3_f1_value[2] | _008_[2];
  assign _038_[3] = field_storage_r3_f1_value[3] | _008_[3];
  assign _039_[0] = cpuif_wr_data[4] | _030_[7];
  assign _039_[1] = cpuif_wr_data[5] | _030_[7];
  assign _039_[2] = cpuif_wr_data[6] | _030_[7];
  assign _039_[3] = cpuif_wr_data[7] | _030_[7];
  assign _009_[0] = field_storage_r3_f2_value[0] & _039_[0];
  assign _009_[1] = field_storage_r3_f2_value[1] & _039_[1];
  assign _009_[2] = field_storage_r3_f2_value[2] & _039_[2];
  assign _009_[3] = field_storage_r3_f2_value[3] & _039_[3];
  assign _010_[0] = _034_[0] & cpuif_wr_biten[14];
  assign _010_[1] = _034_[1] & cpuif_wr_biten[14];
  assign _010_[2] = _034_[2] & cpuif_wr_biten[14];
  assign _010_[3] = _034_[3] & cpuif_wr_biten[14];
  assign _045_[0] = field_storage_r3_f3_value[0] ^ _010_[0];
  assign _045_[1] = field_storage_r3_f3_value[1] ^ _010_[1];
  assign _045_[2] = field_storage_r3_f3_value[2] ^ _010_[2];
  assign _045_[3] = field_storage_r3_f3_value[3] ^ _010_[3];
  assign cpuif_wr_ack = cpuif_req & cpuif_req_is_wr;
  assign cpuif_rd_ack = cpuif_req & _029_;
  assign _040_[0] = \readback_array[0] [0] | \readback_array[1] [0];
  assign _040_[1] = \readback_array[0] [1] | \readback_array[1] [1];
  assign _040_[2] = \readback_array[0] [2] | \readback_array[1] [2];
  assign _040_[3] = \readback_array[0] [3] | \readback_array[1] [3];
  assign _040_[4] = \readback_array[0] [4] | \readback_array[1] [4];
  assign _040_[5] = \readback_array[0] [5] | \readback_array[1] [5];
  assign _040_[6] = \readback_array[0] [6] | \readback_array[1] [6];
  assign _040_[7] = \readback_array[0] [7] | \readback_array[1] [7];
  assign _040_[8] = \readback_array[0] [8] | \readback_array[1] [8];
  assign _040_[9] = \readback_array[0] [9] | \readback_array[1] [9];
  assign _040_[10] = \readback_array[0] [10] | \readback_array[1] [10];
  assign _040_[11] = \readback_array[0] [11] | \readback_array[1] [11];
  assign s_apb_prdata[0] = _040_[0] | \readback_array[2] [0];
  assign s_apb_prdata[1] = _040_[1] | \readback_array[2] [1];
  assign s_apb_prdata[2] = _040_[2] | \readback_array[2] [2];
  assign s_apb_prdata[3] = _040_[3] | \readback_array[2] [3];
  assign _041_[4] = _040_[4] | \readback_array[2] [4];
  assign _041_[5] = _040_[5] | \readback_array[2] [5];
  assign _041_[6] = _040_[6] | \readback_array[2] [6];
  assign _041_[7] = _040_[7] | \readback_array[2] [7];
  assign _041_[8] = _040_[8] | \readback_array[2] [8];
  assign _041_[9] = _040_[9] | \readback_array[2] [9];
  assign _041_[10] = _040_[10] | \readback_array[2] [10];
  assign _041_[11] = _040_[11] | \readback_array[2] [11];
  assign s_apb_prdata[4] = _041_[4] | \readback_array[3] [7];
  assign s_apb_prdata[5] = _041_[5] | \readback_array[3] [7];
  assign s_apb_prdata[6] = _041_[6] | \readback_array[3] [7];
  assign s_apb_prdata[7] = _041_[7] | \readback_array[3] [7];
  assign s_apb_prdata[8] = _041_[8] | \readback_array[3] [11];
  assign s_apb_prdata[9] = _041_[9] | \readback_array[3] [11];
  assign s_apb_prdata[10] = _041_[10] | \readback_array[3] [11];
  assign s_apb_prdata[11] = _041_[11] | \readback_array[3] [11];
  assign s_apb_prdata[12] = \readback_array[0] [12] | \readback_array[3] [15];
  assign s_apb_prdata[13] = \readback_array[0] [13] | \readback_array[3] [15];
  assign s_apb_prdata[14] = \readback_array[0] [14] | \readback_array[3] [15];
  assign s_apb_prdata[15] = \readback_array[0] [15] | \readback_array[3] [15];
  assign _012_ = s_apb_psel & _015_;
  assign _019_ = _016_ | cpuif_addr[3];
  assign _020_ = cpuif_addr[2] | _017_;
  assign _021_ = _016_ | _017_;
  assign _011_ = _026_ | _000_;
  assign _013_ = field_combo_r1_f1_load_next & _011_;
  assign _014_ = rst | is_active;
  assign _018_[1] = cpuif_addr[2] | cpuif_addr[3];
  assign _022_ = ~_018_[1];
  assign _023_ = ~_019_;
  assign _024_ = ~_020_;
  assign _025_ = ~_021_;
  assign _029_ = ~cpuif_req_is_wr;
  assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
  assign _000_ = decoded_reg_strb_r1 & cpuif_req_is_wr;
  assign field_combo_r2_f1_load_next = decoded_reg_strb_r2 & cpuif_req_is_wr;
  assign field_combo_r3_f1_load_next = decoded_reg_strb_r3 & cpuif_req_is_wr;
  assign field_combo_r4_f1_load_next = decoded_reg_strb_r4 & cpuif_req_is_wr;
  assign _026_ = decoded_reg_strb_r1 & _029_;
  assign _027_ = decoded_reg_strb_r2 & _029_;
  assign _028_ = decoded_reg_strb_r3 & _029_;
  assign \readback_array[3] [11] = decoded_reg_strb_r4 & _029_;
  assign field_combo_r1_f2_next[0] = _026_ ? 1'h1 : _002_[0];
  assign field_combo_r1_f2_next[1] = _026_ ? 1'h1 : _002_[1];
  assign field_combo_r1_f2_next[2] = _026_ ? 1'h1 : _002_[2];
  assign field_combo_r1_f2_next[3] = _026_ ? 1'h1 : _002_[3];
  assign field_combo_r1_f2_next[4] = _026_ ? 1'h1 : _002_[4];
  assign field_combo_r1_f2_next[5] = _026_ ? 1'h1 : _002_[5];
  assign field_combo_r1_f2_next[6] = _026_ ? 1'h1 : _002_[6];
  assign field_combo_r1_f2_next[7] = _026_ ? 1'h1 : _002_[7];
  assign _001_[0] = _000_ ? _035_[0] : 1'hx;
  assign _001_[1] = _000_ ? _035_[1] : 1'hx;
  assign _001_[2] = _000_ ? _035_[2] : 1'hx;
  assign _001_[3] = _000_ ? _035_[3] : 1'hx;
  assign _001_[4] = _000_ ? _035_[4] : 1'hx;
  assign _001_[5] = _000_ ? _035_[5] : 1'hx;
  assign _001_[6] = _000_ ? _035_[6] : 1'hx;
  assign _001_[7] = _000_ ? _035_[7] : 1'hx;
  assign field_combo_r1_f1_load_next = _026_ ? 1'h1 : _000_;
  assign field_combo_r1_f1_next[0] = _026_ ? 1'h0 : _001_[0];
  assign field_combo_r1_f1_next[1] = _026_ ? 1'h0 : _001_[1];
  assign field_combo_r1_f1_next[2] = _026_ ? 1'h0 : _001_[2];
  assign field_combo_r1_f1_next[3] = _026_ ? 1'h0 : _001_[3];
  assign field_combo_r1_f1_next[4] = _026_ ? 1'h0 : _001_[4];
  assign field_combo_r1_f1_next[5] = _026_ ? 1'h0 : _001_[5];
  assign field_combo_r1_f1_next[6] = _026_ ? 1'h0 : _001_[6];
  assign field_combo_r1_f1_next[7] = _026_ ? 1'h0 : _001_[7];
  assign _042_ = ~s_apb_pready;
  assign _043_ = is_active ? _042_ : s_apb_psel;
  assign \readback_array[0] [0] = _026_ ? field_storage_r1_f1_value[0] : 1'h0;
  assign \readback_array[0] [1] = _026_ ? field_storage_r1_f1_value[1] : 1'h0;
  assign \readback_array[0] [2] = _026_ ? field_storage_r1_f1_value[2] : 1'h0;
  assign \readback_array[0] [3] = _026_ ? field_storage_r1_f1_value[3] : 1'h0;
  assign \readback_array[0] [4] = _026_ ? field_storage_r1_f1_value[4] : 1'h0;
  assign \readback_array[0] [5] = _026_ ? field_storage_r1_f1_value[5] : 1'h0;
  assign \readback_array[0] [6] = _026_ ? field_storage_r1_f1_value[6] : 1'h0;
  assign \readback_array[0] [7] = _026_ ? field_storage_r1_f1_value[7] : 1'h0;
  assign \readback_array[0] [8] = _026_ ? field_storage_r1_f2_value[0] : 1'h0;
  assign \readback_array[0] [9] = _026_ ? field_storage_r1_f2_value[1] : 1'h0;
  assign \readback_array[0] [10] = _026_ ? field_storage_r1_f2_value[2] : 1'h0;
  assign \readback_array[0] [11] = _026_ ? field_storage_r1_f2_value[3] : 1'h0;
  assign \readback_array[0] [12] = _026_ ? field_storage_r1_f2_value[4] : 1'h0;
  assign \readback_array[0] [13] = _026_ ? field_storage_r1_f2_value[5] : 1'h0;
  assign \readback_array[0] [14] = _026_ ? field_storage_r1_f2_value[6] : 1'h0;
  assign \readback_array[0] [15] = _026_ ? field_storage_r1_f2_value[7] : 1'h0;
  assign \readback_array[1] [0] = _027_ ? field_storage_r2_f1_value[0] : 1'h0;
  assign \readback_array[1] [1] = _027_ ? field_storage_r2_f1_value[1] : 1'h0;
  assign \readback_array[1] [2] = _027_ ? field_storage_r2_f1_value[2] : 1'h0;
  assign \readback_array[1] [3] = _027_ ? field_storage_r2_f1_value[3] : 1'h0;
  assign \readback_array[1] [4] = _027_ ? field_storage_r2_f2_value[0] : 1'h0;
  assign \readback_array[1] [5] = _027_ ? field_storage_r2_f2_value[1] : 1'h0;
  assign \readback_array[1] [6] = _027_ ? field_storage_r2_f2_value[2] : 1'h0;
  assign \readback_array[1] [7] = _027_ ? field_storage_r2_f2_value[3] : 1'h0;
  assign \readback_array[1] [8] = _027_ ? field_storage_r2_f3_value[0] : 1'h0;
  assign \readback_array[1] [9] = _027_ ? field_storage_r2_f3_value[1] : 1'h0;
  assign \readback_array[1] [10] = _027_ ? field_storage_r2_f3_value[2] : 1'h0;
  assign \readback_array[1] [11] = _027_ ? field_storage_r2_f3_value[3] : 1'h0;
  assign \readback_array[2] [0] = _028_ ? field_storage_r3_f1_value[0] : 1'h0;
  assign \readback_array[2] [1] = _028_ ? field_storage_r3_f1_value[1] : 1'h0;
  assign \readback_array[2] [2] = _028_ ? field_storage_r3_f1_value[2] : 1'h0;
  assign \readback_array[2] [3] = _028_ ? field_storage_r3_f1_value[3] : 1'h0;
  assign \readback_array[2] [4] = _028_ ? field_storage_r3_f2_value[0] : 1'h0;
  assign \readback_array[2] [5] = _028_ ? field_storage_r3_f2_value[1] : 1'h0;
  assign \readback_array[2] [6] = _028_ ? field_storage_r3_f2_value[2] : 1'h0;
  assign \readback_array[2] [7] = _028_ ? field_storage_r3_f2_value[3] : 1'h0;
  assign \readback_array[2] [8] = _028_ ? field_storage_r3_f3_value[0] : 1'h0;
  assign \readback_array[2] [9] = _028_ ? field_storage_r3_f3_value[1] : 1'h0;
  assign \readback_array[2] [10] = _028_ ? field_storage_r3_f3_value[2] : 1'h0;
  assign \readback_array[2] [11] = _028_ ? field_storage_r3_f3_value[3] : 1'h0;
  assign \readback_array[3] [7] = \readback_array[3] [11] ? field_storage_r4_f1_value[5] : 1'h0;
  assign \readback_array[3] [15] = \readback_array[3] [11] ? field_storage_r4_f2_value[6] : 1'h0;
  assign _002_[0] = _000_ ? _036_[0] : 1'hx;
  assign _002_[1] = _000_ ? _036_[1] : 1'hx;
  assign _002_[2] = _000_ ? _036_[2] : 1'hx;
  assign _002_[3] = _000_ ? _036_[3] : 1'hx;
  assign _002_[4] = _000_ ? _036_[4] : 1'hx;
  assign _002_[5] = _000_ ? _036_[5] : 1'hx;
  assign _002_[6] = _000_ ? _036_[6] : 1'hx;
  assign _002_[7] = _000_ ? _036_[7] : 1'hx;
  assign _031_[7] = ~cpuif_wr_biten[14];
  assign _032_[0] = ~_004_[4];
  assign _032_[1] = ~_004_[5];
  assign _032_[2] = ~_004_[6];
  assign _032_[3] = ~_004_[7];
  assign _033_[0] = ~cpuif_wr_data[0];
  assign _033_[1] = ~cpuif_wr_data[1];
  assign _033_[2] = ~cpuif_wr_data[2];
  assign _033_[3] = ~cpuif_wr_data[3];
  assign _030_[7] = ~cpuif_wr_biten[6];
  assign _034_[0] = ~cpuif_wr_data[8];
  assign _034_[1] = ~cpuif_wr_data[9];
  assign _034_[2] = ~cpuif_wr_data[10];
  assign _034_[3] = ~cpuif_wr_data[11];
  assign _015_ = ~is_active;
  assign _018_[0] = 1'h0;
  assign _030_[6:0] = { _030_[7], _030_[7], _030_[7], _030_[7], _030_[7], _030_[7], _030_[7] };
  assign _031_[6:0] = { _031_[7], _031_[7], _031_[7], _031_[7], _031_[7], _031_[7], _031_[7] };
  assign _040_[31:12] = { 16'h0000, \readback_array[0] [15:12] };
  assign { _041_[31:12], _041_[3:0] } = { 16'h0000, \readback_array[0] [15:12], s_apb_prdata[3:0] };
  assign cpuif_addr[1:0] = 2'h0;
  assign cpuif_rd_data = { 16'h0000, s_apb_prdata[15:0] };
  assign cpuif_rd_err = 1'h0;
  assign cpuif_req_masked = cpuif_req;
  assign cpuif_req_stall_rd = 1'h0;
  assign cpuif_req_stall_wr = 1'h0;
  assign { cpuif_wr_biten[15], cpuif_wr_biten[13:7], cpuif_wr_biten[5:0] } = { cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6] };
  assign cpuif_wr_err = 1'h0;
  assign decoded_req = cpuif_req;
  assign decoded_req_is_wr = cpuif_req_is_wr;
  assign decoded_wr_biten = { cpuif_wr_biten[31:16], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6] };
  assign decoded_wr_data = cpuif_wr_data;
  assign field_combo_r1_f2_load_next = field_combo_r1_f1_load_next;
  assign field_combo_r2_f2_load_next = field_combo_r2_f1_load_next;
  assign field_combo_r2_f3_load_next = field_combo_r2_f1_load_next;
  assign field_combo_r3_f2_load_next = field_combo_r3_f1_load_next;
  assign field_combo_r3_f3_load_next = field_combo_r3_f1_load_next;
  assign field_combo_r4_f2_load_next = field_combo_r4_f1_load_next;
  assign { field_storage_r4_f1_value[7:6], field_storage_r4_f1_value[4:0] } = { field_storage_r4_f1_value[5], field_storage_r4_f1_value[5], field_storage_r4_f1_value[5], 4'h0 };
  assign { field_storage_r4_f2_value[7], field_storage_r4_f2_value[5:0] } = { field_storage_r4_f2_value[6], field_storage_r4_f2_value[6], field_storage_r4_f2_value[6], 4'hf };
  assign \readback_array[0] [31:16] = 16'h0000;
  assign \readback_array[1] [31:12] = 20'h00000;
  assign \readback_array[2] [31:12] = 20'h00000;
  assign { \readback_array[3] [31:16], \readback_array[3] [14:12], \readback_array[3] [10:8], \readback_array[3] [6:0] } = { 16'h0000, \readback_array[3] [15], \readback_array[3] [15], \readback_array[3] [15], \readback_array[3] [11], \readback_array[3] [11], \readback_array[3] [11], \readback_array[3] [7], \readback_array[3] [7], \readback_array[3] [7], 4'h0 };
  assign readback_data = { 16'h0000, s_apb_prdata[15:0] };
  assign readback_done = cpuif_rd_ack;
  assign readback_err = 1'h0;
  assign readback_external_rd_ack = 1'h0;
  assign s_apb_prdata[31:16] = 16'h0000;
  assign s_apb_pslverr = 1'h0;
endmodule
