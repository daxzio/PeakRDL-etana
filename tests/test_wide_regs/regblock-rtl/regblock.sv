// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module regblock (
        input wire clk,
        input wire rst,

        input wire s_apb_psel,
        input wire s_apb_penable,
        input wire s_apb_pwrite,
        input wire [2:0] s_apb_pprot,
        input wire [5:0] s_apb_paddr,
        input wire [15:0] s_apb_pwdata,
        input wire [1:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [15:0] s_apb_prdata,
        output logic s_apb_pslverr,

        input regblock_pkg::regblock__in_t hwif_in,
        output regblock_pkg::regblock__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [5:0] cpuif_addr;
    logic [15:0] cpuif_wr_data;
    logic [15:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [15:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    // Request
    logic is_active;
    always_ff @(posedge clk) begin
        if(rst) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= {s_apb_paddr[5:1], 1'b0};
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<2; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic [3:0] rw_reg1;
        logic [3:0] rw_reg2;
        logic [3:0] rw_reg1_lsb0;
        logic [3:0] rw_reg2_lsb0;
        logic [1:0] r_reg;
        logic [1:0] r_reg_lsb0;
        logic [3:0] r_reg2;
        logic counter_reg;
        logic [1:0] r_reg3;
        logic [1:0] r_reg4;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [15:0] decoded_wr_data;
    logic [15:0] decoded_wr_biten;

    always_comb begin
        decoded_reg_strb.rw_reg1[0] = cpuif_req_masked & (cpuif_addr == 6'h0);
        decoded_reg_strb.rw_reg1[1] = cpuif_req_masked & (cpuif_addr == 6'h2);
        decoded_reg_strb.rw_reg1[2] = cpuif_req_masked & (cpuif_addr == 6'h4);
        decoded_reg_strb.rw_reg1[3] = cpuif_req_masked & (cpuif_addr == 6'h6);
        decoded_reg_strb.rw_reg2[0] = cpuif_req_masked & (cpuif_addr == 6'h8);
        decoded_reg_strb.rw_reg2[1] = cpuif_req_masked & (cpuif_addr == 6'ha);
        decoded_reg_strb.rw_reg2[2] = cpuif_req_masked & (cpuif_addr == 6'hc);
        decoded_reg_strb.rw_reg2[3] = cpuif_req_masked & (cpuif_addr == 6'he);
        decoded_reg_strb.rw_reg1_lsb0[0] = cpuif_req_masked & (cpuif_addr == 6'h10);
        decoded_reg_strb.rw_reg1_lsb0[1] = cpuif_req_masked & (cpuif_addr == 6'h12);
        decoded_reg_strb.rw_reg1_lsb0[2] = cpuif_req_masked & (cpuif_addr == 6'h14);
        decoded_reg_strb.rw_reg1_lsb0[3] = cpuif_req_masked & (cpuif_addr == 6'h16);
        decoded_reg_strb.rw_reg2_lsb0[0] = cpuif_req_masked & (cpuif_addr == 6'h18);
        decoded_reg_strb.rw_reg2_lsb0[1] = cpuif_req_masked & (cpuif_addr == 6'h1a);
        decoded_reg_strb.rw_reg2_lsb0[2] = cpuif_req_masked & (cpuif_addr == 6'h1c);
        decoded_reg_strb.rw_reg2_lsb0[3] = cpuif_req_masked & (cpuif_addr == 6'h1e);
        decoded_reg_strb.r_reg[0] = cpuif_req_masked & (cpuif_addr == 6'h20);
        decoded_reg_strb.r_reg[1] = cpuif_req_masked & (cpuif_addr == 6'h22);
        decoded_reg_strb.r_reg_lsb0[0] = cpuif_req_masked & (cpuif_addr == 6'h24);
        decoded_reg_strb.r_reg_lsb0[1] = cpuif_req_masked & (cpuif_addr == 6'h26);
        decoded_reg_strb.r_reg2[0] = cpuif_req_masked & (cpuif_addr == 6'h28);
        decoded_reg_strb.r_reg2[1] = cpuif_req_masked & (cpuif_addr == 6'h2a);
        decoded_reg_strb.r_reg2[2] = cpuif_req_masked & (cpuif_addr == 6'h2c);
        decoded_reg_strb.r_reg2[3] = cpuif_req_masked & (cpuif_addr == 6'h2e);
        decoded_reg_strb.counter_reg = cpuif_req_masked & (cpuif_addr == 6'h30);
        decoded_reg_strb.r_reg3[0] = cpuif_req_masked & (cpuif_addr == 6'h34);
        decoded_reg_strb.r_reg3[1] = cpuif_req_masked & (cpuif_addr == 6'h36);
        decoded_reg_strb.r_reg4[0] = cpuif_req_masked & (cpuif_addr == 6'h38);
        decoded_reg_strb.r_reg4[1] = cpuif_req_masked & (cpuif_addr == 6'h3a);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    // bitswap for use by fields with msb0 ordering
    logic [15:0] decoded_wr_data_bswap;
    logic [15:0] decoded_wr_biten_bswap;
    assign decoded_wr_data_bswap = {<<{decoded_wr_data}};
    assign decoded_wr_biten_bswap = {<<{decoded_wr_biten}};
    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } f1;
            struct {
                logic [2:0] next;
                logic load_next;
            } f2;
            struct {
                logic next;
                logic load_next;
            } f3;
            struct {
                logic [7:0] next;
                logic load_next;
            } f4;
        } rw_reg1;
        struct {
            struct {
                logic [3:0] next;
                logic load_next;
            } f1;
            struct {
                logic [15:0] next;
                logic load_next;
            } f2;
        } rw_reg2;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } f1;
            struct {
                logic [2:0] next;
                logic load_next;
            } f2;
            struct {
                logic next;
                logic load_next;
            } f3;
            struct {
                logic [7:0] next;
                logic load_next;
            } f4;
        } rw_reg1_lsb0;
        struct {
            struct {
                logic [3:0] next;
                logic load_next;
            } f1;
            struct {
                logic [15:0] next;
                logic load_next;
            } f2;
        } rw_reg2_lsb0;
        struct {
            struct {
                logic next;
                logic load_next;
            } f0;
        } r_reg;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
                logic incrthreshold;
                logic overflow;
            } f1_cnt;
            struct {
                logic [7:0] next;
                logic load_next;
                logic incrthreshold;
                logic overflow;
            } f2_cnt;
        } counter_reg;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic [7:0] value;
            } f1;
            struct {
                logic [2:0] value;
            } f2;
            struct {
                logic value;
            } f3;
            struct {
                logic [7:0] value;
            } f4;
        } rw_reg1;
        struct {
            struct {
                logic [3:0] value;
            } f1;
            struct {
                logic [15:0] value;
            } f2;
        } rw_reg2;
        struct {
            struct {
                logic [7:0] value;
            } f1;
            struct {
                logic [2:0] value;
            } f2;
            struct {
                logic value;
            } f3;
            struct {
                logic [7:0] value;
            } f4;
        } rw_reg1_lsb0;
        struct {
            struct {
                logic [3:0] value;
            } f1;
            struct {
                logic [15:0] value;
            } f2;
        } rw_reg2_lsb0;
        struct {
            struct {
                logic value;
            } f0;
        } r_reg;
        struct {
            struct {
                logic [7:0] value;
            } f1_cnt;
            struct {
                logic [7:0] value;
            } f2_cnt;
        } counter_reg;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: regblock.rw_reg1.f1
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.rw_reg1.f1.value;
        load_next_c = '0;
        if(decoded_reg_strb.rw_reg1[0] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.rw_reg1.f1.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo.rw_reg1.f1.next = next_c;
        field_combo.rw_reg1.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.rw_reg1.f1.value <= 8'h0;
        end else begin
            if(field_combo.rw_reg1.f1.load_next) begin
                field_storage.rw_reg1.f1.value <= field_combo.rw_reg1.f1.next;
            end
        end
    end
    assign hwif_out.rw_reg1.f1.value = field_storage.rw_reg1.f1.value;
    // Field: regblock.rw_reg1.f2
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.rw_reg1.f2.value;
        load_next_c = '0;
        if(decoded_reg_strb.rw_reg1[0] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.rw_reg1.f2.value & ~decoded_wr_biten[14:12]) | (decoded_wr_data[14:12] & decoded_wr_biten[14:12]);
            load_next_c = '1;
        end
        field_combo.rw_reg1.f2.next = next_c;
        field_combo.rw_reg1.f2.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.rw_reg1.f2.value <= 3'h0;
        end else begin
            if(field_combo.rw_reg1.f2.load_next) begin
                field_storage.rw_reg1.f2.value <= field_combo.rw_reg1.f2.next;
            end
        end
    end
    assign hwif_out.rw_reg1.f2.value = field_storage.rw_reg1.f2.value;
    // Field: regblock.rw_reg1.f3
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.rw_reg1.f3.value;
        load_next_c = '0;
        if(decoded_reg_strb.rw_reg1[2] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.rw_reg1.f3.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.rw_reg1.f3.next = next_c;
        field_combo.rw_reg1.f3.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.rw_reg1.f3.value <= 1'h0;
        end else begin
            if(field_combo.rw_reg1.f3.load_next) begin
                field_storage.rw_reg1.f3.value <= field_combo.rw_reg1.f3.next;
            end
        end
    end
    assign hwif_out.rw_reg1.f3.value = field_storage.rw_reg1.f3.value;
    // Field: regblock.rw_reg1.f4
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.rw_reg1.f4.value;
        load_next_c = '0;
        if(decoded_reg_strb.rw_reg1[2] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.rw_reg1.f4.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end
        field_combo.rw_reg1.f4.next = next_c;
        field_combo.rw_reg1.f4.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.rw_reg1.f4.value <= 8'h0;
        end else begin
            if(field_combo.rw_reg1.f4.load_next) begin
                field_storage.rw_reg1.f4.value <= field_combo.rw_reg1.f4.next;
            end
        end
    end
    assign hwif_out.rw_reg1.f4.value = field_storage.rw_reg1.f4.value;
    // Field: regblock.rw_reg2.f1
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.rw_reg2.f1.value;
        load_next_c = '0;
        if(decoded_reg_strb.rw_reg2[1] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.rw_reg2.f1.value & ~decoded_wr_biten[3:0]) | (decoded_wr_data[3:0] & decoded_wr_biten[3:0]);
            load_next_c = '1;
        end
        field_combo.rw_reg2.f1.next = next_c;
        field_combo.rw_reg2.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.rw_reg2.f1.value <= 4'h0;
        end else begin
            if(field_combo.rw_reg2.f1.load_next) begin
                field_storage.rw_reg2.f1.value <= field_combo.rw_reg2.f1.next;
            end
        end
    end
    assign hwif_out.rw_reg2.f1.value = field_storage.rw_reg2.f1.value;
    // Field: regblock.rw_reg2.f2
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.rw_reg2.f2.value;
        load_next_c = '0;
        if(decoded_reg_strb.rw_reg2[3] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.rw_reg2.f2.value & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
            load_next_c = '1;
        end
        field_combo.rw_reg2.f2.next = next_c;
        field_combo.rw_reg2.f2.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.rw_reg2.f2.value <= 16'h0;
        end else begin
            if(field_combo.rw_reg2.f2.load_next) begin
                field_storage.rw_reg2.f2.value <= field_combo.rw_reg2.f2.next;
            end
        end
    end
    assign hwif_out.rw_reg2.f2.value = field_storage.rw_reg2.f2.value;
    // Field: regblock.rw_reg1_lsb0.f1
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.rw_reg1_lsb0.f1.value;
        load_next_c = '0;
        if(decoded_reg_strb.rw_reg1_lsb0[0] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.rw_reg1_lsb0.f1.value & ~decoded_wr_biten_bswap[15:8]) | (decoded_wr_data_bswap[15:8] & decoded_wr_biten_bswap[15:8]);
            load_next_c = '1;
        end
        field_combo.rw_reg1_lsb0.f1.next = next_c;
        field_combo.rw_reg1_lsb0.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.rw_reg1_lsb0.f1.value <= 8'h0;
        end else begin
            if(field_combo.rw_reg1_lsb0.f1.load_next) begin
                field_storage.rw_reg1_lsb0.f1.value <= field_combo.rw_reg1_lsb0.f1.next;
            end
        end
    end
    assign hwif_out.rw_reg1_lsb0.f1.value = field_storage.rw_reg1_lsb0.f1.value;
    // Field: regblock.rw_reg1_lsb0.f2
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.rw_reg1_lsb0.f2.value;
        load_next_c = '0;
        if(decoded_reg_strb.rw_reg1_lsb0[0] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.rw_reg1_lsb0.f2.value & ~decoded_wr_biten_bswap[3:1]) | (decoded_wr_data_bswap[3:1] & decoded_wr_biten_bswap[3:1]);
            load_next_c = '1;
        end
        field_combo.rw_reg1_lsb0.f2.next = next_c;
        field_combo.rw_reg1_lsb0.f2.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.rw_reg1_lsb0.f2.value <= 3'h0;
        end else begin
            if(field_combo.rw_reg1_lsb0.f2.load_next) begin
                field_storage.rw_reg1_lsb0.f2.value <= field_combo.rw_reg1_lsb0.f2.next;
            end
        end
    end
    assign hwif_out.rw_reg1_lsb0.f2.value = field_storage.rw_reg1_lsb0.f2.value;
    // Field: regblock.rw_reg1_lsb0.f3
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.rw_reg1_lsb0.f3.value;
        load_next_c = '0;
        if(decoded_reg_strb.rw_reg1_lsb0[2] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.rw_reg1_lsb0.f3.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.rw_reg1_lsb0.f3.next = next_c;
        field_combo.rw_reg1_lsb0.f3.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.rw_reg1_lsb0.f3.value <= 1'h0;
        end else begin
            if(field_combo.rw_reg1_lsb0.f3.load_next) begin
                field_storage.rw_reg1_lsb0.f3.value <= field_combo.rw_reg1_lsb0.f3.next;
            end
        end
    end
    assign hwif_out.rw_reg1_lsb0.f3.value = field_storage.rw_reg1_lsb0.f3.value;
    // Field: regblock.rw_reg1_lsb0.f4
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.rw_reg1_lsb0.f4.value;
        load_next_c = '0;
        if(decoded_reg_strb.rw_reg1_lsb0[2] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.rw_reg1_lsb0.f4.value & ~decoded_wr_biten_bswap[7:0]) | (decoded_wr_data_bswap[7:0] & decoded_wr_biten_bswap[7:0]);
            load_next_c = '1;
        end
        field_combo.rw_reg1_lsb0.f4.next = next_c;
        field_combo.rw_reg1_lsb0.f4.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.rw_reg1_lsb0.f4.value <= 8'h0;
        end else begin
            if(field_combo.rw_reg1_lsb0.f4.load_next) begin
                field_storage.rw_reg1_lsb0.f4.value <= field_combo.rw_reg1_lsb0.f4.next;
            end
        end
    end
    assign hwif_out.rw_reg1_lsb0.f4.value = field_storage.rw_reg1_lsb0.f4.value;
    // Field: regblock.rw_reg2_lsb0.f1
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.rw_reg2_lsb0.f1.value;
        load_next_c = '0;
        if(decoded_reg_strb.rw_reg2_lsb0[1] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.rw_reg2_lsb0.f1.value & ~decoded_wr_biten_bswap[15:12]) | (decoded_wr_data_bswap[15:12] & decoded_wr_biten_bswap[15:12]);
            load_next_c = '1;
        end
        field_combo.rw_reg2_lsb0.f1.next = next_c;
        field_combo.rw_reg2_lsb0.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.rw_reg2_lsb0.f1.value <= 4'h0;
        end else begin
            if(field_combo.rw_reg2_lsb0.f1.load_next) begin
                field_storage.rw_reg2_lsb0.f1.value <= field_combo.rw_reg2_lsb0.f1.next;
            end
        end
    end
    assign hwif_out.rw_reg2_lsb0.f1.value = field_storage.rw_reg2_lsb0.f1.value;
    // Field: regblock.rw_reg2_lsb0.f2
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.rw_reg2_lsb0.f2.value;
        load_next_c = '0;
        if(decoded_reg_strb.rw_reg2_lsb0[3] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.rw_reg2_lsb0.f2.value & ~decoded_wr_biten_bswap[15:0]) | (decoded_wr_data_bswap[15:0] & decoded_wr_biten_bswap[15:0]);
            load_next_c = '1;
        end
        field_combo.rw_reg2_lsb0.f2.next = next_c;
        field_combo.rw_reg2_lsb0.f2.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.rw_reg2_lsb0.f2.value <= 16'h0;
        end else begin
            if(field_combo.rw_reg2_lsb0.f2.load_next) begin
                field_storage.rw_reg2_lsb0.f2.value <= field_combo.rw_reg2_lsb0.f2.next;
            end
        end
    end
    assign hwif_out.rw_reg2_lsb0.f2.value = field_storage.rw_reg2_lsb0.f2.value;
    // Field: regblock.r_reg.f0
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.r_reg.f0.value;
        load_next_c = '0;
        if(decoded_reg_strb.r_reg[0] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.r_reg.f0.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.r_reg.f0.next = next_c;
        field_combo.r_reg.f0.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.r_reg.f0.value <= 1'h0;
        end else begin
            if(field_combo.r_reg.f0.load_next) begin
                field_storage.r_reg.f0.value <= field_combo.r_reg.f0.next;
            end
        end
    end
    assign hwif_out.r_reg.f0.value = field_storage.r_reg.f0.value;
    // Field: regblock.counter_reg.f1_cnt
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.counter_reg.f1_cnt.value;
        load_next_c = '0;

        if(|decoded_reg_strb.r_reg2[1:0]) begin // increment
            field_combo.counter_reg.f1_cnt.overflow = (((9)'(next_c) + 8'h1) > 8'hff);
            next_c = next_c + 8'h1;
            load_next_c = '1;
        end else begin
            field_combo.counter_reg.f1_cnt.overflow = '0;
        end
        field_combo.counter_reg.f1_cnt.incrthreshold = (field_storage.counter_reg.f1_cnt.value >= 8'hff);
        field_combo.counter_reg.f1_cnt.next = next_c;
        field_combo.counter_reg.f1_cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.counter_reg.f1_cnt.value <= 8'h0;
        end else begin
            if(field_combo.counter_reg.f1_cnt.load_next) begin
                field_storage.counter_reg.f1_cnt.value <= field_combo.counter_reg.f1_cnt.next;
            end
        end
    end
    // Field: regblock.counter_reg.f2_cnt
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.counter_reg.f2_cnt.value;
        load_next_c = '0;

        if(decoded_reg_strb.r_reg2[3]) begin // increment
            field_combo.counter_reg.f2_cnt.overflow = (((9)'(next_c) + 8'h1) > 8'hff);
            next_c = next_c + 8'h1;
            load_next_c = '1;
        end else begin
            field_combo.counter_reg.f2_cnt.overflow = '0;
        end
        field_combo.counter_reg.f2_cnt.incrthreshold = (field_storage.counter_reg.f2_cnt.value >= 8'hff);
        field_combo.counter_reg.f2_cnt.next = next_c;
        field_combo.counter_reg.f2_cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.counter_reg.f2_cnt.value <= 8'h0;
        end else begin
            if(field_combo.counter_reg.f2_cnt.load_next) begin
                field_storage.counter_reg.f2_cnt.value <= field_combo.counter_reg.f2_cnt.next;
            end
        end
    end
    assign hwif_out.r_reg3.f1.value = 32'h12345678;
    assign hwif_out.r_reg4.f1.value = 32'h12345678;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------

    logic readback_err;
    logic readback_done;
    logic [15:0] readback_data;

    // Assign readback values to a flattened array
    logic [15:0] readback_array[20];
    assign readback_array[0][7:0] = (decoded_reg_strb.rw_reg1[0] && !decoded_req_is_wr) ? field_storage.rw_reg1.f1.value : '0;
    assign readback_array[0][11:8] = '0;
    assign readback_array[0][14:12] = (decoded_reg_strb.rw_reg1[0] && !decoded_req_is_wr) ? field_storage.rw_reg1.f2.value : '0;
    assign readback_array[0][15:15] = '0;
    assign readback_array[1][3:0] = '0;
    assign readback_array[1][4:4] = (decoded_reg_strb.rw_reg1[2] && !decoded_req_is_wr) ? field_storage.rw_reg1.f3.value : '0;
    assign readback_array[1][7:5] = '0;
    assign readback_array[1][15:8] = (decoded_reg_strb.rw_reg1[2] && !decoded_req_is_wr) ? field_storage.rw_reg1.f4.value : '0;
    assign readback_array[2][3:0] = (decoded_reg_strb.rw_reg2[1] && !decoded_req_is_wr) ? field_storage.rw_reg2.f1.value : '0;
    assign readback_array[2][15:4] = '0;
    assign readback_array[3][15:0] = (decoded_reg_strb.rw_reg2[3] && !decoded_req_is_wr) ? field_storage.rw_reg2.f2.value : '0;
    assign readback_array[4][7:0] = (decoded_reg_strb.rw_reg1_lsb0[0] && !decoded_req_is_wr) ? {<<{field_storage.rw_reg1_lsb0.f1.value}} : '0;
    assign readback_array[4][11:8] = '0;
    assign readback_array[4][14:12] = (decoded_reg_strb.rw_reg1_lsb0[0] && !decoded_req_is_wr) ? {<<{field_storage.rw_reg1_lsb0.f2.value}} : '0;
    assign readback_array[4][15:15] = '0;
    assign readback_array[5][3:0] = '0;
    assign readback_array[5][4:4] = (decoded_reg_strb.rw_reg1_lsb0[2] && !decoded_req_is_wr) ? field_storage.rw_reg1_lsb0.f3.value : '0;
    assign readback_array[5][7:5] = '0;
    assign readback_array[5][15:8] = (decoded_reg_strb.rw_reg1_lsb0[2] && !decoded_req_is_wr) ? {<<{field_storage.rw_reg1_lsb0.f4.value}} : '0;
    assign readback_array[6][3:0] = (decoded_reg_strb.rw_reg2_lsb0[1] && !decoded_req_is_wr) ? {<<{field_storage.rw_reg2_lsb0.f1.value}} : '0;
    assign readback_array[6][15:4] = '0;
    assign readback_array[7][15:0] = (decoded_reg_strb.rw_reg2_lsb0[3] && !decoded_req_is_wr) ? {<<{field_storage.rw_reg2_lsb0.f2.value}} : '0;
    assign readback_array[8][11:0] = '0;
    assign readback_array[8][15:12] = (decoded_reg_strb.r_reg[0] && !decoded_req_is_wr) ? hwif_in.r_reg.f1.next[3:0] : '0;
    assign readback_array[9][3:0] = (decoded_reg_strb.r_reg[1] && !decoded_req_is_wr) ? hwif_in.r_reg.f1.next[7:4] : '0;
    assign readback_array[9][14:4] = (decoded_reg_strb.r_reg[1] && !decoded_req_is_wr) ? hwif_in.r_reg.f2.next : '0;
    assign readback_array[9][15:15] = '0;
    assign readback_array[10][11:0] = '0;
    assign readback_array[10][15:12] = (decoded_reg_strb.r_reg_lsb0[0] && !decoded_req_is_wr) ? {<<{hwif_in.r_reg_lsb0.f1.next[7:4]}} : '0;
    assign readback_array[11][3:0] = (decoded_reg_strb.r_reg_lsb0[1] && !decoded_req_is_wr) ? {<<{hwif_in.r_reg_lsb0.f1.next[3:0]}} : '0;
    assign readback_array[11][14:4] = (decoded_reg_strb.r_reg_lsb0[1] && !decoded_req_is_wr) ? {<<{hwif_in.r_reg_lsb0.f2.next}} : '0;
    assign readback_array[11][15:15] = '0;
    assign readback_array[12][11:0] = '0;
    assign readback_array[12][15:12] = (decoded_reg_strb.r_reg2[0] && !decoded_req_is_wr) ? hwif_in.r_reg2.f1.next[3:0] : '0;
    assign readback_array[13][15:0] = (decoded_reg_strb.r_reg2[1] && !decoded_req_is_wr) ? hwif_in.r_reg2.f1.next[19:4] : '0;
    assign readback_array[14][1:0] = (decoded_reg_strb.r_reg2[3] && !decoded_req_is_wr) ? hwif_in.r_reg2.f2.next : '0;
    assign readback_array[14][15:2] = '0;
    assign readback_array[15][7:0] = (decoded_reg_strb.counter_reg && !decoded_req_is_wr) ? field_storage.counter_reg.f1_cnt.value : '0;
    assign readback_array[15][15:8] = (decoded_reg_strb.counter_reg && !decoded_req_is_wr) ? field_storage.counter_reg.f2_cnt.value : '0;
    assign readback_array[16][15:0] = (decoded_reg_strb.r_reg3[0] && !decoded_req_is_wr) ? 16'h5678 : '0;
    assign readback_array[17][15:0] = (decoded_reg_strb.r_reg3[1] && !decoded_req_is_wr) ? 16'h1234 : '0;
    assign readback_array[18][15:0] = (decoded_reg_strb.r_reg4[0] && !decoded_req_is_wr) ? 16'h2c48 : '0;
    assign readback_array[19][15:0] = (decoded_reg_strb.r_reg4[1] && !decoded_req_is_wr) ? 16'h1e6a : '0;

    // Reduce the array
    always_comb begin
        automatic logic [15:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<20; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
