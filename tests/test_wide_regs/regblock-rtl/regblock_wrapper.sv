// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock
//
// This is a wrapper module that flattens the hwif structs into individual signals

module regblock_wrapper (
        input wire clk,
        input wire rst,

        input wire s_apb_psel,
        input wire s_apb_penable,
        input wire s_apb_pwrite,
        input wire [2:0] s_apb_pprot,
        input wire [5:0] s_apb_paddr,
        input wire [15:0] s_apb_pwdata,
        input wire [1:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [15:0] s_apb_prdata,
        output logic s_apb_pslverr,

        input logic [7:0] hwif_in_r_reg_f1,
        input logic [10:0] hwif_in_r_reg_f2,
        input logic [7:0] hwif_in_r_reg_lsb0_f1,
        input logic [10:0] hwif_in_r_reg_lsb0_f2,
        input logic [19:0] hwif_in_r_reg2_f1,
        input logic [1:0] hwif_in_r_reg2_f2,
        output logic [7:0] hwif_out_rw_reg1_f1,
        output logic [2:0] hwif_out_rw_reg1_f2,
        output logic hwif_out_rw_reg1_f3,
        output logic [7:0] hwif_out_rw_reg1_f4,
        output logic [3:0] hwif_out_rw_reg2_f1,
        output logic [15:0] hwif_out_rw_reg2_f2,
        output logic [7:0] hwif_out_rw_reg1_lsb0_f1,
        output logic [2:0] hwif_out_rw_reg1_lsb0_f2,
        output logic hwif_out_rw_reg1_lsb0_f3,
        output logic [7:0] hwif_out_rw_reg1_lsb0_f4,
        output logic [3:0] hwif_out_rw_reg2_lsb0_f1,
        output logic [15:0] hwif_out_rw_reg2_lsb0_f2,
        output logic hwif_out_r_reg_f0,
        output logic [31:0] hwif_out_r_reg3_f1,
        output logic [31:0] hwif_out_r_reg4_f1
    );

    //--------------------------------------------------------------------------
    // Internal hwif struct signals
    //--------------------------------------------------------------------------
    regblock_pkg::regblock__in_t hwif_in;
    regblock_pkg::regblock__out_t hwif_out;

    //--------------------------------------------------------------------------
    // Flatten struct to individual signals
    //--------------------------------------------------------------------------
    assign hwif_in.r_reg.f1.next = hwif_in_r_reg_f1;
    assign hwif_in.r_reg.f2.next = hwif_in_r_reg_f2;
    assign hwif_in.r_reg_lsb0.f1.next = hwif_in_r_reg_lsb0_f1;
    assign hwif_in.r_reg_lsb0.f2.next = hwif_in_r_reg_lsb0_f2;
    assign hwif_in.r_reg2.f1.next = hwif_in_r_reg2_f1;
    assign hwif_in.r_reg2.f2.next = hwif_in_r_reg2_f2;
    assign hwif_out_rw_reg1_f1 = hwif_out.rw_reg1.f1.value;
    assign hwif_out_rw_reg1_f2 = hwif_out.rw_reg1.f2.value;
    assign hwif_out_rw_reg1_f3 = hwif_out.rw_reg1.f3.value;
    assign hwif_out_rw_reg1_f4 = hwif_out.rw_reg1.f4.value;
    assign hwif_out_rw_reg2_f1 = hwif_out.rw_reg2.f1.value;
    assign hwif_out_rw_reg2_f2 = hwif_out.rw_reg2.f2.value;
    assign hwif_out_rw_reg1_lsb0_f1 = hwif_out.rw_reg1_lsb0.f1.value;
    assign hwif_out_rw_reg1_lsb0_f2 = hwif_out.rw_reg1_lsb0.f2.value;
    assign hwif_out_rw_reg1_lsb0_f3 = hwif_out.rw_reg1_lsb0.f3.value;
    assign hwif_out_rw_reg1_lsb0_f4 = hwif_out.rw_reg1_lsb0.f4.value;
    assign hwif_out_rw_reg2_lsb0_f1 = hwif_out.rw_reg2_lsb0.f1.value;
    assign hwif_out_rw_reg2_lsb0_f2 = hwif_out.rw_reg2_lsb0.f2.value;
    assign hwif_out_r_reg_f0 = hwif_out.r_reg.f0.value;
    assign hwif_out_r_reg3_f1 = hwif_out.r_reg3.f1.value;
    assign hwif_out_r_reg4_f1 = hwif_out.r_reg4.f1.value;

    //--------------------------------------------------------------------------
    // Instantiate the main regblock module
    //--------------------------------------------------------------------------
    regblock i_regblock (
        .clk(clk),
        .rst(rst),

        .s_apb_psel(s_apb_psel),
        .s_apb_penable(s_apb_penable),
        .s_apb_pwrite(s_apb_pwrite),
        .s_apb_pprot(s_apb_pprot),
        .s_apb_paddr(s_apb_paddr),
        .s_apb_pwdata(s_apb_pwdata),
        .s_apb_pstrb(s_apb_pstrb),
        .s_apb_pready(s_apb_pready),
        .s_apb_prdata(s_apb_prdata),
        .s_apb_pslverr(s_apb_pslverr),
        .hwif_in(hwif_in),
        .hwif_out(hwif_out)
    );

endmodule
