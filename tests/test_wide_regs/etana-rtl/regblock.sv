// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module regblock (
        input wire clk,
        input wire rst,

        input wire s_apb_psel,
        input wire s_apb_pwrite,
        input wire s_apb_penable,
        input wire [2:0] s_apb_pprot,
        input wire [5:0] s_apb_paddr,
        input wire [15:0] s_apb_pwdata,
        input wire [1:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [15:0] s_apb_prdata,
        output logic s_apb_pslverr,

        output logic [7:0] hwif_out_rw_reg1_f1,
        output logic [2:0] hwif_out_rw_reg1_f2,
        output logic [0:0] hwif_out_rw_reg1_f3,
        output logic [7:0] hwif_out_rw_reg1_f4,
        output logic [3:0] hwif_out_rw_reg2_f1,
        output logic [15:0] hwif_out_rw_reg2_f2,
        output logic [7:0] hwif_out_rw_reg1_lsb0_f1,
        output logic [2:0] hwif_out_rw_reg1_lsb0_f2,
        output logic [0:0] hwif_out_rw_reg1_lsb0_f3,
        output logic [7:0] hwif_out_rw_reg1_lsb0_f4,
        output logic [3:0] hwif_out_rw_reg2_lsb0_f1,
        output logic [15:0] hwif_out_rw_reg2_lsb0_f2,
        output logic [0:0] hwif_out_r_reg_f0,
        input wire [7:0] hwif_in_r_reg_f1,
        input wire [10:0] hwif_in_r_reg_f2,
        input wire [7:0] hwif_in_r_reg_lsb0_f1,
        input wire [10:0] hwif_in_r_reg_lsb0_f2,
        input wire [19:0] hwif_in_r_reg2_f1,
        input wire [1:0] hwif_in_r_reg2_f2,
        output logic [31:0] hwif_out_r_reg3_f1,
        output logic [31:0] hwif_out_r_reg4_f1
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [5:0] cpuif_addr;
    logic [15:0] cpuif_wr_data;
    logic [15:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [15:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;


    // Request
    logic is_active;
    always_ff @(posedge clk) begin
        if(rst) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= {s_apb_paddr[5:1], 1'b0};
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<2; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    logic [3:0] decoded_reg_strb_rw_reg1;
    logic [3:0] decoded_reg_strb_rw_reg2;
    logic [3:0] decoded_reg_strb_rw_reg1_lsb0;
    logic [3:0] decoded_reg_strb_rw_reg2_lsb0;
    logic [1:0] decoded_reg_strb_r_reg;
    logic [1:0] decoded_reg_strb_r_reg_lsb0;
    logic [3:0] decoded_reg_strb_r_reg2;
    logic [0:0] decoded_reg_strb_counter_reg;
    logic [1:0] decoded_reg_strb_r_reg3;
    logic [1:0] decoded_reg_strb_r_reg4;
    logic decoded_req;
    logic decoded_req_is_wr;
    /* verilator lint_off UNUSEDSIGNAL */
    logic [15:0] decoded_wr_data;
    logic [15:0] decoded_wr_biten;
    /* verilator lint_on UNUSEDSIGNAL */

    always @(*) begin
        /* verilator lint_off UNUSEDSIGNAL */
        integer next_cpuif_addr;
        /* verilator lint_on UNUSEDSIGNAL */
        decoded_reg_strb_rw_reg1[0] = cpuif_req_masked & (cpuif_addr == 6'h0);
        decoded_reg_strb_rw_reg1[1] = cpuif_req_masked & (cpuif_addr == 6'h2);
        decoded_reg_strb_rw_reg1[2] = cpuif_req_masked & (cpuif_addr == 6'h4);
        decoded_reg_strb_rw_reg1[3] = cpuif_req_masked & (cpuif_addr == 6'h6);
        decoded_reg_strb_rw_reg2[0] = cpuif_req_masked & (cpuif_addr == 6'h8);
        decoded_reg_strb_rw_reg2[1] = cpuif_req_masked & (cpuif_addr == 6'ha);
        decoded_reg_strb_rw_reg2[2] = cpuif_req_masked & (cpuif_addr == 6'hc);
        decoded_reg_strb_rw_reg2[3] = cpuif_req_masked & (cpuif_addr == 6'he);
        decoded_reg_strb_rw_reg1_lsb0[0] = cpuif_req_masked & (cpuif_addr == 6'h10);
        decoded_reg_strb_rw_reg1_lsb0[1] = cpuif_req_masked & (cpuif_addr == 6'h12);
        decoded_reg_strb_rw_reg1_lsb0[2] = cpuif_req_masked & (cpuif_addr == 6'h14);
        decoded_reg_strb_rw_reg1_lsb0[3] = cpuif_req_masked & (cpuif_addr == 6'h16);
        decoded_reg_strb_rw_reg2_lsb0[0] = cpuif_req_masked & (cpuif_addr == 6'h18);
        decoded_reg_strb_rw_reg2_lsb0[1] = cpuif_req_masked & (cpuif_addr == 6'h1a);
        decoded_reg_strb_rw_reg2_lsb0[2] = cpuif_req_masked & (cpuif_addr == 6'h1c);
        decoded_reg_strb_rw_reg2_lsb0[3] = cpuif_req_masked & (cpuif_addr == 6'h1e);
        decoded_reg_strb_r_reg[0] = cpuif_req_masked & (cpuif_addr == 6'h20);
        decoded_reg_strb_r_reg[1] = cpuif_req_masked & (cpuif_addr == 6'h22);
        decoded_reg_strb_r_reg_lsb0[0] = cpuif_req_masked & (cpuif_addr == 6'h24);
        decoded_reg_strb_r_reg_lsb0[1] = cpuif_req_masked & (cpuif_addr == 6'h26);
        decoded_reg_strb_r_reg2[0] = cpuif_req_masked & (cpuif_addr == 6'h28);
        decoded_reg_strb_r_reg2[1] = cpuif_req_masked & (cpuif_addr == 6'h2a);
        decoded_reg_strb_r_reg2[2] = cpuif_req_masked & (cpuif_addr == 6'h2c);
        decoded_reg_strb_r_reg2[3] = cpuif_req_masked & (cpuif_addr == 6'h2e);
        decoded_reg_strb_counter_reg = cpuif_req_masked & (cpuif_addr == 6'h30) & !cpuif_req_is_wr;
        decoded_reg_strb_r_reg3[0] = cpuif_req_masked & (cpuif_addr == 6'h34);
        decoded_reg_strb_r_reg3[1] = cpuif_req_masked & (cpuif_addr == 6'h36);
        decoded_reg_strb_r_reg4[0] = cpuif_req_masked & (cpuif_addr == 6'h38);
        decoded_reg_strb_r_reg4[1] = cpuif_req_masked & (cpuif_addr == 6'h3a);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    // bitswap for use by fields with msb0 ordering
    logic [15:0] decoded_wr_data_bswap;
    logic [15:0] decoded_wr_biten_bswap;
    // Explicit bit reversal for Icarus Verilog compatibility
    genvar bitswap_i;
    generate
        for(bitswap_i = 0; bitswap_i < 16; bitswap_i = bitswap_i + 1) begin : gen_bitswap
            assign decoded_wr_data_bswap[bitswap_i] = decoded_wr_data[15 - bitswap_i];
            assign decoded_wr_biten_bswap[bitswap_i] = decoded_wr_biten[15 - bitswap_i];
        end
    endgenerate

    //--------------------------------------------------------------------------
    // Field storage declarations
    //--------------------------------------------------------------------------

    // Field: regblock.rw_reg1.f1
    logic [7:0] field_storage_rw_reg1_f1_value;
    logic [7:0] field_combo_rw_reg1_f1_next;
    logic field_combo_rw_reg1_f1_load_next;
    // Field: regblock.rw_reg1.f2
    logic [2:0] field_storage_rw_reg1_f2_value;
    logic [2:0] field_combo_rw_reg1_f2_next;
    logic field_combo_rw_reg1_f2_load_next;
    // Field: regblock.rw_reg1.f3
    logic [0:0] field_storage_rw_reg1_f3_value;
    logic [0:0] field_combo_rw_reg1_f3_next;
    logic field_combo_rw_reg1_f3_load_next;
    // Field: regblock.rw_reg1.f4
    logic [7:0] field_storage_rw_reg1_f4_value;
    logic [7:0] field_combo_rw_reg1_f4_next;
    logic field_combo_rw_reg1_f4_load_next;
    // Field: regblock.rw_reg2.f1
    logic [3:0] field_storage_rw_reg2_f1_value;
    logic [3:0] field_combo_rw_reg2_f1_next;
    logic field_combo_rw_reg2_f1_load_next;
    // Field: regblock.rw_reg2.f2
    logic [15:0] field_storage_rw_reg2_f2_value;
    logic [15:0] field_combo_rw_reg2_f2_next;
    logic field_combo_rw_reg2_f2_load_next;
    // Field: regblock.rw_reg1_lsb0.f1
    logic [7:0] field_storage_rw_reg1_lsb0_f1_value;
    logic [7:0] field_combo_rw_reg1_lsb0_f1_next;
    logic field_combo_rw_reg1_lsb0_f1_load_next;
    // Field: regblock.rw_reg1_lsb0.f2
    logic [2:0] field_storage_rw_reg1_lsb0_f2_value;
    logic [2:0] field_combo_rw_reg1_lsb0_f2_next;
    logic field_combo_rw_reg1_lsb0_f2_load_next;
    // Field: regblock.rw_reg1_lsb0.f3
    logic [0:0] field_storage_rw_reg1_lsb0_f3_value;
    logic [0:0] field_combo_rw_reg1_lsb0_f3_next;
    logic field_combo_rw_reg1_lsb0_f3_load_next;
    // Field: regblock.rw_reg1_lsb0.f4
    logic [7:0] field_storage_rw_reg1_lsb0_f4_value;
    logic [7:0] field_combo_rw_reg1_lsb0_f4_next;
    logic field_combo_rw_reg1_lsb0_f4_load_next;
    // Field: regblock.rw_reg2_lsb0.f1
    logic [3:0] field_storage_rw_reg2_lsb0_f1_value;
    logic [3:0] field_combo_rw_reg2_lsb0_f1_next;
    logic field_combo_rw_reg2_lsb0_f1_load_next;
    // Field: regblock.rw_reg2_lsb0.f2
    logic [15:0] field_storage_rw_reg2_lsb0_f2_value;
    logic [15:0] field_combo_rw_reg2_lsb0_f2_next;
    logic field_combo_rw_reg2_lsb0_f2_load_next;
    // Field: regblock.r_reg.f0
    logic [0:0] field_storage_r_reg_f0_value;
    logic [0:0] field_combo_r_reg_f0_next;
    logic field_combo_r_reg_f0_load_next;
    // Field: regblock.counter_reg.f1_cnt
    logic [7:0] field_storage_counter_reg_f1_cnt_value;
    logic [7:0] field_combo_counter_reg_f1_cnt_next;
    logic field_combo_counter_reg_f1_cnt_load_next;
    logic field_combo_counter_reg_f1_cnt_overflow;
    logic field_combo_counter_reg_f1_cnt_incrthreshold;
    // Field: regblock.counter_reg.f2_cnt
    logic [7:0] field_storage_counter_reg_f2_cnt_value;
    logic [7:0] field_combo_counter_reg_f2_cnt_next;
    logic field_combo_counter_reg_f2_cnt_load_next;
    logic field_combo_counter_reg_f2_cnt_overflow;
    logic field_combo_counter_reg_f2_cnt_incrthreshold;
    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_rw_reg1_f1_value;
        load_next_c = '0;
        if(decoded_reg_strb_rw_reg1[0] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_rw_reg1_f1_value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo_rw_reg1_f1_next = next_c;
        field_combo_rw_reg1_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_rw_reg1_f1_value <= 8'h0;
        end else if(field_combo_rw_reg1_f1_load_next) begin
            field_storage_rw_reg1_f1_value <= field_combo_rw_reg1_f1_next;
        end
    end
    assign hwif_out_rw_reg1_f1 = field_storage_rw_reg1_f1_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_rw_reg1_f2_value;
        load_next_c = '0;
        if(decoded_reg_strb_rw_reg1[0] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_rw_reg1_f2_value & ~decoded_wr_biten[14:12]) | (decoded_wr_data[14:12] & decoded_wr_biten[14:12]);
            load_next_c = '1;
        end
        field_combo_rw_reg1_f2_next = next_c;
        field_combo_rw_reg1_f2_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_rw_reg1_f2_value <= 3'h0;
        end else if(field_combo_rw_reg1_f2_load_next) begin
            field_storage_rw_reg1_f2_value <= field_combo_rw_reg1_f2_next;
        end
    end
    assign hwif_out_rw_reg1_f2 = field_storage_rw_reg1_f2_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_rw_reg1_f3_value;
        load_next_c = '0;
        if(decoded_reg_strb_rw_reg1[2] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_rw_reg1_f3_value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo_rw_reg1_f3_next = next_c;
        field_combo_rw_reg1_f3_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_rw_reg1_f3_value <= 1'h0;
        end else if(field_combo_rw_reg1_f3_load_next) begin
            field_storage_rw_reg1_f3_value <= field_combo_rw_reg1_f3_next;
        end
    end
    assign hwif_out_rw_reg1_f3 = field_storage_rw_reg1_f3_value;
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_rw_reg1_f4_value;
        load_next_c = '0;
        if(decoded_reg_strb_rw_reg1[2] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_rw_reg1_f4_value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end
        field_combo_rw_reg1_f4_next = next_c;
        field_combo_rw_reg1_f4_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_rw_reg1_f4_value <= 8'h0;
        end else if(field_combo_rw_reg1_f4_load_next) begin
            field_storage_rw_reg1_f4_value <= field_combo_rw_reg1_f4_next;
        end
    end
    assign hwif_out_rw_reg1_f4 = field_storage_rw_reg1_f4_value;
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_rw_reg2_f1_value;
        load_next_c = '0;
        if(decoded_reg_strb_rw_reg2[1] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_rw_reg2_f1_value & ~decoded_wr_biten[3:0]) | (decoded_wr_data[3:0] & decoded_wr_biten[3:0]);
            load_next_c = '1;
        end
        field_combo_rw_reg2_f1_next = next_c;
        field_combo_rw_reg2_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_rw_reg2_f1_value <= 4'h0;
        end else if(field_combo_rw_reg2_f1_load_next) begin
            field_storage_rw_reg2_f1_value <= field_combo_rw_reg2_f1_next;
        end
    end
    assign hwif_out_rw_reg2_f1 = field_storage_rw_reg2_f1_value;
    // always_comb begin
    always @(*) begin
        logic [15:0] next_c;
        logic load_next_c;
        next_c = field_storage_rw_reg2_f2_value;
        load_next_c = '0;
        if(decoded_reg_strb_rw_reg2[3] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_rw_reg2_f2_value & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
            load_next_c = '1;
        end
        field_combo_rw_reg2_f2_next = next_c;
        field_combo_rw_reg2_f2_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_rw_reg2_f2_value <= 16'h0;
        end else if(field_combo_rw_reg2_f2_load_next) begin
            field_storage_rw_reg2_f2_value <= field_combo_rw_reg2_f2_next;
        end
    end
    assign hwif_out_rw_reg2_f2 = field_storage_rw_reg2_f2_value;
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_rw_reg1_lsb0_f1_value;
        load_next_c = '0;
        if(decoded_reg_strb_rw_reg1_lsb0[0] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_rw_reg1_lsb0_f1_value & ~decoded_wr_biten_bswap[15:8]) | (decoded_wr_data_bswap[15:8] & decoded_wr_biten_bswap[15:8]);
            load_next_c = '1;
        end
        field_combo_rw_reg1_lsb0_f1_next = next_c;
        field_combo_rw_reg1_lsb0_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_rw_reg1_lsb0_f1_value <= 8'h0;
        end else if(field_combo_rw_reg1_lsb0_f1_load_next) begin
            field_storage_rw_reg1_lsb0_f1_value <= field_combo_rw_reg1_lsb0_f1_next;
        end
    end
    assign hwif_out_rw_reg1_lsb0_f1 = field_storage_rw_reg1_lsb0_f1_value;
    // always_comb begin
    always @(*) begin
        logic [2:0] next_c;
        logic load_next_c;
        next_c = field_storage_rw_reg1_lsb0_f2_value;
        load_next_c = '0;
        if(decoded_reg_strb_rw_reg1_lsb0[0] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_rw_reg1_lsb0_f2_value & ~decoded_wr_biten_bswap[3:1]) | (decoded_wr_data_bswap[3:1] & decoded_wr_biten_bswap[3:1]);
            load_next_c = '1;
        end
        field_combo_rw_reg1_lsb0_f2_next = next_c;
        field_combo_rw_reg1_lsb0_f2_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_rw_reg1_lsb0_f2_value <= 3'h0;
        end else if(field_combo_rw_reg1_lsb0_f2_load_next) begin
            field_storage_rw_reg1_lsb0_f2_value <= field_combo_rw_reg1_lsb0_f2_next;
        end
    end
    assign hwif_out_rw_reg1_lsb0_f2 = field_storage_rw_reg1_lsb0_f2_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_rw_reg1_lsb0_f3_value;
        load_next_c = '0;
        if(decoded_reg_strb_rw_reg1_lsb0[2] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_rw_reg1_lsb0_f3_value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo_rw_reg1_lsb0_f3_next = next_c;
        field_combo_rw_reg1_lsb0_f3_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_rw_reg1_lsb0_f3_value <= 1'h0;
        end else if(field_combo_rw_reg1_lsb0_f3_load_next) begin
            field_storage_rw_reg1_lsb0_f3_value <= field_combo_rw_reg1_lsb0_f3_next;
        end
    end
    assign hwif_out_rw_reg1_lsb0_f3 = field_storage_rw_reg1_lsb0_f3_value;
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_rw_reg1_lsb0_f4_value;
        load_next_c = '0;
        if(decoded_reg_strb_rw_reg1_lsb0[2] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_rw_reg1_lsb0_f4_value & ~decoded_wr_biten_bswap[7:0]) | (decoded_wr_data_bswap[7:0] & decoded_wr_biten_bswap[7:0]);
            load_next_c = '1;
        end
        field_combo_rw_reg1_lsb0_f4_next = next_c;
        field_combo_rw_reg1_lsb0_f4_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_rw_reg1_lsb0_f4_value <= 8'h0;
        end else if(field_combo_rw_reg1_lsb0_f4_load_next) begin
            field_storage_rw_reg1_lsb0_f4_value <= field_combo_rw_reg1_lsb0_f4_next;
        end
    end
    assign hwif_out_rw_reg1_lsb0_f4 = field_storage_rw_reg1_lsb0_f4_value;
    // always_comb begin
    always @(*) begin
        logic [3:0] next_c;
        logic load_next_c;
        next_c = field_storage_rw_reg2_lsb0_f1_value;
        load_next_c = '0;
        if(decoded_reg_strb_rw_reg2_lsb0[1] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_rw_reg2_lsb0_f1_value & ~decoded_wr_biten_bswap[15:12]) | (decoded_wr_data_bswap[15:12] & decoded_wr_biten_bswap[15:12]);
            load_next_c = '1;
        end
        field_combo_rw_reg2_lsb0_f1_next = next_c;
        field_combo_rw_reg2_lsb0_f1_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_rw_reg2_lsb0_f1_value <= 4'h0;
        end else if(field_combo_rw_reg2_lsb0_f1_load_next) begin
            field_storage_rw_reg2_lsb0_f1_value <= field_combo_rw_reg2_lsb0_f1_next;
        end
    end
    assign hwif_out_rw_reg2_lsb0_f1 = field_storage_rw_reg2_lsb0_f1_value;
    // always_comb begin
    always @(*) begin
        logic [15:0] next_c;
        logic load_next_c;
        next_c = field_storage_rw_reg2_lsb0_f2_value;
        load_next_c = '0;
        if(decoded_reg_strb_rw_reg2_lsb0[3] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_rw_reg2_lsb0_f2_value & ~decoded_wr_biten_bswap[15:0]) | (decoded_wr_data_bswap[15:0] & decoded_wr_biten_bswap[15:0]);
            load_next_c = '1;
        end
        field_combo_rw_reg2_lsb0_f2_next = next_c;
        field_combo_rw_reg2_lsb0_f2_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_rw_reg2_lsb0_f2_value <= 16'h0;
        end else if(field_combo_rw_reg2_lsb0_f2_load_next) begin
            field_storage_rw_reg2_lsb0_f2_value <= field_combo_rw_reg2_lsb0_f2_next;
        end
    end
    assign hwif_out_rw_reg2_lsb0_f2 = field_storage_rw_reg2_lsb0_f2_value;
    // always_comb begin
    always @(*) begin
        logic [0:0] next_c;
        logic load_next_c;
        next_c = field_storage_r_reg_f0_value;
        load_next_c = '0;
        if(decoded_reg_strb_r_reg[0] && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_r_reg_f0_value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo_r_reg_f0_next = next_c;
        field_combo_r_reg_f0_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_r_reg_f0_value <= 1'h0;
        end else if(field_combo_r_reg_f0_load_next) begin
            field_storage_r_reg_f0_value <= field_combo_r_reg_f0_next;
        end
    end
    assign hwif_out_r_reg_f0 = field_storage_r_reg_f0_value;
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_counter_reg_f1_cnt_value;
        load_next_c = '0;

        if(|decoded_reg_strb_r_reg2[1:0]) begin // increment
            field_combo_counter_reg_f1_cnt_overflow = (((9)'(next_c) + (9)'(8'h1)) > 9'hff);
            next_c = next_c + (8)'(8'h1);
            load_next_c = '1;
        end else begin
            field_combo_counter_reg_f1_cnt_overflow = '0;
        end
        field_combo_counter_reg_f1_cnt_incrthreshold = (field_storage_counter_reg_f1_cnt_value >= 8'hff);
        field_combo_counter_reg_f1_cnt_next = next_c;
        field_combo_counter_reg_f1_cnt_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_counter_reg_f1_cnt_value <= 8'h0;
        end else if(field_combo_counter_reg_f1_cnt_load_next) begin
            field_storage_counter_reg_f1_cnt_value <= field_combo_counter_reg_f1_cnt_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_counter_reg_f2_cnt_value;
        load_next_c = '0;

        if(decoded_reg_strb_r_reg2[3]) begin // increment
            field_combo_counter_reg_f2_cnt_overflow = (((9)'(next_c) + (9)'(8'h1)) > 9'hff);
            next_c = next_c + (8)'(8'h1);
            load_next_c = '1;
        end else begin
            field_combo_counter_reg_f2_cnt_overflow = '0;
        end
        field_combo_counter_reg_f2_cnt_incrthreshold = (field_storage_counter_reg_f2_cnt_value >= 8'hff);
        field_combo_counter_reg_f2_cnt_next = next_c;
        field_combo_counter_reg_f2_cnt_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_counter_reg_f2_cnt_value <= 8'h0;
        end else if(field_combo_counter_reg_f2_cnt_load_next) begin
            field_storage_counter_reg_f2_cnt_value <= field_combo_counter_reg_f2_cnt_next;
        end
    end
    assign hwif_out_r_reg3_f1 = 32'h12345678;
    assign hwif_out_r_reg4_f1 = 32'h12345678;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

//--------------------------------------------------------------------------
// Readback
//--------------------------------------------------------------------------
    logic readback_external_rd_ack;
    assign readback_external_rd_ack = 0;

    logic readback_err;
    logic readback_done;
    logic [15:0] readback_data;

    // Assign readback values to a flattened array
    logic [15:0] readback_array[25];
    assign readback_array[0][7:0] = (decoded_reg_strb_rw_reg1[0] && !decoded_req_is_wr) ? field_storage_rw_reg1_f1_value : '0;
    assign readback_array[0][11:8] = '0;
    assign readback_array[0][14:12] = (decoded_reg_strb_rw_reg1[0] && !decoded_req_is_wr) ? field_storage_rw_reg1_f2_value : '0;
    assign readback_array[0][15:15] = '0;
    assign readback_array[1][3:0] = '0;
    assign readback_array[1][4:4] = (decoded_reg_strb_rw_reg1[2] && !decoded_req_is_wr) ? field_storage_rw_reg1_f3_value : '0;
    assign readback_array[1][7:5] = '0;
    assign readback_array[1][15:8] = (decoded_reg_strb_rw_reg1[2] && !decoded_req_is_wr) ? field_storage_rw_reg1_f4_value : '0;
    assign readback_array[2] = (decoded_reg_strb_rw_reg1[3] && !decoded_req_is_wr) ? 16'h0 : '0;
    assign readback_array[3][3:0] = (decoded_reg_strb_rw_reg2[1] && !decoded_req_is_wr) ? field_storage_rw_reg2_f1_value : '0;
    assign readback_array[3][15:4] = '0;
    assign readback_array[4][15:0] = (decoded_reg_strb_rw_reg2[3] && !decoded_req_is_wr) ? field_storage_rw_reg2_f2_value : '0;
    assign readback_array[5][7:0] = (decoded_reg_strb_rw_reg1_lsb0[0] && !decoded_req_is_wr) ? {field_storage_rw_reg1_lsb0_f1_value[0], field_storage_rw_reg1_lsb0_f1_value[1], field_storage_rw_reg1_lsb0_f1_value[2], field_storage_rw_reg1_lsb0_f1_value[3], field_storage_rw_reg1_lsb0_f1_value[4], field_storage_rw_reg1_lsb0_f1_value[5], field_storage_rw_reg1_lsb0_f1_value[6], field_storage_rw_reg1_lsb0_f1_value[7]} : '0;
    assign readback_array[5][11:8] = '0;
    assign readback_array[5][14:12] = (decoded_reg_strb_rw_reg1_lsb0[0] && !decoded_req_is_wr) ? {field_storage_rw_reg1_lsb0_f2_value[0], field_storage_rw_reg1_lsb0_f2_value[1], field_storage_rw_reg1_lsb0_f2_value[2]} : '0;
    assign readback_array[5][15:15] = '0;
    assign readback_array[6][3:0] = '0;
    assign readback_array[6][4:4] = (decoded_reg_strb_rw_reg1_lsb0[2] && !decoded_req_is_wr) ? field_storage_rw_reg1_lsb0_f3_value : '0;
    assign readback_array[6][7:5] = '0;
    assign readback_array[6][15:8] = (decoded_reg_strb_rw_reg1_lsb0[2] && !decoded_req_is_wr) ? {field_storage_rw_reg1_lsb0_f4_value[0], field_storage_rw_reg1_lsb0_f4_value[1], field_storage_rw_reg1_lsb0_f4_value[2], field_storage_rw_reg1_lsb0_f4_value[3], field_storage_rw_reg1_lsb0_f4_value[4], field_storage_rw_reg1_lsb0_f4_value[5], field_storage_rw_reg1_lsb0_f4_value[6], field_storage_rw_reg1_lsb0_f4_value[7]} : '0;
    assign readback_array[7] = (decoded_reg_strb_rw_reg1_lsb0[3] && !decoded_req_is_wr) ? 16'h0 : '0;
    assign readback_array[8][3:0] = (decoded_reg_strb_rw_reg2_lsb0[1] && !decoded_req_is_wr) ? {field_storage_rw_reg2_lsb0_f1_value[0], field_storage_rw_reg2_lsb0_f1_value[1], field_storage_rw_reg2_lsb0_f1_value[2], field_storage_rw_reg2_lsb0_f1_value[3]} : '0;
    assign readback_array[8][15:4] = '0;
    assign readback_array[9][15:0] = (decoded_reg_strb_rw_reg2_lsb0[3] && !decoded_req_is_wr) ? {field_storage_rw_reg2_lsb0_f2_value[0], field_storage_rw_reg2_lsb0_f2_value[1], field_storage_rw_reg2_lsb0_f2_value[2], field_storage_rw_reg2_lsb0_f2_value[3], field_storage_rw_reg2_lsb0_f2_value[4], field_storage_rw_reg2_lsb0_f2_value[5], field_storage_rw_reg2_lsb0_f2_value[6], field_storage_rw_reg2_lsb0_f2_value[7], field_storage_rw_reg2_lsb0_f2_value[8], field_storage_rw_reg2_lsb0_f2_value[9], field_storage_rw_reg2_lsb0_f2_value[10], field_storage_rw_reg2_lsb0_f2_value[11], field_storage_rw_reg2_lsb0_f2_value[12], field_storage_rw_reg2_lsb0_f2_value[13], field_storage_rw_reg2_lsb0_f2_value[14], field_storage_rw_reg2_lsb0_f2_value[15]} : '0;
    assign readback_array[10][11:0] = '0;
    assign readback_array[10][15:12] = (decoded_reg_strb_r_reg[0] && !decoded_req_is_wr) ? hwif_in_r_reg_f1[3:0] : '0;
    assign readback_array[11][3:0] = (decoded_reg_strb_r_reg[1] && !decoded_req_is_wr) ? hwif_in_r_reg_f1[7:4] : '0;
    assign readback_array[11][14:4] = (decoded_reg_strb_r_reg[1] && !decoded_req_is_wr) ? hwif_in_r_reg_f2 : '0;
    assign readback_array[11][15:15] = '0;
    assign readback_array[12] = (decoded_reg_strb_r_reg[1] && !decoded_req_is_wr) ? 16'h0 : '0;
    assign readback_array[13][11:0] = '0;
    assign readback_array[13][15:12] = (decoded_reg_strb_r_reg_lsb0[0] && !decoded_req_is_wr) ? {hwif_in_r_reg_lsb0_f1[4], hwif_in_r_reg_lsb0_f1[5], hwif_in_r_reg_lsb0_f1[6], hwif_in_r_reg_lsb0_f1[7]} : '0;
    assign readback_array[14][3:0] = (decoded_reg_strb_r_reg_lsb0[1] && !decoded_req_is_wr) ? {hwif_in_r_reg_lsb0_f1[0], hwif_in_r_reg_lsb0_f1[1], hwif_in_r_reg_lsb0_f1[2], hwif_in_r_reg_lsb0_f1[3]} : '0;
    assign readback_array[14][14:4] = (decoded_reg_strb_r_reg_lsb0[1] && !decoded_req_is_wr) ? {hwif_in_r_reg_lsb0_f2[0], hwif_in_r_reg_lsb0_f2[1], hwif_in_r_reg_lsb0_f2[2], hwif_in_r_reg_lsb0_f2[3], hwif_in_r_reg_lsb0_f2[4], hwif_in_r_reg_lsb0_f2[5], hwif_in_r_reg_lsb0_f2[6], hwif_in_r_reg_lsb0_f2[7], hwif_in_r_reg_lsb0_f2[8], hwif_in_r_reg_lsb0_f2[9], hwif_in_r_reg_lsb0_f2[10]} : '0;
    assign readback_array[14][15:15] = '0;
    assign readback_array[15] = (decoded_reg_strb_r_reg_lsb0[1] && !decoded_req_is_wr) ? 16'h0 : '0;
    assign readback_array[16][11:0] = '0;
    assign readback_array[16][15:12] = (decoded_reg_strb_r_reg2[0] && !decoded_req_is_wr) ? hwif_in_r_reg2_f1[3:0] : '0;
    assign readback_array[17][15:0] = (decoded_reg_strb_r_reg2[1] && !decoded_req_is_wr) ? hwif_in_r_reg2_f1[19:4] : '0;
    assign readback_array[18][1:0] = (decoded_reg_strb_r_reg2[3] && !decoded_req_is_wr) ? hwif_in_r_reg2_f2 : '0;
    assign readback_array[18][15:2] = '0;
    assign readback_array[19] = (decoded_reg_strb_r_reg2[3] && !decoded_req_is_wr) ? 16'h0 : '0;
    assign readback_array[20][7:0] = (decoded_reg_strb_counter_reg && !decoded_req_is_wr) ? field_storage_counter_reg_f1_cnt_value : '0;
    assign readback_array[20][15:8] = (decoded_reg_strb_counter_reg && !decoded_req_is_wr) ? field_storage_counter_reg_f2_cnt_value : '0;
    assign readback_array[21][15:0] = (decoded_reg_strb_r_reg3[0] && !decoded_req_is_wr) ? 16'h5678 : '0;
    assign readback_array[22][15:0] = (decoded_reg_strb_r_reg3[1] && !decoded_req_is_wr) ? 16'h1234 : '0;
    assign readback_array[23][15:0] = (decoded_reg_strb_r_reg4[0] && !decoded_req_is_wr) ? 16'h2c48 : '0;
    assign readback_array[24][15:0] = (decoded_reg_strb_r_reg4[1] && !decoded_req_is_wr) ? 16'h1e6a : '0;

    // Reduce the array
    // always_comb begin
    always @(*) begin
        logic [15:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<25; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
