/* Generated by Yosys 0.57 (git sha1 3aca86049, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3) */

module regblock(clk, rst, s_apb_psel, s_apb_pwrite, s_apb_penable, s_apb_pprot, s_apb_paddr, s_apb_pwdata, s_apb_pstrb, s_apb_pready, s_apb_prdata, s_apb_pslverr, hwif_out_regs_intr);
  input clk;
  wire clk;
  input rst;
  wire rst;
  input s_apb_psel;
  wire s_apb_psel;
  input s_apb_pwrite;
  wire s_apb_pwrite;
  input s_apb_penable;
  wire s_apb_penable;
  input [2:0] s_apb_pprot;
  wire [2:0] s_apb_pprot;
  input [2:0] s_apb_paddr;
  wire [2:0] s_apb_paddr;
  input [31:0] s_apb_pwdata;
  wire [31:0] s_apb_pwdata;
  input [3:0] s_apb_pstrb;
  wire [3:0] s_apb_pstrb;
  output s_apb_pready;
  wire s_apb_pready;
  output [31:0] s_apb_prdata;
  wire [31:0] s_apb_prdata;
  output s_apb_pslverr;
  wire s_apb_pslverr;
  output [0:0] hwif_out_regs_intr;
  wire [0:0] hwif_out_regs_intr;
  wire [31:0] _000_;
  wire [31:0] _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire [31:0] _008_;
  wire [31:0] _009_;
  wire _010_;
  wire _011_;
  wire [2:0] cpuif_addr;
  wire cpuif_rd_ack;
  wire [31:0] cpuif_rd_data;
  wire cpuif_rd_err;
  reg cpuif_req;
  reg cpuif_req_is_wr;
  wire cpuif_req_masked;
  wire cpuif_req_stall_rd;
  wire cpuif_req_stall_wr;
  wire cpuif_wr_ack;
  wire [31:0] cpuif_wr_biten;
  reg [31:0] cpuif_wr_data;
  wire cpuif_wr_err;
  wire [0:0] \decoded_reg_strb_regs[0] ;
  wire decoded_req;
  wire decoded_req_is_wr;
  wire [31:0] decoded_wr_biten;
  wire [31:0] decoded_wr_data;
  wire [0:0] \field_combo_regs_f_load_next[0] ;
  reg [31:0] \field_storage_regs_f_value[0] ;
  reg is_active;
  wire [31:0] \readback_array[0] ;
  wire [31:0] readback_data;
  wire readback_done;
  wire readback_err;
  wire readback_external_rd_ack;
  reg \cpuif_wr_biten_reg[14] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_biten_reg[14]  <= 1'h0;
    else if (_002_) \cpuif_wr_biten_reg[14]  <= s_apb_pstrb[1];
  assign cpuif_wr_biten[14] = \cpuif_wr_biten_reg[14] ;
  reg \cpuif_wr_biten_reg[30] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_biten_reg[30]  <= 1'h0;
    else if (_002_) \cpuif_wr_biten_reg[30]  <= s_apb_pstrb[3];
  assign cpuif_wr_biten[30] = \cpuif_wr_biten_reg[30] ;
  reg \cpuif_wr_biten_reg[22] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_biten_reg[22]  <= 1'h0;
    else if (_002_) \cpuif_wr_biten_reg[22]  <= s_apb_pstrb[2];
  assign cpuif_wr_biten[22] = \cpuif_wr_biten_reg[22] ;
  always @(posedge clk)
    if (_003_) cpuif_req <= 1'h0;
    else if (s_apb_psel) cpuif_req <= 1'h1;
  always @(posedge clk)
    if (rst) cpuif_req_is_wr <= 1'h0;
    else if (_002_) cpuif_req_is_wr <= s_apb_pwrite;
  always @(posedge clk)
    if (rst) cpuif_wr_data[0] <= 1'h0;
    else if (_002_) cpuif_wr_data[0] <= s_apb_pwdata[0];
  always @(posedge clk)
    if (rst) cpuif_wr_data[1] <= 1'h0;
    else if (_002_) cpuif_wr_data[1] <= s_apb_pwdata[1];
  always @(posedge clk)
    if (rst) cpuif_wr_data[2] <= 1'h0;
    else if (_002_) cpuif_wr_data[2] <= s_apb_pwdata[2];
  always @(posedge clk)
    if (rst) cpuif_wr_data[3] <= 1'h0;
    else if (_002_) cpuif_wr_data[3] <= s_apb_pwdata[3];
  always @(posedge clk)
    if (rst) cpuif_wr_data[4] <= 1'h0;
    else if (_002_) cpuif_wr_data[4] <= s_apb_pwdata[4];
  always @(posedge clk)
    if (rst) cpuif_wr_data[5] <= 1'h0;
    else if (_002_) cpuif_wr_data[5] <= s_apb_pwdata[5];
  always @(posedge clk)
    if (rst) cpuif_wr_data[6] <= 1'h0;
    else if (_002_) cpuif_wr_data[6] <= s_apb_pwdata[6];
  always @(posedge clk)
    if (rst) cpuif_wr_data[7] <= 1'h0;
    else if (_002_) cpuif_wr_data[7] <= s_apb_pwdata[7];
  always @(posedge clk)
    if (rst) cpuif_wr_data[8] <= 1'h0;
    else if (_002_) cpuif_wr_data[8] <= s_apb_pwdata[8];
  always @(posedge clk)
    if (rst) cpuif_wr_data[9] <= 1'h0;
    else if (_002_) cpuif_wr_data[9] <= s_apb_pwdata[9];
  always @(posedge clk)
    if (rst) cpuif_wr_data[10] <= 1'h0;
    else if (_002_) cpuif_wr_data[10] <= s_apb_pwdata[10];
  always @(posedge clk)
    if (rst) cpuif_wr_data[11] <= 1'h0;
    else if (_002_) cpuif_wr_data[11] <= s_apb_pwdata[11];
  always @(posedge clk)
    if (rst) cpuif_wr_data[12] <= 1'h0;
    else if (_002_) cpuif_wr_data[12] <= s_apb_pwdata[12];
  always @(posedge clk)
    if (rst) cpuif_wr_data[13] <= 1'h0;
    else if (_002_) cpuif_wr_data[13] <= s_apb_pwdata[13];
  always @(posedge clk)
    if (rst) cpuif_wr_data[14] <= 1'h0;
    else if (_002_) cpuif_wr_data[14] <= s_apb_pwdata[14];
  always @(posedge clk)
    if (rst) cpuif_wr_data[15] <= 1'h0;
    else if (_002_) cpuif_wr_data[15] <= s_apb_pwdata[15];
  always @(posedge clk)
    if (rst) cpuif_wr_data[16] <= 1'h0;
    else if (_002_) cpuif_wr_data[16] <= s_apb_pwdata[16];
  always @(posedge clk)
    if (rst) cpuif_wr_data[17] <= 1'h0;
    else if (_002_) cpuif_wr_data[17] <= s_apb_pwdata[17];
  always @(posedge clk)
    if (rst) cpuif_wr_data[18] <= 1'h0;
    else if (_002_) cpuif_wr_data[18] <= s_apb_pwdata[18];
  always @(posedge clk)
    if (rst) cpuif_wr_data[19] <= 1'h0;
    else if (_002_) cpuif_wr_data[19] <= s_apb_pwdata[19];
  always @(posedge clk)
    if (rst) cpuif_wr_data[20] <= 1'h0;
    else if (_002_) cpuif_wr_data[20] <= s_apb_pwdata[20];
  always @(posedge clk)
    if (rst) cpuif_wr_data[21] <= 1'h0;
    else if (_002_) cpuif_wr_data[21] <= s_apb_pwdata[21];
  always @(posedge clk)
    if (rst) cpuif_wr_data[22] <= 1'h0;
    else if (_002_) cpuif_wr_data[22] <= s_apb_pwdata[22];
  always @(posedge clk)
    if (rst) cpuif_wr_data[23] <= 1'h0;
    else if (_002_) cpuif_wr_data[23] <= s_apb_pwdata[23];
  always @(posedge clk)
    if (rst) cpuif_wr_data[24] <= 1'h0;
    else if (_002_) cpuif_wr_data[24] <= s_apb_pwdata[24];
  always @(posedge clk)
    if (rst) cpuif_wr_data[25] <= 1'h0;
    else if (_002_) cpuif_wr_data[25] <= s_apb_pwdata[25];
  always @(posedge clk)
    if (rst) cpuif_wr_data[26] <= 1'h0;
    else if (_002_) cpuif_wr_data[26] <= s_apb_pwdata[26];
  always @(posedge clk)
    if (rst) cpuif_wr_data[27] <= 1'h0;
    else if (_002_) cpuif_wr_data[27] <= s_apb_pwdata[27];
  always @(posedge clk)
    if (rst) cpuif_wr_data[28] <= 1'h0;
    else if (_002_) cpuif_wr_data[28] <= s_apb_pwdata[28];
  always @(posedge clk)
    if (rst) cpuif_wr_data[29] <= 1'h0;
    else if (_002_) cpuif_wr_data[29] <= s_apb_pwdata[29];
  always @(posedge clk)
    if (rst) cpuif_wr_data[30] <= 1'h0;
    else if (_002_) cpuif_wr_data[30] <= s_apb_pwdata[30];
  always @(posedge clk)
    if (rst) cpuif_wr_data[31] <= 1'h0;
    else if (_002_) cpuif_wr_data[31] <= s_apb_pwdata[31];
  reg \cpuif_wr_biten_reg[6] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_biten_reg[6]  <= 1'h0;
    else if (_002_) \cpuif_wr_biten_reg[6]  <= s_apb_pstrb[0];
  assign cpuif_wr_biten[6] = \cpuif_wr_biten_reg[6] ;
  reg \cpuif_addr_reg[2] ;
  always @(posedge clk)
    if (rst) \cpuif_addr_reg[2]  <= 1'h0;
    else if (_002_) \cpuif_addr_reg[2]  <= s_apb_paddr[2];
  assign cpuif_addr[2] = \cpuif_addr_reg[2] ;
  always @(posedge clk)
    if (rst) is_active <= 1'h0;
    else is_active <= _011_;
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [0] <= 1'h1;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [0] <= _009_[0];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [1] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [1] <= _009_[1];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [2] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [2] <= _009_[2];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [3] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [3] <= _009_[3];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [4] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [4] <= _009_[4];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [5] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [5] <= _009_[5];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [6] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [6] <= _009_[6];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [7] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [7] <= _009_[7];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [8] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [8] <= _009_[8];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [9] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [9] <= _009_[9];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [10] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [10] <= _009_[10];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [11] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [11] <= _009_[11];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [12] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [12] <= _009_[12];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [13] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [13] <= _009_[13];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [14] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [14] <= _009_[14];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [15] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [15] <= _009_[15];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [16] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [16] <= _009_[16];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [17] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [17] <= _009_[17];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [18] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [18] <= _009_[18];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [19] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [19] <= _009_[19];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [20] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [20] <= _009_[20];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [21] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [21] <= _009_[21];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [22] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [22] <= _009_[22];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [23] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [23] <= _009_[23];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [24] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [24] <= _009_[24];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [25] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [25] <= _009_[25];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [26] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [26] <= _009_[26];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [27] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [27] <= _009_[27];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [28] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [28] <= _009_[28];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [29] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [29] <= _009_[29];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [30] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [30] <= _009_[30];
  always @(posedge clk)
    if (rst) \field_storage_regs_f_value[0] [31] <= 1'h0;
    else if (\field_combo_regs_f_load_next[0] ) \field_storage_regs_f_value[0] [31] <= _009_[31];
  assign _002_ = s_apb_psel & _004_;
  assign _003_ = rst | is_active;
  assign _005_ = ~cpuif_addr[2];
  assign _007_ = ~cpuif_req_is_wr;
  assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
  assign \field_combo_regs_f_load_next[0]  = \decoded_reg_strb_regs[0]  & cpuif_req_is_wr;
  assign _006_ = \decoded_reg_strb_regs[0]  & _007_;
  assign s_apb_prdata[0] = _006_ ? \field_storage_regs_f_value[0] [0] : 1'h0;
  assign s_apb_prdata[1] = _006_ ? \field_storage_regs_f_value[0] [1] : 1'h0;
  assign s_apb_prdata[2] = _006_ ? \field_storage_regs_f_value[0] [2] : 1'h0;
  assign s_apb_prdata[3] = _006_ ? \field_storage_regs_f_value[0] [3] : 1'h0;
  assign s_apb_prdata[4] = _006_ ? \field_storage_regs_f_value[0] [4] : 1'h0;
  assign s_apb_prdata[5] = _006_ ? \field_storage_regs_f_value[0] [5] : 1'h0;
  assign s_apb_prdata[6] = _006_ ? \field_storage_regs_f_value[0] [6] : 1'h0;
  assign s_apb_prdata[7] = _006_ ? \field_storage_regs_f_value[0] [7] : 1'h0;
  assign s_apb_prdata[8] = _006_ ? \field_storage_regs_f_value[0] [8] : 1'h0;
  assign s_apb_prdata[9] = _006_ ? \field_storage_regs_f_value[0] [9] : 1'h0;
  assign s_apb_prdata[10] = _006_ ? \field_storage_regs_f_value[0] [10] : 1'h0;
  assign s_apb_prdata[11] = _006_ ? \field_storage_regs_f_value[0] [11] : 1'h0;
  assign s_apb_prdata[12] = _006_ ? \field_storage_regs_f_value[0] [12] : 1'h0;
  assign s_apb_prdata[13] = _006_ ? \field_storage_regs_f_value[0] [13] : 1'h0;
  assign s_apb_prdata[14] = _006_ ? \field_storage_regs_f_value[0] [14] : 1'h0;
  assign s_apb_prdata[15] = _006_ ? \field_storage_regs_f_value[0] [15] : 1'h0;
  assign s_apb_prdata[16] = _006_ ? \field_storage_regs_f_value[0] [16] : 1'h0;
  assign s_apb_prdata[17] = _006_ ? \field_storage_regs_f_value[0] [17] : 1'h0;
  assign s_apb_prdata[18] = _006_ ? \field_storage_regs_f_value[0] [18] : 1'h0;
  assign s_apb_prdata[19] = _006_ ? \field_storage_regs_f_value[0] [19] : 1'h0;
  assign s_apb_prdata[20] = _006_ ? \field_storage_regs_f_value[0] [20] : 1'h0;
  assign s_apb_prdata[21] = _006_ ? \field_storage_regs_f_value[0] [21] : 1'h0;
  assign s_apb_prdata[22] = _006_ ? \field_storage_regs_f_value[0] [22] : 1'h0;
  assign s_apb_prdata[23] = _006_ ? \field_storage_regs_f_value[0] [23] : 1'h0;
  assign s_apb_prdata[24] = _006_ ? \field_storage_regs_f_value[0] [24] : 1'h0;
  assign s_apb_prdata[25] = _006_ ? \field_storage_regs_f_value[0] [25] : 1'h0;
  assign s_apb_prdata[26] = _006_ ? \field_storage_regs_f_value[0] [26] : 1'h0;
  assign s_apb_prdata[27] = _006_ ? \field_storage_regs_f_value[0] [27] : 1'h0;
  assign s_apb_prdata[28] = _006_ ? \field_storage_regs_f_value[0] [28] : 1'h0;
  assign s_apb_prdata[29] = _006_ ? \field_storage_regs_f_value[0] [29] : 1'h0;
  assign s_apb_prdata[30] = _006_ ? \field_storage_regs_f_value[0] [30] : 1'h0;
  assign s_apb_prdata[31] = _006_ ? \field_storage_regs_f_value[0] [31] : 1'h0;
  assign _010_ = ~s_apb_pready;
  assign _011_ = is_active ? _010_ : s_apb_psel;
  assign _004_ = ~is_active;
  assign _008_[7] = ~cpuif_wr_biten[6];
  assign _008_[15] = ~cpuif_wr_biten[14];
  assign _008_[23] = ~cpuif_wr_biten[22];
  assign _008_[31] = ~cpuif_wr_biten[30];
  assign \decoded_reg_strb_regs[0]  = cpuif_req & _005_;
  assign cpuif_wr_ack = cpuif_req & cpuif_req_is_wr;
  assign cpuif_rd_ack = cpuif_req & _007_;
  assign _000_[0] = \field_storage_regs_f_value[0] [0] & _008_[7];
  assign _000_[1] = \field_storage_regs_f_value[0] [1] & _008_[7];
  assign _000_[2] = \field_storage_regs_f_value[0] [2] & _008_[7];
  assign _000_[3] = \field_storage_regs_f_value[0] [3] & _008_[7];
  assign _000_[4] = \field_storage_regs_f_value[0] [4] & _008_[7];
  assign _000_[5] = \field_storage_regs_f_value[0] [5] & _008_[7];
  assign _000_[6] = \field_storage_regs_f_value[0] [6] & _008_[7];
  assign _000_[7] = \field_storage_regs_f_value[0] [7] & _008_[7];
  assign _000_[8] = \field_storage_regs_f_value[0] [8] & _008_[15];
  assign _000_[9] = \field_storage_regs_f_value[0] [9] & _008_[15];
  assign _000_[10] = \field_storage_regs_f_value[0] [10] & _008_[15];
  assign _000_[11] = \field_storage_regs_f_value[0] [11] & _008_[15];
  assign _000_[12] = \field_storage_regs_f_value[0] [12] & _008_[15];
  assign _000_[13] = \field_storage_regs_f_value[0] [13] & _008_[15];
  assign _000_[14] = \field_storage_regs_f_value[0] [14] & _008_[15];
  assign _000_[15] = \field_storage_regs_f_value[0] [15] & _008_[15];
  assign _000_[16] = \field_storage_regs_f_value[0] [16] & _008_[23];
  assign _000_[17] = \field_storage_regs_f_value[0] [17] & _008_[23];
  assign _000_[18] = \field_storage_regs_f_value[0] [18] & _008_[23];
  assign _000_[19] = \field_storage_regs_f_value[0] [19] & _008_[23];
  assign _000_[20] = \field_storage_regs_f_value[0] [20] & _008_[23];
  assign _000_[21] = \field_storage_regs_f_value[0] [21] & _008_[23];
  assign _000_[22] = \field_storage_regs_f_value[0] [22] & _008_[23];
  assign _000_[23] = \field_storage_regs_f_value[0] [23] & _008_[23];
  assign _000_[24] = \field_storage_regs_f_value[0] [24] & _008_[31];
  assign _000_[25] = \field_storage_regs_f_value[0] [25] & _008_[31];
  assign _000_[26] = \field_storage_regs_f_value[0] [26] & _008_[31];
  assign _000_[27] = \field_storage_regs_f_value[0] [27] & _008_[31];
  assign _000_[28] = \field_storage_regs_f_value[0] [28] & _008_[31];
  assign _000_[29] = \field_storage_regs_f_value[0] [29] & _008_[31];
  assign _000_[30] = \field_storage_regs_f_value[0] [30] & _008_[31];
  assign _000_[31] = \field_storage_regs_f_value[0] [31] & _008_[31];
  assign _001_[0] = cpuif_wr_data[0] & cpuif_wr_biten[6];
  assign _001_[1] = cpuif_wr_data[1] & cpuif_wr_biten[6];
  assign _001_[2] = cpuif_wr_data[2] & cpuif_wr_biten[6];
  assign _001_[3] = cpuif_wr_data[3] & cpuif_wr_biten[6];
  assign _001_[4] = cpuif_wr_data[4] & cpuif_wr_biten[6];
  assign _001_[5] = cpuif_wr_data[5] & cpuif_wr_biten[6];
  assign _001_[6] = cpuif_wr_data[6] & cpuif_wr_biten[6];
  assign _001_[7] = cpuif_wr_data[7] & cpuif_wr_biten[6];
  assign _001_[8] = cpuif_wr_data[8] & cpuif_wr_biten[14];
  assign _001_[9] = cpuif_wr_data[9] & cpuif_wr_biten[14];
  assign _001_[10] = cpuif_wr_data[10] & cpuif_wr_biten[14];
  assign _001_[11] = cpuif_wr_data[11] & cpuif_wr_biten[14];
  assign _001_[12] = cpuif_wr_data[12] & cpuif_wr_biten[14];
  assign _001_[13] = cpuif_wr_data[13] & cpuif_wr_biten[14];
  assign _001_[14] = cpuif_wr_data[14] & cpuif_wr_biten[14];
  assign _001_[15] = cpuif_wr_data[15] & cpuif_wr_biten[14];
  assign _001_[16] = cpuif_wr_data[16] & cpuif_wr_biten[22];
  assign _001_[17] = cpuif_wr_data[17] & cpuif_wr_biten[22];
  assign _001_[18] = cpuif_wr_data[18] & cpuif_wr_biten[22];
  assign _001_[19] = cpuif_wr_data[19] & cpuif_wr_biten[22];
  assign _001_[20] = cpuif_wr_data[20] & cpuif_wr_biten[22];
  assign _001_[21] = cpuif_wr_data[21] & cpuif_wr_biten[22];
  assign _001_[22] = cpuif_wr_data[22] & cpuif_wr_biten[22];
  assign _001_[23] = cpuif_wr_data[23] & cpuif_wr_biten[22];
  assign _001_[24] = cpuif_wr_data[24] & cpuif_wr_biten[30];
  assign _001_[25] = cpuif_wr_data[25] & cpuif_wr_biten[30];
  assign _001_[26] = cpuif_wr_data[26] & cpuif_wr_biten[30];
  assign _001_[27] = cpuif_wr_data[27] & cpuif_wr_biten[30];
  assign _001_[28] = cpuif_wr_data[28] & cpuif_wr_biten[30];
  assign _001_[29] = cpuif_wr_data[29] & cpuif_wr_biten[30];
  assign _001_[30] = cpuif_wr_data[30] & cpuif_wr_biten[30];
  assign _001_[31] = cpuif_wr_data[31] & cpuif_wr_biten[30];
  assign _009_[0] = _000_[0] | _001_[0];
  assign _009_[1] = _000_[1] | _001_[1];
  assign _009_[2] = _000_[2] | _001_[2];
  assign _009_[3] = _000_[3] | _001_[3];
  assign _009_[4] = _000_[4] | _001_[4];
  assign _009_[5] = _000_[5] | _001_[5];
  assign _009_[6] = _000_[6] | _001_[6];
  assign _009_[7] = _000_[7] | _001_[7];
  assign _009_[8] = _000_[8] | _001_[8];
  assign _009_[9] = _000_[9] | _001_[9];
  assign _009_[10] = _000_[10] | _001_[10];
  assign _009_[11] = _000_[11] | _001_[11];
  assign _009_[12] = _000_[12] | _001_[12];
  assign _009_[13] = _000_[13] | _001_[13];
  assign _009_[14] = _000_[14] | _001_[14];
  assign _009_[15] = _000_[15] | _001_[15];
  assign _009_[16] = _000_[16] | _001_[16];
  assign _009_[17] = _000_[17] | _001_[17];
  assign _009_[18] = _000_[18] | _001_[18];
  assign _009_[19] = _000_[19] | _001_[19];
  assign _009_[20] = _000_[20] | _001_[20];
  assign _009_[21] = _000_[21] | _001_[21];
  assign _009_[22] = _000_[22] | _001_[22];
  assign _009_[23] = _000_[23] | _001_[23];
  assign _009_[24] = _000_[24] | _001_[24];
  assign _009_[25] = _000_[25] | _001_[25];
  assign _009_[26] = _000_[26] | _001_[26];
  assign _009_[27] = _000_[27] | _001_[27];
  assign _009_[28] = _000_[28] | _001_[28];
  assign _009_[29] = _000_[29] | _001_[29];
  assign _009_[30] = _000_[30] | _001_[30];
  assign _009_[31] = _000_[31] | _001_[31];
  assign { _008_[30:24], _008_[22:16], _008_[14:8], _008_[6:0] } = { _008_[31], _008_[31], _008_[31], _008_[31], _008_[31], _008_[31], _008_[31], _008_[23], _008_[23], _008_[23], _008_[23], _008_[23], _008_[23], _008_[23], _008_[15], _008_[15], _008_[15], _008_[15], _008_[15], _008_[15], _008_[15], _008_[7], _008_[7], _008_[7], _008_[7], _008_[7], _008_[7], _008_[7] };
  assign cpuif_addr[1:0] = 2'h0;
  assign cpuif_rd_data = s_apb_prdata;
  assign cpuif_rd_err = 1'h0;
  assign cpuif_req_masked = cpuif_req;
  assign cpuif_req_stall_rd = 1'h0;
  assign cpuif_req_stall_wr = 1'h0;
  assign { cpuif_wr_biten[31], cpuif_wr_biten[29:23], cpuif_wr_biten[21:15], cpuif_wr_biten[13:7], cpuif_wr_biten[5:0] } = { cpuif_wr_biten[30], cpuif_wr_biten[30], cpuif_wr_biten[30], cpuif_wr_biten[30], cpuif_wr_biten[30], cpuif_wr_biten[30], cpuif_wr_biten[30], cpuif_wr_biten[22], cpuif_wr_biten[22], cpuif_wr_biten[22], cpuif_wr_biten[22], cpuif_wr_biten[22], cpuif_wr_biten[22], cpuif_wr_biten[22], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6] };
  assign cpuif_wr_err = 1'h0;
  assign decoded_req = cpuif_req;
  assign decoded_req_is_wr = cpuif_req_is_wr;
  assign decoded_wr_biten = { cpuif_wr_biten[30], cpuif_wr_biten[30], cpuif_wr_biten[30], cpuif_wr_biten[30], cpuif_wr_biten[30], cpuif_wr_biten[30], cpuif_wr_biten[30], cpuif_wr_biten[30], cpuif_wr_biten[22], cpuif_wr_biten[22], cpuif_wr_biten[22], cpuif_wr_biten[22], cpuif_wr_biten[22], cpuif_wr_biten[22], cpuif_wr_biten[22], cpuif_wr_biten[22], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[14], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6] };
  assign decoded_wr_data = cpuif_wr_data;
  assign \readback_array[0]  = s_apb_prdata;
  assign readback_data = s_apb_prdata;
  assign readback_done = cpuif_rd_ack;
  assign readback_err = 1'h0;
  assign readback_external_rd_ack = 1'h0;
  assign s_apb_pslverr = 1'h0;
endmodule
