// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module regblock (
        input wire clk,
        input wire rst,

        input wire s_apb_psel,
        input wire s_apb_pwrite,
        input wire s_apb_penable,
        input wire [2:0] s_apb_pprot,
        input wire [13:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr


    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [13:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;


    // Request
    logic is_active;
    always_ff @(posedge clk) begin
        if(rst) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= {s_apb_paddr[13:2], 2'b0};
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<4; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    logic [0:0] decoded_reg_strb_page;
    logic [0:0] decoded_reg_strb_operaton;
    logic [0:0] decoded_reg_strb_on_off_config;
    logic [0:0] decoded_reg_strb_page_config_vout_ov [32];
    logic [0:0] decoded_reg_strb_page_config_vout_uv [32];
    logic [1:0] decoded_reg_strb_page_config64_vout_ov [32];
    logic [1:0] decoded_reg_strb_page_config64_vout_uv [32];
    logic [0:0] decoded_reg_strb_vout_ov [32];
    logic [1:0] decoded_reg_strb_vout_ov64 [32];
    logic [0:0] decoded_reg_strb_ot_fault_limit [32];
    logic [0:0] decoded_reg_strb_ot_fault_response [32];
    logic decoded_req;
    logic decoded_req_is_wr;
    /* verilator lint_off UNUSEDSIGNAL */
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;
    /* verilator lint_on UNUSEDSIGNAL */

    always @(*) begin
        /* verilator lint_off UNUSEDSIGNAL */
        integer next_cpuif_addr;
        /* verilator lint_on UNUSEDSIGNAL */
        decoded_reg_strb_page = cpuif_req_masked & (cpuif_addr == 14'h0);
        decoded_reg_strb_operaton = cpuif_req_masked & (cpuif_addr == 14'h4);
        decoded_reg_strb_on_off_config = cpuif_req_masked & (cpuif_addr == 14'h8);
        for(int i0=0; i0<32; i0++) begin : gen_loop_13
            next_cpuif_addr = 32'h100 + i0*14'h8;
            decoded_reg_strb_page_config_vout_ov[i0] = cpuif_req_masked & (cpuif_addr == next_cpuif_addr[13:0]);
            next_cpuif_addr = 32'h104 + i0*14'h8;
            decoded_reg_strb_page_config_vout_uv[i0] = cpuif_req_masked & (cpuif_addr == next_cpuif_addr[13:0]);
        end
        for(int i0=0; i0<32; i0++) begin : gen_loop_14
            decoded_reg_strb_page_config64_vout_ov[i0][0] = cpuif_req_masked & (cpuif_addr == 32'h1000 + i0*14'h10);
            decoded_reg_strb_page_config64_vout_ov[i0][1] = cpuif_req_masked & (cpuif_addr == 32'h1004 + i0*14'h10);
            decoded_reg_strb_page_config64_vout_uv[i0][0] = cpuif_req_masked & (cpuif_addr == 32'h1008 + i0*14'h10);
            decoded_reg_strb_page_config64_vout_uv[i0][1] = cpuif_req_masked & (cpuif_addr == 32'h100c + i0*14'h10);
        end
        for(int i0=0; i0<32; i0++) begin : gen_loop_15
            next_cpuif_addr = 32'h2000 + i0*14'h4;
            decoded_reg_strb_vout_ov[i0] = cpuif_req_masked & (cpuif_addr == next_cpuif_addr[13:0]);
        end
        for(int i0=0; i0<32; i0++) begin : gen_loop_16
            decoded_reg_strb_vout_ov64[i0][0] = cpuif_req_masked & (cpuif_addr == 32'h3000 + i0*14'h8);
            decoded_reg_strb_vout_ov64[i0][1] = cpuif_req_masked & (cpuif_addr == 32'h3004 + i0*14'h8);
        end
        for(int i0=0; i0<32; i0++) begin : gen_loop_17
            next_cpuif_addr = 32'h3100 + i0*14'h4;
            decoded_reg_strb_ot_fault_limit[i0] = cpuif_req_masked & (cpuif_addr == next_cpuif_addr[13:0]);
        end
        for(int i0=0; i0<32; i0++) begin : gen_loop_18
            next_cpuif_addr = 32'h3180 + i0*14'h4;
            decoded_reg_strb_ot_fault_response[i0] = cpuif_req_masked & (cpuif_addr == next_cpuif_addr[13:0]);
        end
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;


    //--------------------------------------------------------------------------
    // Field storage declarations
    //--------------------------------------------------------------------------

    // Field: regblock.OPERATON.BYTE
    logic [7:0] field_storage_operaton_byte_value;
    logic [7:0] field_combo_operaton_byte_next;
    logic field_combo_operaton_byte_load_next;
    // Field: regblock.ON_OFF_CONFIG.BYTE
    logic [7:0] field_storage_on_off_config_byte_value;
    logic [7:0] field_combo_on_off_config_byte_next;
    logic field_combo_on_off_config_byte_load_next;
    // Field: regblock.PAGE_CONFIG[].VOUT_OV.FAULT_LIMIT
    logic [15:0] field_storage_page_config_vout_ov_fault_limit_value [32] ;
    logic [15:0] field_combo_page_config_vout_ov_fault_limit_next [32] ;
    logic field_combo_page_config_vout_ov_fault_limit_load_next [32] ;
    // Field: regblock.PAGE_CONFIG[].VOUT_OV.WARN_LIMIT
    logic [15:0] field_storage_page_config_vout_ov_warn_limit_value [32] ;
    logic [15:0] field_combo_page_config_vout_ov_warn_limit_next [32] ;
    logic field_combo_page_config_vout_ov_warn_limit_load_next [32] ;
    // Field: regblock.PAGE_CONFIG[].VOUT_UV.FAULT_LIMIT
    logic [15:0] field_storage_page_config_vout_uv_fault_limit_value [32] ;
    logic [15:0] field_combo_page_config_vout_uv_fault_limit_next [32] ;
    logic field_combo_page_config_vout_uv_fault_limit_load_next [32] ;
    // Field: regblock.PAGE_CONFIG[].VOUT_UV.WARN_LIMIT
    logic [15:0] field_storage_page_config_vout_uv_warn_limit_value [32] ;
    logic [15:0] field_combo_page_config_vout_uv_warn_limit_next [32] ;
    logic field_combo_page_config_vout_uv_warn_limit_load_next [32] ;
    // Field: regblock.page_config64[].VOUT_OV.FAULT_LIMIT
    logic [31:0] field_storage_page_config64_vout_ov_fault_limit_value [32] ;
    logic [31:0] field_combo_page_config64_vout_ov_fault_limit_next [32] ;
    logic field_combo_page_config64_vout_ov_fault_limit_load_next [32] ;
    // Field: regblock.page_config64[].VOUT_OV.WARN_LIMIT
    logic [31:0] field_storage_page_config64_vout_ov_warn_limit_value [32] ;
    logic [31:0] field_combo_page_config64_vout_ov_warn_limit_next [32] ;
    logic field_combo_page_config64_vout_ov_warn_limit_load_next [32] ;
    // Field: regblock.page_config64[].VOUT_UV.FAULT_LIMIT
    logic [31:0] field_storage_page_config64_vout_uv_fault_limit_value [32] ;
    logic [31:0] field_combo_page_config64_vout_uv_fault_limit_next [32] ;
    logic field_combo_page_config64_vout_uv_fault_limit_load_next [32] ;
    // Field: regblock.page_config64[].VOUT_UV.WARN_LIMIT
    logic [31:0] field_storage_page_config64_vout_uv_warn_limit_value [32] ;
    logic [31:0] field_combo_page_config64_vout_uv_warn_limit_next [32] ;
    logic field_combo_page_config64_vout_uv_warn_limit_load_next [32] ;
    // Field: regblock.VOUT_OV[].FAULT_LIMIT
    logic [15:0] field_storage_vout_ov_fault_limit_value [32] ;
    logic [15:0] field_combo_vout_ov_fault_limit_next [32] ;
    logic field_combo_vout_ov_fault_limit_load_next [32] ;
    // Field: regblock.VOUT_OV[].WARN_LIMIT
    logic [15:0] field_storage_vout_ov_warn_limit_value [32] ;
    logic [15:0] field_combo_vout_ov_warn_limit_next [32] ;
    logic field_combo_vout_ov_warn_limit_load_next [32] ;
    // Field: regblock.VOUT_OV64[].FAULT_LIMIT
    logic [31:0] field_storage_vout_ov64_fault_limit_value [32] ;
    logic [31:0] field_combo_vout_ov64_fault_limit_next [32] ;
    logic field_combo_vout_ov64_fault_limit_load_next [32] ;
    // Field: regblock.VOUT_OV64[].WARN_LIMIT
    logic [31:0] field_storage_vout_ov64_warn_limit_value [32] ;
    logic [31:0] field_combo_vout_ov64_warn_limit_next [32] ;
    logic field_combo_vout_ov64_warn_limit_load_next [32] ;
    // Field: regblock.OT_FAULT_LIMIT[].WORD
    logic [15:0] field_storage_ot_fault_limit_word_value [32] ;
    logic [15:0] field_combo_ot_fault_limit_word_next [32] ;
    logic field_combo_ot_fault_limit_word_load_next [32] ;
    // Field: regblock.OT_FAULT_RESPONSE[].BYTE
    logic [7:0] field_storage_ot_fault_response_byte_value [32] ;
    logic [7:0] field_combo_ot_fault_response_byte_next [32] ;
    logic field_combo_ot_fault_response_byte_load_next [32] ;
    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_operaton_byte_value;
        load_next_c = '0;
        if(decoded_reg_strb_operaton && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_operaton_byte_value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo_operaton_byte_next = next_c;
        field_combo_operaton_byte_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_operaton_byte_value <= 8'h0;
        end else if(field_combo_operaton_byte_load_next) begin
            field_storage_operaton_byte_value <= field_combo_operaton_byte_next;
        end
    end
    // always_comb begin
    always @(*) begin
        logic [7:0] next_c;
        logic load_next_c;
        next_c = field_storage_on_off_config_byte_value;
        load_next_c = '0;
        if(decoded_reg_strb_on_off_config && decoded_req_is_wr) begin // SW write
            next_c = (field_storage_on_off_config_byte_value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo_on_off_config_byte_next = next_c;
        field_combo_on_off_config_byte_load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage_on_off_config_byte_value <= 8'h0;
        end else if(field_combo_on_off_config_byte_load_next) begin
            field_storage_on_off_config_byte_value <= field_combo_on_off_config_byte_next;
        end
    end
    for(genvar i0=0; i0<32; i0++) begin : gen_loop_25
        // always_comb begin
        always @(*) begin
            logic [15:0] next_c;
            logic load_next_c;
            next_c = field_storage_page_config_vout_ov_fault_limit_value[i0];
            load_next_c = '0;
            if(decoded_reg_strb_page_config_vout_ov[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage_page_config_vout_ov_fault_limit_value[i0] & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
                load_next_c = '1;
            end
            field_combo_page_config_vout_ov_fault_limit_next[i0] = next_c;
            field_combo_page_config_vout_ov_fault_limit_load_next[i0] = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(rst) begin
                field_storage_page_config_vout_ov_fault_limit_value[i0] <= 16'h0;
            end else if(field_combo_page_config_vout_ov_fault_limit_load_next[i0]) begin
                field_storage_page_config_vout_ov_fault_limit_value[i0] <= field_combo_page_config_vout_ov_fault_limit_next[i0];
            end
        end
        // always_comb begin
        always @(*) begin
            logic [15:0] next_c;
            logic load_next_c;
            next_c = field_storage_page_config_vout_ov_warn_limit_value[i0];
            load_next_c = '0;
            if(decoded_reg_strb_page_config_vout_ov[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage_page_config_vout_ov_warn_limit_value[i0] & ~decoded_wr_biten[31:16]) | (decoded_wr_data[31:16] & decoded_wr_biten[31:16]);
                load_next_c = '1;
            end
            field_combo_page_config_vout_ov_warn_limit_next[i0] = next_c;
            field_combo_page_config_vout_ov_warn_limit_load_next[i0] = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(rst) begin
                field_storage_page_config_vout_ov_warn_limit_value[i0] <= 16'h0;
            end else if(field_combo_page_config_vout_ov_warn_limit_load_next[i0]) begin
                field_storage_page_config_vout_ov_warn_limit_value[i0] <= field_combo_page_config_vout_ov_warn_limit_next[i0];
            end
        end
        // always_comb begin
        always @(*) begin
            logic [15:0] next_c;
            logic load_next_c;
            next_c = field_storage_page_config_vout_uv_fault_limit_value[i0];
            load_next_c = '0;
            if(decoded_reg_strb_page_config_vout_uv[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage_page_config_vout_uv_fault_limit_value[i0] & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
                load_next_c = '1;
            end
            field_combo_page_config_vout_uv_fault_limit_next[i0] = next_c;
            field_combo_page_config_vout_uv_fault_limit_load_next[i0] = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(rst) begin
                field_storage_page_config_vout_uv_fault_limit_value[i0] <= 16'h0;
            end else if(field_combo_page_config_vout_uv_fault_limit_load_next[i0]) begin
                field_storage_page_config_vout_uv_fault_limit_value[i0] <= field_combo_page_config_vout_uv_fault_limit_next[i0];
            end
        end
        // always_comb begin
        always @(*) begin
            logic [15:0] next_c;
            logic load_next_c;
            next_c = field_storage_page_config_vout_uv_warn_limit_value[i0];
            load_next_c = '0;
            if(decoded_reg_strb_page_config_vout_uv[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage_page_config_vout_uv_warn_limit_value[i0] & ~decoded_wr_biten[31:16]) | (decoded_wr_data[31:16] & decoded_wr_biten[31:16]);
                load_next_c = '1;
            end
            field_combo_page_config_vout_uv_warn_limit_next[i0] = next_c;
            field_combo_page_config_vout_uv_warn_limit_load_next[i0] = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(rst) begin
                field_storage_page_config_vout_uv_warn_limit_value[i0] <= 16'h0;
            end else if(field_combo_page_config_vout_uv_warn_limit_load_next[i0]) begin
                field_storage_page_config_vout_uv_warn_limit_value[i0] <= field_combo_page_config_vout_uv_warn_limit_next[i0];
            end
        end
    end
    for(genvar i0=0; i0<32; i0++) begin : gen_loop_26
        // always_comb begin
        always @(*) begin
            logic [31:0] next_c;
            logic load_next_c;
            next_c = field_storage_page_config64_vout_ov_fault_limit_value[i0];
            load_next_c = '0;
            if(decoded_reg_strb_page_config64_vout_ov[i0][0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage_page_config64_vout_ov_fault_limit_value[i0] & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo_page_config64_vout_ov_fault_limit_next[i0] = next_c;
            field_combo_page_config64_vout_ov_fault_limit_load_next[i0] = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(rst) begin
                field_storage_page_config64_vout_ov_fault_limit_value[i0] <= 32'h0;
            end else if(field_combo_page_config64_vout_ov_fault_limit_load_next[i0]) begin
                field_storage_page_config64_vout_ov_fault_limit_value[i0] <= field_combo_page_config64_vout_ov_fault_limit_next[i0];
            end
        end
        // always_comb begin
        always @(*) begin
            logic [31:0] next_c;
            logic load_next_c;
            next_c = field_storage_page_config64_vout_ov_warn_limit_value[i0];
            load_next_c = '0;
            if(decoded_reg_strb_page_config64_vout_ov[i0][1] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage_page_config64_vout_ov_warn_limit_value[i0] & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo_page_config64_vout_ov_warn_limit_next[i0] = next_c;
            field_combo_page_config64_vout_ov_warn_limit_load_next[i0] = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(rst) begin
                field_storage_page_config64_vout_ov_warn_limit_value[i0] <= 32'h0;
            end else if(field_combo_page_config64_vout_ov_warn_limit_load_next[i0]) begin
                field_storage_page_config64_vout_ov_warn_limit_value[i0] <= field_combo_page_config64_vout_ov_warn_limit_next[i0];
            end
        end
        // always_comb begin
        always @(*) begin
            logic [31:0] next_c;
            logic load_next_c;
            next_c = field_storage_page_config64_vout_uv_fault_limit_value[i0];
            load_next_c = '0;
            if(decoded_reg_strb_page_config64_vout_uv[i0][0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage_page_config64_vout_uv_fault_limit_value[i0] & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo_page_config64_vout_uv_fault_limit_next[i0] = next_c;
            field_combo_page_config64_vout_uv_fault_limit_load_next[i0] = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(rst) begin
                field_storage_page_config64_vout_uv_fault_limit_value[i0] <= 32'h0;
            end else if(field_combo_page_config64_vout_uv_fault_limit_load_next[i0]) begin
                field_storage_page_config64_vout_uv_fault_limit_value[i0] <= field_combo_page_config64_vout_uv_fault_limit_next[i0];
            end
        end
        // always_comb begin
        always @(*) begin
            logic [31:0] next_c;
            logic load_next_c;
            next_c = field_storage_page_config64_vout_uv_warn_limit_value[i0];
            load_next_c = '0;
            if(decoded_reg_strb_page_config64_vout_uv[i0][1] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage_page_config64_vout_uv_warn_limit_value[i0] & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo_page_config64_vout_uv_warn_limit_next[i0] = next_c;
            field_combo_page_config64_vout_uv_warn_limit_load_next[i0] = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(rst) begin
                field_storage_page_config64_vout_uv_warn_limit_value[i0] <= 32'h0;
            end else if(field_combo_page_config64_vout_uv_warn_limit_load_next[i0]) begin
                field_storage_page_config64_vout_uv_warn_limit_value[i0] <= field_combo_page_config64_vout_uv_warn_limit_next[i0];
            end
        end
    end
    for(genvar i0=0; i0<32; i0++) begin : gen_loop_27
        // always_comb begin
        always @(*) begin
            logic [15:0] next_c;
            logic load_next_c;
            next_c = field_storage_vout_ov_fault_limit_value[i0];
            load_next_c = '0;
            if(decoded_reg_strb_vout_ov[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage_vout_ov_fault_limit_value[i0] & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
                load_next_c = '1;
            end
            field_combo_vout_ov_fault_limit_next[i0] = next_c;
            field_combo_vout_ov_fault_limit_load_next[i0] = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(rst) begin
                field_storage_vout_ov_fault_limit_value[i0] <= 16'h0;
            end else if(field_combo_vout_ov_fault_limit_load_next[i0]) begin
                field_storage_vout_ov_fault_limit_value[i0] <= field_combo_vout_ov_fault_limit_next[i0];
            end
        end
        // always_comb begin
        always @(*) begin
            logic [15:0] next_c;
            logic load_next_c;
            next_c = field_storage_vout_ov_warn_limit_value[i0];
            load_next_c = '0;
            if(decoded_reg_strb_vout_ov[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage_vout_ov_warn_limit_value[i0] & ~decoded_wr_biten[31:16]) | (decoded_wr_data[31:16] & decoded_wr_biten[31:16]);
                load_next_c = '1;
            end
            field_combo_vout_ov_warn_limit_next[i0] = next_c;
            field_combo_vout_ov_warn_limit_load_next[i0] = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(rst) begin
                field_storage_vout_ov_warn_limit_value[i0] <= 16'h0;
            end else if(field_combo_vout_ov_warn_limit_load_next[i0]) begin
                field_storage_vout_ov_warn_limit_value[i0] <= field_combo_vout_ov_warn_limit_next[i0];
            end
        end
    end
    for(genvar i0=0; i0<32; i0++) begin : gen_loop_28
        // always_comb begin
        always @(*) begin
            logic [31:0] next_c;
            logic load_next_c;
            next_c = field_storage_vout_ov64_fault_limit_value[i0];
            load_next_c = '0;
            if(decoded_reg_strb_vout_ov64[i0][0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage_vout_ov64_fault_limit_value[i0] & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo_vout_ov64_fault_limit_next[i0] = next_c;
            field_combo_vout_ov64_fault_limit_load_next[i0] = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(rst) begin
                field_storage_vout_ov64_fault_limit_value[i0] <= 32'h0;
            end else if(field_combo_vout_ov64_fault_limit_load_next[i0]) begin
                field_storage_vout_ov64_fault_limit_value[i0] <= field_combo_vout_ov64_fault_limit_next[i0];
            end
        end
        // always_comb begin
        always @(*) begin
            logic [31:0] next_c;
            logic load_next_c;
            next_c = field_storage_vout_ov64_warn_limit_value[i0];
            load_next_c = '0;
            if(decoded_reg_strb_vout_ov64[i0][1] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage_vout_ov64_warn_limit_value[i0] & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo_vout_ov64_warn_limit_next[i0] = next_c;
            field_combo_vout_ov64_warn_limit_load_next[i0] = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(rst) begin
                field_storage_vout_ov64_warn_limit_value[i0] <= 32'h0;
            end else if(field_combo_vout_ov64_warn_limit_load_next[i0]) begin
                field_storage_vout_ov64_warn_limit_value[i0] <= field_combo_vout_ov64_warn_limit_next[i0];
            end
        end
    end
    for(genvar i0=0; i0<32; i0++) begin : gen_loop_29
        // always_comb begin
        always @(*) begin
            logic [15:0] next_c;
            logic load_next_c;
            next_c = field_storage_ot_fault_limit_word_value[i0];
            load_next_c = '0;
            if(decoded_reg_strb_ot_fault_limit[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage_ot_fault_limit_word_value[i0] & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
                load_next_c = '1;
            end
            field_combo_ot_fault_limit_word_next[i0] = next_c;
            field_combo_ot_fault_limit_word_load_next[i0] = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(rst) begin
                field_storage_ot_fault_limit_word_value[i0] <= 16'h0;
            end else if(field_combo_ot_fault_limit_word_load_next[i0]) begin
                field_storage_ot_fault_limit_word_value[i0] <= field_combo_ot_fault_limit_word_next[i0];
            end
        end
    end
    for(genvar i0=0; i0<32; i0++) begin : gen_loop_30
        // always_comb begin
        always @(*) begin
            logic [7:0] next_c;
            logic load_next_c;
            next_c = field_storage_ot_fault_response_byte_value[i0];
            load_next_c = '0;
            if(decoded_reg_strb_ot_fault_response[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage_ot_fault_response_byte_value[i0] & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
                load_next_c = '1;
            end
            field_combo_ot_fault_response_byte_next[i0] = next_c;
            field_combo_ot_fault_response_byte_load_next[i0] = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(rst) begin
                field_storage_ot_fault_response_byte_value[i0] <= 8'h0;
            end else if(field_combo_ot_fault_response_byte_load_next[i0]) begin
                field_storage_ot_fault_response_byte_value[i0] <= field_combo_ot_fault_response_byte_next[i0];
            end
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

//--------------------------------------------------------------------------
// Readback
//--------------------------------------------------------------------------
    logic readback_external_rd_ack;
    assign readback_external_rd_ack = 0;

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[355];
    assign readback_array[0][7:0] = (decoded_reg_strb_page && !decoded_req_is_wr) ? 8'h0 : '0;
    assign readback_array[0][31:8] = '0;
    assign readback_array[1][7:0] = (decoded_reg_strb_operaton && !decoded_req_is_wr) ? field_storage_operaton_byte_value : '0;
    assign readback_array[1][31:8] = '0;
    assign readback_array[2][7:0] = (decoded_reg_strb_on_off_config && !decoded_req_is_wr) ? field_storage_on_off_config_byte_value : '0;
    assign readback_array[2][31:8] = '0;
    for(genvar i0=0; i0<32; i0++) begin : gen_loop_1
        assign readback_array[i0*2 + 3][15:0] = (decoded_reg_strb_page_config_vout_ov[i0] && !decoded_req_is_wr) ? field_storage_page_config_vout_ov_fault_limit_value[i0] : '0;
        assign readback_array[i0*2 + 3][31:16] = (decoded_reg_strb_page_config_vout_ov[i0] && !decoded_req_is_wr) ? field_storage_page_config_vout_ov_warn_limit_value[i0] : '0;
        assign readback_array[i0*2 + 4][15:0] = (decoded_reg_strb_page_config_vout_uv[i0] && !decoded_req_is_wr) ? field_storage_page_config_vout_uv_fault_limit_value[i0] : '0;
        assign readback_array[i0*2 + 4][31:16] = (decoded_reg_strb_page_config_vout_uv[i0] && !decoded_req_is_wr) ? field_storage_page_config_vout_uv_warn_limit_value[i0] : '0;
    end
    for(genvar i0=0; i0<32; i0++) begin : gen_loop_2
        assign readback_array[i0*4 + 67][31:0] = (decoded_reg_strb_page_config64_vout_ov[i0][0] && !decoded_req_is_wr) ? field_storage_page_config64_vout_ov_fault_limit_value[i0] : '0;
        assign readback_array[i0*4 + 68][31:0] = (decoded_reg_strb_page_config64_vout_ov[i0][1] && !decoded_req_is_wr) ? field_storage_page_config64_vout_ov_warn_limit_value[i0] : '0;
        assign readback_array[i0*4 + 69][31:0] = (decoded_reg_strb_page_config64_vout_uv[i0][0] && !decoded_req_is_wr) ? field_storage_page_config64_vout_uv_fault_limit_value[i0] : '0;
        assign readback_array[i0*4 + 70][31:0] = (decoded_reg_strb_page_config64_vout_uv[i0][1] && !decoded_req_is_wr) ? field_storage_page_config64_vout_uv_warn_limit_value[i0] : '0;
    end
    for(genvar i0=0; i0<32; i0++) begin : gen_loop_3
        assign readback_array[i0*1 + 195][15:0] = (decoded_reg_strb_vout_ov[i0] && !decoded_req_is_wr) ? field_storage_vout_ov_fault_limit_value[i0] : '0;
        assign readback_array[i0*1 + 195][31:16] = (decoded_reg_strb_vout_ov[i0] && !decoded_req_is_wr) ? field_storage_vout_ov_warn_limit_value[i0] : '0;
    end
    for(genvar i0=0; i0<32; i0++) begin : gen_loop_4
        assign readback_array[i0*2 + 227][31:0] = (decoded_reg_strb_vout_ov64[i0][0] && !decoded_req_is_wr) ? field_storage_vout_ov64_fault_limit_value[i0] : '0;
        assign readback_array[i0*2 + 228][31:0] = (decoded_reg_strb_vout_ov64[i0][1] && !decoded_req_is_wr) ? field_storage_vout_ov64_warn_limit_value[i0] : '0;
    end
    for(genvar i0=0; i0<32; i0++) begin : gen_loop_5
        assign readback_array[i0*1 + 291][15:0] = (decoded_reg_strb_ot_fault_limit[i0] && !decoded_req_is_wr) ? field_storage_ot_fault_limit_word_value[i0] : '0;
        assign readback_array[i0*1 + 291][31:16] = '0;
    end
    for(genvar i0=0; i0<32; i0++) begin : gen_loop_6
        assign readback_array[i0*1 + 323][7:0] = (decoded_reg_strb_ot_fault_response[i0] && !decoded_req_is_wr) ? field_storage_ot_fault_response_byte_value[i0] : '0;
        assign readback_array[i0*1 + 323][31:8] = '0;
    end

    // Reduce the array
    // always_comb begin
    always @(*) begin
        logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<355; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
