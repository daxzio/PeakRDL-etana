// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module regblock (
        input wire clk,
        input wire rst,

        input wire s_apb_psel,
        input wire s_apb_penable,
        input wire s_apb_pwrite,
        input wire [2:0] s_apb_pprot,
        input wire [14:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,

        input regblock_pkg::regblock__in_t hwif_in,
        output regblock_pkg::regblock__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [14:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    // Request
    logic is_active;
    always_ff @(posedge clk) begin
        if(rst) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= {s_apb_paddr[14:2], 2'b0};
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<4; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;
    logic external_req;
    logic external_pending;
    logic external_wr_ack;
    logic external_rd_ack;
    always_ff @(posedge clk) begin
        if(rst) begin
            external_pending <= '0;
        end else begin
            if(external_req & ~external_wr_ack & ~external_rd_ack) external_pending <= '1;
            else if(external_wr_ack | external_rd_ack) external_pending <= '0;
            `ifndef SYNTHESIS
                assert_bad_ext_wr_ack: assert(!external_wr_ack || (external_pending | external_req))
                    else $error("An external wr_ack strobe was asserted when no external request was active");
                assert_bad_ext_rd_ack: assert(!external_rd_ack || (external_pending | external_req))
                    else $error("An external rd_ack strobe was asserted when no external request was active");
            `endif
        end
    end

    // Read & write latencies are balanced. Stalls not required
    // except if external
    assign cpuif_req_stall_rd = external_pending;
    assign cpuif_req_stall_wr = external_pending;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic ext_reg;
        logic int_reg;
        logic [1:0] wide_ext_reg;
        logic ext_reg_array[32];
        logic rf;
        logic am;
        logic mm;
        logic ro_reg;
        logic wo_reg;
        logic [1:0] wide_ro_reg;
        logic [1:0] wide_wo_reg;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_strb_is_external;

    logic [14:0] decoded_addr;

    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        automatic logic is_external;
        is_external = '0;
        decoded_reg_strb.ext_reg = cpuif_req_masked & (cpuif_addr == 15'h0);
        is_external |= cpuif_req_masked & (cpuif_addr == 15'h0);
        decoded_reg_strb.int_reg = cpuif_req_masked & (cpuif_addr == 15'h4);
        decoded_reg_strb.wide_ext_reg[0] = cpuif_req_masked & (cpuif_addr == 15'h10);
        is_external |= cpuif_req_masked & (cpuif_addr == 15'h10);
        decoded_reg_strb.wide_ext_reg[1] = cpuif_req_masked & (cpuif_addr == 15'h14);
        is_external |= cpuif_req_masked & (cpuif_addr == 15'h14);
        for(int i0=0; i0<32; i0++) begin
            decoded_reg_strb.ext_reg_array[i0] = cpuif_req_masked & (cpuif_addr == 15'h100 + (15)'(i0) * 15'h4);
            is_external |= cpuif_req_masked & (cpuif_addr == 15'h100 + (15)'(i0) * 15'h4);
        end
        decoded_reg_strb.rf = cpuif_req_masked & (cpuif_addr >= 15'h1000) & (cpuif_addr <= 15'h1000 + 15'h1f);
        is_external |= cpuif_req_masked & (cpuif_addr >= 15'h1000) & (cpuif_addr <= 15'h1000 + 15'h1f);
        decoded_reg_strb.am = cpuif_req_masked & (cpuif_addr >= 15'h2000) & (cpuif_addr <= 15'h2000 + 15'h1f);
        is_external |= cpuif_req_masked & (cpuif_addr >= 15'h2000) & (cpuif_addr <= 15'h2000 + 15'h1f);
        decoded_reg_strb.mm = cpuif_req_masked & (cpuif_addr >= 15'h3000) & (cpuif_addr <= 15'h3000 + 15'h1f);
        is_external |= cpuif_req_masked & (cpuif_addr >= 15'h3000) & (cpuif_addr <= 15'h3000 + 15'h1f);
        decoded_reg_strb.ro_reg = cpuif_req_masked & (cpuif_addr == 15'h4000);
        is_external |= cpuif_req_masked & (cpuif_addr == 15'h4000) & !cpuif_req_is_wr;
        decoded_reg_strb.wo_reg = cpuif_req_masked & (cpuif_addr == 15'h4004);
        is_external |= cpuif_req_masked & (cpuif_addr == 15'h4004) & cpuif_req_is_wr;
        decoded_reg_strb.wide_ro_reg[0] = cpuif_req_masked & (cpuif_addr == 15'h4010);
        is_external |= cpuif_req_masked & (cpuif_addr == 15'h4010) & !cpuif_req_is_wr;
        decoded_reg_strb.wide_ro_reg[1] = cpuif_req_masked & (cpuif_addr == 15'h4014);
        is_external |= cpuif_req_masked & (cpuif_addr == 15'h4014) & !cpuif_req_is_wr;
        decoded_reg_strb.wide_wo_reg[0] = cpuif_req_masked & (cpuif_addr == 15'h4018);
        is_external |= cpuif_req_masked & (cpuif_addr == 15'h4018) & cpuif_req_is_wr;
        decoded_reg_strb.wide_wo_reg[1] = cpuif_req_masked & (cpuif_addr == 15'h401c);
        is_external |= cpuif_req_masked & (cpuif_addr == 15'h401c) & cpuif_req_is_wr;
        decoded_strb_is_external = is_external;
        external_req = is_external;
    end

    // Pass down signals to next stage
    assign decoded_addr = cpuif_addr;

    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } whatever;
        } int_reg;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic [31:0] value;
            } whatever;
        } int_reg;
    } field_storage_t;
    field_storage_t field_storage;


    assign hwif_out.ext_reg.req = decoded_reg_strb.ext_reg;
    assign hwif_out.ext_reg.req_is_wr = decoded_req_is_wr;
    assign hwif_out.ext_reg.wr_data = decoded_wr_data;
    assign hwif_out.ext_reg.wr_biten = decoded_wr_biten;
    // Field: regblock.int_reg.whatever
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.int_reg.whatever.value;
        load_next_c = '0;
        if(decoded_reg_strb.int_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.int_reg.whatever.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.int_reg.whatever.next = next_c;
        field_combo.int_reg.whatever.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.int_reg.whatever.value <= 32'h0;
        end else begin
            if(field_combo.int_reg.whatever.load_next) begin
                field_storage.int_reg.whatever.value <= field_combo.int_reg.whatever.next;
            end
        end
    end
    assign hwif_out.int_reg.whatever.value = field_storage.int_reg.whatever.value;

    assign hwif_out.wide_ext_reg.req = decoded_reg_strb.wide_ext_reg;
    assign hwif_out.wide_ext_reg.req_is_wr = decoded_req_is_wr;
    assign hwif_out.wide_ext_reg.wr_data = decoded_wr_data;
    assign hwif_out.wide_ext_reg.wr_biten = decoded_wr_biten;
    for(genvar i0=0; i0<32; i0++) begin

        assign hwif_out.ext_reg_array[i0].req = decoded_reg_strb.ext_reg_array[i0];
        assign hwif_out.ext_reg_array[i0].req_is_wr = decoded_req_is_wr;
        assign hwif_out.ext_reg_array[i0].wr_data = decoded_wr_data;
        assign hwif_out.ext_reg_array[i0].wr_biten = decoded_wr_biten;
    end
    assign hwif_out.rf.req = decoded_reg_strb.rf;
    assign hwif_out.rf.addr = decoded_addr[4:0];
    assign hwif_out.rf.req_is_wr = decoded_req_is_wr;
    assign hwif_out.rf.wr_data = decoded_wr_data;
    assign hwif_out.rf.wr_biten = decoded_wr_biten;
    assign hwif_out.am.req = decoded_reg_strb.am;
    assign hwif_out.am.addr = decoded_addr[4:0];
    assign hwif_out.am.req_is_wr = decoded_req_is_wr;
    assign hwif_out.am.wr_data = decoded_wr_data;
    assign hwif_out.am.wr_biten = decoded_wr_biten;
    assign hwif_out.mm.req = decoded_reg_strb.mm;
    assign hwif_out.mm.addr = decoded_addr[4:0];
    assign hwif_out.mm.req_is_wr = decoded_req_is_wr;
    assign hwif_out.mm.wr_data = decoded_wr_data;
    assign hwif_out.mm.wr_biten = decoded_wr_biten;

    assign hwif_out.ro_reg.req = !decoded_req_is_wr ? decoded_reg_strb.ro_reg : '0;
    assign hwif_out.ro_reg.req_is_wr = decoded_req_is_wr;

    assign hwif_out.wo_reg.req = decoded_req_is_wr ? decoded_reg_strb.wo_reg : '0;
    assign hwif_out.wo_reg.req_is_wr = decoded_req_is_wr;
    assign hwif_out.wo_reg.wr_data = decoded_wr_data;
    assign hwif_out.wo_reg.wr_biten = decoded_wr_biten;

    assign hwif_out.wide_ro_reg.req = !decoded_req_is_wr ? decoded_reg_strb.wide_ro_reg : '0;
    assign hwif_out.wide_ro_reg.req_is_wr = decoded_req_is_wr;

    assign hwif_out.wide_wo_reg.req = decoded_req_is_wr ? decoded_reg_strb.wide_wo_reg : '0;
    assign hwif_out.wide_wo_reg.req_is_wr = decoded_req_is_wr;
    assign hwif_out.wide_wo_reg.wr_data = decoded_wr_data;
    assign hwif_out.wide_wo_reg.wr_biten = decoded_wr_biten;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    always_comb begin
        automatic logic wr_ack;
        wr_ack = '0;
        wr_ack |= hwif_in.ext_reg.wr_ack;
        wr_ack |= hwif_in.wide_ext_reg.wr_ack;
        for(int i0=0; i0<32; i0++) begin
            wr_ack |= hwif_in.ext_reg_array[i0].wr_ack;
        end
        wr_ack |= hwif_in.rf.wr_ack;
        wr_ack |= hwif_in.am.wr_ack;
        wr_ack |= hwif_in.mm.wr_ack;
        wr_ack |= hwif_in.wo_reg.wr_ack;
        wr_ack |= hwif_in.wide_wo_reg.wr_ack;
        external_wr_ack = wr_ack;
    end
    assign cpuif_wr_ack = external_wr_ack | (decoded_req & decoded_req_is_wr & ~decoded_strb_is_external);
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_external_rd_ack_c;
    always_comb begin
        automatic logic rd_ack;
        rd_ack = '0;
        rd_ack |= hwif_in.ext_reg.rd_ack;
        rd_ack |= hwif_in.wide_ext_reg.rd_ack;
        for(int i0=0; i0<32; i0++) begin
            rd_ack |= hwif_in.ext_reg_array[i0].rd_ack;
        end
        rd_ack |= hwif_in.rf.rd_ack;
        rd_ack |= hwif_in.am.rd_ack;
        rd_ack |= hwif_in.mm.rd_ack;
        rd_ack |= hwif_in.ro_reg.rd_ack;
        rd_ack |= hwif_in.wide_ro_reg.rd_ack;
        readback_external_rd_ack_c = rd_ack;
    end

    logic readback_external_rd_ack;

    assign readback_external_rd_ack = readback_external_rd_ack_c;

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[40];
    assign readback_array[0] = hwif_in.ext_reg.rd_ack ? hwif_in.ext_reg.rd_data : '0;
    assign readback_array[1][31:0] = (decoded_reg_strb.int_reg && !decoded_req_is_wr) ? field_storage.int_reg.whatever.value : '0;
    assign readback_array[2] = hwif_in.wide_ext_reg.rd_ack ? hwif_in.wide_ext_reg.rd_data : '0;
    for(genvar i0=0; i0<32; i0++) begin
        assign readback_array[i0 * 1 + 3] = hwif_in.ext_reg_array[i0].rd_ack ? hwif_in.ext_reg_array[i0].rd_data : '0;
    end
    assign readback_array[35] = hwif_in.rf.rd_ack ? hwif_in.rf.rd_data : '0;
    assign readback_array[36] = hwif_in.am.rd_ack ? hwif_in.am.rd_data : '0;
    assign readback_array[37] = hwif_in.mm.rd_ack ? hwif_in.mm.rd_data : '0;
    assign readback_array[38] = hwif_in.ro_reg.rd_ack ? hwif_in.ro_reg.rd_data : '0;
    assign readback_array[39] = hwif_in.wide_ro_reg.rd_ack ? hwif_in.wide_ro_reg.rd_data : '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr & ~decoded_strb_is_external;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<40; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign external_rd_ack = readback_external_rd_ack;
    assign cpuif_rd_ack = readback_done | readback_external_rd_ack;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
