// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock
//
// This is a wrapper module that flattens the hwif structs into individual signals

module regblock_wrapper (
        input wire clk,
        input wire rst,

        input wire s_apb_psel,
        input wire s_apb_penable,
        input wire s_apb_pwrite,
        input wire [2:0] s_apb_pprot,
        input wire [14:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,

        input logic hwif_in_ext_reg_rd_ack,
        input logic [15:0] hwif_in_ext_reg_rd_data__reserved_31_16,
        input logic [7:0] hwif_in_ext_reg_rd_data_whatever_c,
        input logic [3:0] hwif_in_ext_reg_rd_data__reserved_7_4,
        input logic [1:0] hwif_in_ext_reg_rd_data_whatever_a,
        input logic [1:0] hwif_in_ext_reg_rd_data__reserved_1_0,
        input logic hwif_in_ext_reg_wr_ack,
        input logic hwif_in_wide_ext_reg_rd_ack,
        input logic [31:0] hwif_in_wide_ext_reg_rd_data,
        input logic hwif_in_wide_ext_reg_wr_ack,
        input logic [31:0] hwif_in_ext_reg_array_rd_ack,
        input logic [31:0] [31:0] hwif_in_ext_reg_array_rd_data_whatever,
        input logic [31:0] hwif_in_ext_reg_array_wr_ack,
        input logic hwif_in_rf_rd_ack,
        input logic [31:0] hwif_in_rf_rd_data,
        input logic hwif_in_rf_wr_ack,
        input logic hwif_in_am_rd_ack,
        input logic [31:0] hwif_in_am_rd_data,
        input logic hwif_in_am_wr_ack,
        input logic hwif_in_mm_rd_ack,
        input logic [31:0] hwif_in_mm_rd_data,
        input logic hwif_in_mm_wr_ack,
        input logic hwif_in_ro_reg_rd_ack,
        input logic [31:0] hwif_in_ro_reg_rd_data_whatever,
        input logic hwif_in_wo_reg_wr_ack,
        input logic hwif_in_wide_ro_reg_rd_ack,
        input logic [31:0] hwif_in_wide_ro_reg_rd_data,
        input logic hwif_in_wide_wo_reg_wr_ack,
        output logic hwif_out_ext_reg_req,
        output logic hwif_out_ext_reg_req_is_wr,
        output logic [15:0] hwif_out_ext_reg_wr_data__reserved_31_16,
        output logic [7:0] hwif_out_ext_reg_wr_data_whatever_c,
        output logic [2:0] hwif_out_ext_reg_wr_data__reserved_7_5,
        output logic hwif_out_ext_reg_wr_data_whatever_b,
        output logic [3:0] hwif_out_ext_reg_wr_data__reserved_3_0,
        output logic [15:0] hwif_out_ext_reg_wr_biten__reserved_31_16,
        output logic [7:0] hwif_out_ext_reg_wr_biten_whatever_c,
        output logic [2:0] hwif_out_ext_reg_wr_biten__reserved_7_5,
        output logic hwif_out_ext_reg_wr_biten_whatever_b,
        output logic [3:0] hwif_out_ext_reg_wr_biten__reserved_3_0,
        output logic [31:0] hwif_out_int_reg_whatever,
        output logic [1:0] hwif_out_wide_ext_reg_req,
        output logic hwif_out_wide_ext_reg_req_is_wr,
        output logic [31:0] hwif_out_wide_ext_reg_wr_data,
        output logic [31:0] hwif_out_wide_ext_reg_wr_biten,
        output logic [31:0] hwif_out_ext_reg_array_req,
        output logic [31:0] hwif_out_ext_reg_array_req_is_wr,
        output logic [31:0] [31:0] hwif_out_ext_reg_array_wr_data_whatever,
        output logic [31:0] [31:0] hwif_out_ext_reg_array_wr_biten_whatever,
        output logic hwif_out_rf_req,
        output logic [4:0] hwif_out_rf_addr,
        output logic hwif_out_rf_req_is_wr,
        output logic [31:0] hwif_out_rf_wr_data,
        output logic [31:0] hwif_out_rf_wr_biten,
        output logic hwif_out_am_req,
        output logic [4:0] hwif_out_am_addr,
        output logic hwif_out_am_req_is_wr,
        output logic [31:0] hwif_out_am_wr_data,
        output logic [31:0] hwif_out_am_wr_biten,
        output logic hwif_out_mm_req,
        output logic [4:0] hwif_out_mm_addr,
        output logic hwif_out_mm_req_is_wr,
        output logic [31:0] hwif_out_mm_wr_data,
        output logic [31:0] hwif_out_mm_wr_biten,
        output logic hwif_out_ro_reg_req,
        output logic hwif_out_ro_reg_req_is_wr,
        output logic hwif_out_wo_reg_req,
        output logic hwif_out_wo_reg_req_is_wr,
        output logic [31:0] hwif_out_wo_reg_wr_data_whatever,
        output logic [31:0] hwif_out_wo_reg_wr_biten_whatever,
        output logic [1:0] hwif_out_wide_ro_reg_req,
        output logic hwif_out_wide_ro_reg_req_is_wr,
        output logic [1:0] hwif_out_wide_wo_reg_req,
        output logic hwif_out_wide_wo_reg_req_is_wr,
        output logic [31:0] hwif_out_wide_wo_reg_wr_data,
        output logic [31:0] hwif_out_wide_wo_reg_wr_biten
    );

    //--------------------------------------------------------------------------
    // Internal hwif struct signals
    //--------------------------------------------------------------------------
    regblock_pkg::regblock__in_t hwif_in;
    regblock_pkg::regblock__out_t hwif_out;

    //--------------------------------------------------------------------------
    // Flatten struct to individual signals
    //--------------------------------------------------------------------------
    assign hwif_in.ext_reg.rd_ack = hwif_in_ext_reg_rd_ack;
    assign hwif_in.ext_reg.rd_data._reserved_31_16 = hwif_in_ext_reg_rd_data__reserved_31_16;
    assign hwif_in.ext_reg.rd_data.whatever_c = hwif_in_ext_reg_rd_data_whatever_c;
    assign hwif_in.ext_reg.rd_data._reserved_7_4 = hwif_in_ext_reg_rd_data__reserved_7_4;
    assign hwif_in.ext_reg.rd_data.whatever_a = hwif_in_ext_reg_rd_data_whatever_a;
    assign hwif_in.ext_reg.rd_data._reserved_1_0 = hwif_in_ext_reg_rd_data__reserved_1_0;
    assign hwif_in.ext_reg.wr_ack = hwif_in_ext_reg_wr_ack;
    assign hwif_in.wide_ext_reg.rd_ack = hwif_in_wide_ext_reg_rd_ack;
    assign hwif_in.wide_ext_reg.rd_data = hwif_in_wide_ext_reg_rd_data;
    assign hwif_in.wide_ext_reg.wr_ack = hwif_in_wide_ext_reg_wr_ack;
    generate
        for (genvar i = 0; i <= 31; i++) begin
            assign hwif_in.ext_reg_array[i].rd_ack = hwif_in_ext_reg_array_rd_ack[i];
        end
    endgenerate
    generate
        for (genvar i = 0; i <= 31; i++) begin
            assign hwif_in.ext_reg_array[i].rd_data.whatever = hwif_in_ext_reg_array_rd_data_whatever[i];
        end
    endgenerate
    generate
        for (genvar i = 0; i <= 31; i++) begin
            assign hwif_in.ext_reg_array[i].wr_ack = hwif_in_ext_reg_array_wr_ack[i];
        end
    endgenerate
    assign hwif_in.rf.rd_ack = hwif_in_rf_rd_ack;
    assign hwif_in.rf.rd_data = hwif_in_rf_rd_data;
    assign hwif_in.rf.wr_ack = hwif_in_rf_wr_ack;
    assign hwif_in.am.rd_ack = hwif_in_am_rd_ack;
    assign hwif_in.am.rd_data = hwif_in_am_rd_data;
    assign hwif_in.am.wr_ack = hwif_in_am_wr_ack;
    assign hwif_in.mm.rd_ack = hwif_in_mm_rd_ack;
    assign hwif_in.mm.rd_data = hwif_in_mm_rd_data;
    assign hwif_in.mm.wr_ack = hwif_in_mm_wr_ack;
    assign hwif_in.ro_reg.rd_ack = hwif_in_ro_reg_rd_ack;
    assign hwif_in.ro_reg.rd_data.whatever = hwif_in_ro_reg_rd_data_whatever;
    assign hwif_in.wo_reg.wr_ack = hwif_in_wo_reg_wr_ack;
    assign hwif_in.wide_ro_reg.rd_ack = hwif_in_wide_ro_reg_rd_ack;
    assign hwif_in.wide_ro_reg.rd_data = hwif_in_wide_ro_reg_rd_data;
    assign hwif_in.wide_wo_reg.wr_ack = hwif_in_wide_wo_reg_wr_ack;
    assign hwif_out_ext_reg_req = hwif_out.ext_reg.req;
    assign hwif_out_ext_reg_req_is_wr = hwif_out.ext_reg.req_is_wr;
    assign hwif_out_ext_reg_wr_data__reserved_31_16 = hwif_out.ext_reg.wr_data._reserved_31_16;
    assign hwif_out_ext_reg_wr_data_whatever_c = hwif_out.ext_reg.wr_data.whatever_c;
    assign hwif_out_ext_reg_wr_data__reserved_7_5 = hwif_out.ext_reg.wr_data._reserved_7_5;
    assign hwif_out_ext_reg_wr_data_whatever_b = hwif_out.ext_reg.wr_data.whatever_b;
    assign hwif_out_ext_reg_wr_data__reserved_3_0 = hwif_out.ext_reg.wr_data._reserved_3_0;
    assign hwif_out_ext_reg_wr_biten__reserved_31_16 = hwif_out.ext_reg.wr_biten._reserved_31_16;
    assign hwif_out_ext_reg_wr_biten_whatever_c = hwif_out.ext_reg.wr_biten.whatever_c;
    assign hwif_out_ext_reg_wr_biten__reserved_7_5 = hwif_out.ext_reg.wr_biten._reserved_7_5;
    assign hwif_out_ext_reg_wr_biten_whatever_b = hwif_out.ext_reg.wr_biten.whatever_b;
    assign hwif_out_ext_reg_wr_biten__reserved_3_0 = hwif_out.ext_reg.wr_biten._reserved_3_0;
    assign hwif_out_int_reg_whatever = hwif_out.int_reg.whatever.value;
    assign hwif_out_wide_ext_reg_req = hwif_out.wide_ext_reg.req;
    assign hwif_out_wide_ext_reg_req_is_wr = hwif_out.wide_ext_reg.req_is_wr;
    assign hwif_out_wide_ext_reg_wr_data = hwif_out.wide_ext_reg.wr_data;
    assign hwif_out_wide_ext_reg_wr_biten = hwif_out.wide_ext_reg.wr_biten;
    generate
        for (genvar i = 0; i <= 31; i++) begin
            assign hwif_out_ext_reg_array_req[i] = hwif_out.ext_reg_array[i].req;
        end
    endgenerate
    generate
        for (genvar i = 0; i <= 31; i++) begin
            assign hwif_out_ext_reg_array_req_is_wr[i] = hwif_out.ext_reg_array[i].req_is_wr;
        end
    endgenerate
    generate
        for (genvar i = 0; i <= 31; i++) begin
            assign hwif_out_ext_reg_array_wr_data_whatever[i] = hwif_out.ext_reg_array[i].wr_data.whatever;
        end
    endgenerate
    generate
        for (genvar i = 0; i <= 31; i++) begin
            assign hwif_out_ext_reg_array_wr_biten_whatever[i] = hwif_out.ext_reg_array[i].wr_biten.whatever;
        end
    endgenerate
    assign hwif_out_rf_req = hwif_out.rf.req;
    assign hwif_out_rf_addr = hwif_out.rf.addr;
    assign hwif_out_rf_req_is_wr = hwif_out.rf.req_is_wr;
    assign hwif_out_rf_wr_data = hwif_out.rf.wr_data;
    assign hwif_out_rf_wr_biten = hwif_out.rf.wr_biten;
    assign hwif_out_am_req = hwif_out.am.req;
    assign hwif_out_am_addr = hwif_out.am.addr;
    assign hwif_out_am_req_is_wr = hwif_out.am.req_is_wr;
    assign hwif_out_am_wr_data = hwif_out.am.wr_data;
    assign hwif_out_am_wr_biten = hwif_out.am.wr_biten;
    assign hwif_out_mm_req = hwif_out.mm.req;
    assign hwif_out_mm_addr = hwif_out.mm.addr;
    assign hwif_out_mm_req_is_wr = hwif_out.mm.req_is_wr;
    assign hwif_out_mm_wr_data = hwif_out.mm.wr_data;
    assign hwif_out_mm_wr_biten = hwif_out.mm.wr_biten;
    assign hwif_out_ro_reg_req = hwif_out.ro_reg.req;
    assign hwif_out_ro_reg_req_is_wr = hwif_out.ro_reg.req_is_wr;
    assign hwif_out_wo_reg_req = hwif_out.wo_reg.req;
    assign hwif_out_wo_reg_req_is_wr = hwif_out.wo_reg.req_is_wr;
    assign hwif_out_wo_reg_wr_data_whatever = hwif_out.wo_reg.wr_data.whatever;
    assign hwif_out_wo_reg_wr_biten_whatever = hwif_out.wo_reg.wr_biten.whatever;
    assign hwif_out_wide_ro_reg_req = hwif_out.wide_ro_reg.req;
    assign hwif_out_wide_ro_reg_req_is_wr = hwif_out.wide_ro_reg.req_is_wr;
    assign hwif_out_wide_wo_reg_req = hwif_out.wide_wo_reg.req;
    assign hwif_out_wide_wo_reg_req_is_wr = hwif_out.wide_wo_reg.req_is_wr;
    assign hwif_out_wide_wo_reg_wr_data = hwif_out.wide_wo_reg.wr_data;
    assign hwif_out_wide_wo_reg_wr_biten = hwif_out.wide_wo_reg.wr_biten;

    //--------------------------------------------------------------------------
    // Instantiate the main regblock module
    //--------------------------------------------------------------------------
    regblock i_regblock (
        .clk(clk),
        .rst(rst),

        .s_apb_psel(s_apb_psel),
        .s_apb_penable(s_apb_penable),
        .s_apb_pwrite(s_apb_pwrite),
        .s_apb_pprot(s_apb_pprot),
        .s_apb_paddr(s_apb_paddr),
        .s_apb_pwdata(s_apb_pwdata),
        .s_apb_pstrb(s_apb_pstrb),
        .s_apb_pready(s_apb_pready),
        .s_apb_prdata(s_apb_prdata),
        .s_apb_pslverr(s_apb_pslverr),
        .hwif_in(hwif_in),
        .hwif_out(hwif_out)
    );

endmodule
