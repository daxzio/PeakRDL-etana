// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock
//
// This is a wrapper module that flattens the hwif structs into individual signals

module regblock_wrapper (
        input wire clk,
        input wire rst,

        input wire s_apb_psel,
        input wire s_apb_penable,
        input wire s_apb_pwrite,
        input wire [2:0] s_apb_pprot,
        input wire [3:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,

        input logic hwif_in_threshold_via_bool_count_incr,
        input logic hwif_in_threshold_via_bool_count_decr,
        input logic hwif_in_threshold_via_const_count_incr,
        input logic hwif_in_threshold_via_const_count_decr,
        input logic hwif_in_threshold_via_ref_count_incr,
        input logic hwif_in_threshold_via_ref_count_decr,
        output logic [3:0] hwif_out_threshold_via_bool_count,
        output logic hwif_out_threshold_via_bool_count_incrthreshold,
        output logic hwif_out_threshold_via_bool_count_decrthreshold,
        output logic [3:0] hwif_out_threshold_via_const_count,
        output logic hwif_out_threshold_via_const_count_incrthreshold,
        output logic hwif_out_threshold_via_const_count_decrthreshold,
        output logic [3:0] hwif_out_threshold_via_ref_count,
        output logic hwif_out_threshold_via_ref_count_incrthreshold,
        output logic hwif_out_threshold_via_ref_count_decrthreshold
    );

    //--------------------------------------------------------------------------
    // Internal hwif struct signals
    //--------------------------------------------------------------------------
    regblock_pkg::regblock__in_t hwif_in;
    regblock_pkg::regblock__out_t hwif_out;

    //--------------------------------------------------------------------------
    // Flatten struct to individual signals
    //--------------------------------------------------------------------------
    assign hwif_in.threshold_via_bool.count.incr = hwif_in_threshold_via_bool_count_incr;
    assign hwif_in.threshold_via_bool.count.decr = hwif_in_threshold_via_bool_count_decr;
    assign hwif_in.threshold_via_const.count.incr = hwif_in_threshold_via_const_count_incr;
    assign hwif_in.threshold_via_const.count.decr = hwif_in_threshold_via_const_count_decr;
    assign hwif_in.threshold_via_ref.count.incr = hwif_in_threshold_via_ref_count_incr;
    assign hwif_in.threshold_via_ref.count.decr = hwif_in_threshold_via_ref_count_decr;
    assign hwif_out_threshold_via_bool_count = hwif_out.threshold_via_bool.count.value;
    assign hwif_out_threshold_via_bool_count_incrthreshold = hwif_out.threshold_via_bool.count.incrthreshold;
    assign hwif_out_threshold_via_bool_count_decrthreshold = hwif_out.threshold_via_bool.count.decrthreshold;
    assign hwif_out_threshold_via_const_count = hwif_out.threshold_via_const.count.value;
    assign hwif_out_threshold_via_const_count_incrthreshold = hwif_out.threshold_via_const.count.incrthreshold;
    assign hwif_out_threshold_via_const_count_decrthreshold = hwif_out.threshold_via_const.count.decrthreshold;
    assign hwif_out_threshold_via_ref_count = hwif_out.threshold_via_ref.count.value;
    assign hwif_out_threshold_via_ref_count_incrthreshold = hwif_out.threshold_via_ref.count.incrthreshold;
    assign hwif_out_threshold_via_ref_count_decrthreshold = hwif_out.threshold_via_ref.count.decrthreshold;

    //--------------------------------------------------------------------------
    // Instantiate the main regblock module
    //--------------------------------------------------------------------------
    regblock i_regblock (
        .clk(clk),
        .rst(rst),

        .s_apb_psel(s_apb_psel),
        .s_apb_penable(s_apb_penable),
        .s_apb_pwrite(s_apb_pwrite),
        .s_apb_pprot(s_apb_pprot),
        .s_apb_paddr(s_apb_paddr),
        .s_apb_pwdata(s_apb_pwdata),
        .s_apb_pstrb(s_apb_pstrb),
        .s_apb_pready(s_apb_pready),
        .s_apb_prdata(s_apb_prdata),
        .s_apb_pslverr(s_apb_pslverr),
        .hwif_in(hwif_in),
        .hwif_out(hwif_out)
    );

endmodule
