/* Generated by Yosys 0.57 (git sha1 3aca86049, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3) */

module regblock(clk, rst, s_apb_psel, s_apb_pwrite, s_apb_penable, s_apb_pprot, s_apb_paddr, s_apb_pwdata, s_apb_pstrb, s_apb_pready, s_apb_prdata, s_apb_pslverr, hwif_out_threshold_via_bool_intr, hwif_out_threshold_via_bool_count, hwif_out_threshold_via_bool_count_incrthreshold, hwif_out_threshold_via_bool_count_decrthreshold, hwif_in_threshold_via_bool_count_incr, hwif_in_threshold_via_bool_count_decr, hwif_out_threshold_via_const_intr, hwif_out_threshold_via_const_count, hwif_out_threshold_via_const_count_incrthreshold
, hwif_out_threshold_via_const_count_decrthreshold, hwif_in_threshold_via_const_count_incr, hwif_in_threshold_via_const_count_decr, hwif_out_threshold_via_ref_intr, hwif_out_threshold_via_ref_count, hwif_out_threshold_via_ref_count_incrthreshold, hwif_out_threshold_via_ref_count_decrthreshold, hwif_in_threshold_via_ref_count_incr, hwif_in_threshold_via_ref_count_decr, hwif_out_threshold_control_intr);
  input clk;
  wire clk;
  input rst;
  wire rst;
  input s_apb_psel;
  wire s_apb_psel;
  input s_apb_pwrite;
  wire s_apb_pwrite;
  input s_apb_penable;
  wire s_apb_penable;
  input [2:0] s_apb_pprot;
  wire [2:0] s_apb_pprot;
  input [3:0] s_apb_paddr;
  wire [3:0] s_apb_paddr;
  input [31:0] s_apb_pwdata;
  wire [31:0] s_apb_pwdata;
  input [3:0] s_apb_pstrb;
  wire [3:0] s_apb_pstrb;
  output s_apb_pready;
  wire s_apb_pready;
  output [31:0] s_apb_prdata;
  wire [31:0] s_apb_prdata;
  output s_apb_pslverr;
  wire s_apb_pslverr;
  output [0:0] hwif_out_threshold_via_bool_intr;
  wire [0:0] hwif_out_threshold_via_bool_intr;
  output [3:0] hwif_out_threshold_via_bool_count;
  wire [3:0] hwif_out_threshold_via_bool_count;
  output [0:0] hwif_out_threshold_via_bool_count_incrthreshold;
  wire [0:0] hwif_out_threshold_via_bool_count_incrthreshold;
  output [0:0] hwif_out_threshold_via_bool_count_decrthreshold;
  wire [0:0] hwif_out_threshold_via_bool_count_decrthreshold;
  input [0:0] hwif_in_threshold_via_bool_count_incr;
  wire [0:0] hwif_in_threshold_via_bool_count_incr;
  input [0:0] hwif_in_threshold_via_bool_count_decr;
  wire [0:0] hwif_in_threshold_via_bool_count_decr;
  output [0:0] hwif_out_threshold_via_const_intr;
  wire [0:0] hwif_out_threshold_via_const_intr;
  output [3:0] hwif_out_threshold_via_const_count;
  wire [3:0] hwif_out_threshold_via_const_count;
  output [0:0] hwif_out_threshold_via_const_count_incrthreshold;
  wire [0:0] hwif_out_threshold_via_const_count_incrthreshold;
  output [0:0] hwif_out_threshold_via_const_count_decrthreshold;
  wire [0:0] hwif_out_threshold_via_const_count_decrthreshold;
  input [0:0] hwif_in_threshold_via_const_count_incr;
  wire [0:0] hwif_in_threshold_via_const_count_incr;
  input [0:0] hwif_in_threshold_via_const_count_decr;
  wire [0:0] hwif_in_threshold_via_const_count_decr;
  output [0:0] hwif_out_threshold_via_ref_intr;
  wire [0:0] hwif_out_threshold_via_ref_intr;
  output [3:0] hwif_out_threshold_via_ref_count;
  wire [3:0] hwif_out_threshold_via_ref_count;
  output [0:0] hwif_out_threshold_via_ref_count_incrthreshold;
  wire [0:0] hwif_out_threshold_via_ref_count_incrthreshold;
  output [0:0] hwif_out_threshold_via_ref_count_decrthreshold;
  wire [0:0] hwif_out_threshold_via_ref_count_decrthreshold;
  input [0:0] hwif_in_threshold_via_ref_count_incr;
  wire [0:0] hwif_in_threshold_via_ref_count_incr;
  input [0:0] hwif_in_threshold_via_ref_count_decr;
  wire [0:0] hwif_in_threshold_via_ref_count_decr;
  output [0:0] hwif_out_threshold_control_intr;
  wire [0:0] hwif_out_threshold_control_intr;
  wire [3:0] _000_;
  wire [3:0] _001_;
  wire [3:0] _002_;
  wire [3:0] _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire [1:0] _009_;
  wire [1:0] _010_;
  wire [1:0] _011_;
  wire [1:0] _012_;
  wire [1:0] _013_;
  wire [1:0] _014_;
  wire [1:0] _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire [3:0] _028_;
  wire [3:0] _029_;
  wire [3:0] _030_;
  wire [31:0] _031_;
  wire [31:0] _032_;
  wire _033_;
  wire _034_;
  wire [3:0] _035_;
  wire [3:0] _036_;
  wire [3:0] _037_;
  wire [3:0] _038_;
  wire [3:0] _039_;
  wire [3:0] _040_;
  wire [3:0] _041_;
  wire [3:0] _042_;
  wire [3:0] _043_;
  wire [3:0] _044_;
  wire [3:0] _045_;
  wire [3:0] _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire [3:0] _051_;
  wire [3:0] _052_;
  wire [3:0] _053_;
  wire [3:0] _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire [3:0] _059_;
  wire [3:0] _060_;
  wire _061_;
  wire _062_;
  wire [3:0] _063_;
  wire [3:0] _064_;
  wire _065_;
  wire _066_;
  wire [3:0] _067_;
  wire [3:0] _068_;
  wire [3:0] _069_;
  wire [3:0] _070_;
  wire _071_;
  wire _072_;
  wire [3:0] _073_;
  wire [3:0] _074_;
  wire [3:0] _075_;
  wire [3:0] _076_;
  wire [3:0] _077_;
  wire [3:0] _078_;
  wire [3:0] _079_;
  wire [3:0] _080_;
  wire [3:0] _081_;
  wire [3:0] _082_;
  wire [3:0] _083_;
  wire [3:0] _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire [3:0] cpuif_addr;
  wire cpuif_rd_ack;
  wire [31:0] cpuif_rd_data;
  wire cpuif_rd_err;
  reg cpuif_req;
  reg cpuif_req_is_wr;
  wire cpuif_req_masked;
  wire cpuif_req_stall_rd;
  wire cpuif_req_stall_wr;
  wire cpuif_wr_ack;
  wire [31:0] cpuif_wr_biten;
  wire [31:0] cpuif_wr_data;
  wire cpuif_wr_err;
  wire [0:0] decoded_reg_strb_threshold_control;
  wire [0:0] decoded_reg_strb_threshold_via_bool;
  wire [0:0] decoded_reg_strb_threshold_via_const;
  wire [0:0] decoded_reg_strb_threshold_via_ref;
  wire decoded_req;
  wire decoded_req_is_wr;
  wire [31:0] decoded_wr_biten;
  wire [31:0] decoded_wr_data;
  wire field_combo_threshold_control_max_load_next;
  wire field_combo_threshold_control_min_load_next;
  wire field_combo_threshold_via_bool_count_decrthreshold;
  wire field_combo_threshold_via_bool_count_incrthreshold;
  wire field_combo_threshold_via_bool_count_load_next;
  wire [3:0] field_combo_threshold_via_bool_count_next;
  wire field_combo_threshold_via_const_count_decrthreshold;
  wire field_combo_threshold_via_const_count_incrthreshold;
  wire field_combo_threshold_via_const_count_load_next;
  wire [3:0] field_combo_threshold_via_const_count_next;
  wire field_combo_threshold_via_ref_count_decrthreshold;
  wire field_combo_threshold_via_ref_count_incrthreshold;
  wire field_combo_threshold_via_ref_count_load_next;
  wire [3:0] field_combo_threshold_via_ref_count_next;
  reg [3:0] field_storage_threshold_control_max_value;
  reg [3:0] field_storage_threshold_control_min_value;
  reg [3:0] field_storage_threshold_via_bool_count_value;
  reg [3:0] field_storage_threshold_via_const_count_value;
  reg [3:0] field_storage_threshold_via_ref_count_value;
  reg is_active;
  wire [31:0] \readback_array[0] ;
  wire [31:0] \readback_array[1] ;
  wire [31:0] \readback_array[2] ;
  wire [31:0] \readback_array[3] ;
  wire [31:0] readback_data;
  wire readback_done;
  wire readback_err;
  wire readback_external_rd_ack;
  always @(posedge clk)
    if (rst) field_storage_threshold_control_min_value[0] <= 1'h0;
    else if (field_combo_threshold_control_max_load_next) field_storage_threshold_control_min_value[0] <= _029_[0];
  always @(posedge clk)
    if (rst) field_storage_threshold_control_min_value[1] <= 1'h0;
    else if (field_combo_threshold_control_max_load_next) field_storage_threshold_control_min_value[1] <= _029_[1];
  always @(posedge clk)
    if (rst) field_storage_threshold_control_min_value[2] <= 1'h1;
    else if (field_combo_threshold_control_max_load_next) field_storage_threshold_control_min_value[2] <= _029_[2];
  always @(posedge clk)
    if (rst) field_storage_threshold_control_min_value[3] <= 1'h0;
    else if (field_combo_threshold_control_max_load_next) field_storage_threshold_control_min_value[3] <= _029_[3];
  always @(posedge clk)
    if (rst) field_storage_threshold_control_max_value[0] <= 1'h1;
    else if (field_combo_threshold_control_max_load_next) field_storage_threshold_control_max_value[0] <= _030_[0];
  always @(posedge clk)
    if (rst) field_storage_threshold_control_max_value[1] <= 1'h1;
    else if (field_combo_threshold_control_max_load_next) field_storage_threshold_control_max_value[1] <= _030_[1];
  always @(posedge clk)
    if (rst) field_storage_threshold_control_max_value[2] <= 1'h0;
    else if (field_combo_threshold_control_max_load_next) field_storage_threshold_control_max_value[2] <= _030_[2];
  always @(posedge clk)
    if (rst) field_storage_threshold_control_max_value[3] <= 1'h1;
    else if (field_combo_threshold_control_max_load_next) field_storage_threshold_control_max_value[3] <= _030_[3];
  always @(posedge clk)
    if (rst) field_storage_threshold_via_ref_count_value[0] <= 1'h0;
    else if (field_combo_threshold_via_ref_count_load_next) field_storage_threshold_via_ref_count_value[0] <= field_combo_threshold_via_ref_count_next[0];
  always @(posedge clk)
    if (rst) field_storage_threshold_via_ref_count_value[1] <= 1'h0;
    else if (field_combo_threshold_via_ref_count_load_next) field_storage_threshold_via_ref_count_value[1] <= field_combo_threshold_via_ref_count_next[1];
  always @(posedge clk)
    if (rst) field_storage_threshold_via_ref_count_value[2] <= 1'h0;
    else if (field_combo_threshold_via_ref_count_load_next) field_storage_threshold_via_ref_count_value[2] <= field_combo_threshold_via_ref_count_next[2];
  always @(posedge clk)
    if (rst) field_storage_threshold_via_ref_count_value[3] <= 1'h0;
    else if (field_combo_threshold_via_ref_count_load_next) field_storage_threshold_via_ref_count_value[3] <= field_combo_threshold_via_ref_count_next[3];
  always @(posedge clk)
    if (rst) field_storage_threshold_via_const_count_value[0] <= 1'h0;
    else if (field_combo_threshold_via_const_count_load_next) field_storage_threshold_via_const_count_value[0] <= field_combo_threshold_via_const_count_next[0];
  always @(posedge clk)
    if (rst) field_storage_threshold_via_const_count_value[1] <= 1'h0;
    else if (field_combo_threshold_via_const_count_load_next) field_storage_threshold_via_const_count_value[1] <= field_combo_threshold_via_const_count_next[1];
  always @(posedge clk)
    if (rst) field_storage_threshold_via_const_count_value[2] <= 1'h0;
    else if (field_combo_threshold_via_const_count_load_next) field_storage_threshold_via_const_count_value[2] <= field_combo_threshold_via_const_count_next[2];
  always @(posedge clk)
    if (rst) field_storage_threshold_via_const_count_value[3] <= 1'h0;
    else if (field_combo_threshold_via_const_count_load_next) field_storage_threshold_via_const_count_value[3] <= field_combo_threshold_via_const_count_next[3];
  always @(posedge clk)
    if (rst) field_storage_threshold_via_bool_count_value[0] <= 1'h0;
    else if (field_combo_threshold_via_bool_count_load_next) field_storage_threshold_via_bool_count_value[0] <= field_combo_threshold_via_bool_count_next[0];
  always @(posedge clk)
    if (rst) field_storage_threshold_via_bool_count_value[1] <= 1'h0;
    else if (field_combo_threshold_via_bool_count_load_next) field_storage_threshold_via_bool_count_value[1] <= field_combo_threshold_via_bool_count_next[1];
  always @(posedge clk)
    if (rst) field_storage_threshold_via_bool_count_value[2] <= 1'h0;
    else if (field_combo_threshold_via_bool_count_load_next) field_storage_threshold_via_bool_count_value[2] <= field_combo_threshold_via_bool_count_next[2];
  always @(posedge clk)
    if (rst) field_storage_threshold_via_bool_count_value[3] <= 1'h0;
    else if (field_combo_threshold_via_bool_count_load_next) field_storage_threshold_via_bool_count_value[3] <= field_combo_threshold_via_bool_count_next[3];
  always @(posedge clk)
    if (_005_) cpuif_req <= 1'h0;
    else if (s_apb_psel) cpuif_req <= 1'h1;
  always @(posedge clk)
    if (rst) cpuif_req_is_wr <= 1'h0;
    else if (_004_) cpuif_req_is_wr <= s_apb_pwrite;
  reg \cpuif_wr_data_reg[0] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[0]  <= 1'h0;
    else if (_004_) \cpuif_wr_data_reg[0]  <= s_apb_pwdata[0];
  assign cpuif_wr_data[0] = \cpuif_wr_data_reg[0] ;
  reg \cpuif_wr_data_reg[1] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[1]  <= 1'h0;
    else if (_004_) \cpuif_wr_data_reg[1]  <= s_apb_pwdata[1];
  assign cpuif_wr_data[1] = \cpuif_wr_data_reg[1] ;
  reg \cpuif_wr_data_reg[2] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[2]  <= 1'h0;
    else if (_004_) \cpuif_wr_data_reg[2]  <= s_apb_pwdata[2];
  assign cpuif_wr_data[2] = \cpuif_wr_data_reg[2] ;
  reg \cpuif_wr_data_reg[3] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[3]  <= 1'h0;
    else if (_004_) \cpuif_wr_data_reg[3]  <= s_apb_pwdata[3];
  assign cpuif_wr_data[3] = \cpuif_wr_data_reg[3] ;
  reg \cpuif_wr_data_reg[4] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[4]  <= 1'h0;
    else if (_004_) \cpuif_wr_data_reg[4]  <= s_apb_pwdata[4];
  assign cpuif_wr_data[4] = \cpuif_wr_data_reg[4] ;
  reg \cpuif_wr_data_reg[5] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[5]  <= 1'h0;
    else if (_004_) \cpuif_wr_data_reg[5]  <= s_apb_pwdata[5];
  assign cpuif_wr_data[5] = \cpuif_wr_data_reg[5] ;
  reg \cpuif_wr_data_reg[6] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[6]  <= 1'h0;
    else if (_004_) \cpuif_wr_data_reg[6]  <= s_apb_pwdata[6];
  assign cpuif_wr_data[6] = \cpuif_wr_data_reg[6] ;
  reg \cpuif_wr_data_reg[7] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_data_reg[7]  <= 1'h0;
    else if (_004_) \cpuif_wr_data_reg[7]  <= s_apb_pwdata[7];
  assign cpuif_wr_data[7] = \cpuif_wr_data_reg[7] ;
  reg \cpuif_wr_biten_reg[6] ;
  always @(posedge clk)
    if (rst) \cpuif_wr_biten_reg[6]  <= 1'h0;
    else if (_004_) \cpuif_wr_biten_reg[6]  <= s_apb_pstrb[0];
  assign cpuif_wr_biten[6] = \cpuif_wr_biten_reg[6] ;
  reg \cpuif_addr_reg[2] ;
  always @(posedge clk)
    if (rst) \cpuif_addr_reg[2]  <= 1'h0;
    else if (_004_) \cpuif_addr_reg[2]  <= s_apb_paddr[2];
  assign cpuif_addr[2] = \cpuif_addr_reg[2] ;
  reg \cpuif_addr_reg[3] ;
  always @(posedge clk)
    if (rst) \cpuif_addr_reg[3]  <= 1'h0;
    else if (_004_) \cpuif_addr_reg[3]  <= s_apb_paddr[3];
  assign cpuif_addr[3] = \cpuif_addr_reg[3] ;
  always @(posedge clk)
    if (rst) is_active <= 1'h0;
    else is_active <= _034_;
  assign _008_ = ~cpuif_addr[3];
  assign _007_ = ~cpuif_addr[2];
  assign _042_[0] = ~field_storage_threshold_via_ref_count_value[0];
  assign _084_[0] = ~_081_[0];
  assign _045_[2] = ~field_storage_threshold_via_const_count_value[2];
  assign _039_[0] = ~field_storage_threshold_via_const_count_value[0];
  assign _080_[0] = ~_077_[0];
  assign _076_[0] = ~_073_[0];
  assign _075_[2] = ~_073_[2];
  assign _083_[1] = ~_081_[1];
  assign _083_[2] = ~_081_[2];
  assign _083_[3] = ~_081_[3];
  assign _079_[1] = ~_077_[1];
  assign _079_[2] = ~_077_[2];
  assign _079_[3] = ~_077_[3];
  assign _075_[1] = ~_073_[1];
  assign _075_[3] = ~_073_[3];
  assign _036_[0] = ~field_storage_threshold_via_bool_count_value[0];
  assign _064_[3] = ~field_storage_threshold_via_const_count_value[3];
  assign _046_[1] = ~field_storage_threshold_via_const_count_value[1];
  assign _060_[2] = ~field_storage_threshold_via_bool_count_value[2];
  assign _060_[3] = ~field_storage_threshold_via_bool_count_value[3];
  assign _060_[1] = ~field_storage_threshold_via_bool_count_value[1];
  assign _016_ = _007_ | cpuif_addr[3];
  assign _017_ = cpuif_addr[2] | _008_;
  assign _018_ = _007_ | _008_;
  assign _005_ = rst | is_active;
  assign _004_ = s_apb_psel & _006_;
  assign _035_[1] = field_storage_threshold_via_bool_count_value[0] & field_storage_threshold_via_bool_count_value[1];
  assign _009_[1] = field_storage_threshold_via_bool_count_value[2] & field_storage_threshold_via_bool_count_value[3];
  assign hwif_out_threshold_via_const_count_decrthreshold = _065_ | _066_;
  assign _010_[0] = field_storage_threshold_via_const_count_value[0] & _046_[1];
  assign _010_[1] = field_storage_threshold_via_const_count_value[2] & _064_[3];
  assign _066_ = _010_[0] & _010_[1];
  assign hwif_out_threshold_via_const_count_incrthreshold = _048_ | _049_;
  assign _011_[0] = _039_[0] & field_storage_threshold_via_const_count_value[1];
  assign _011_[1] = _045_[2] & field_storage_threshold_via_const_count_value[3];
  assign _049_ = _011_[0] & _011_[1];
  assign hwif_out_threshold_via_bool_count_decrthreshold = _061_ | _062_;
  assign _012_[0] = _036_[0] & _060_[1];
  assign _012_[1] = _060_[2] & _060_[3];
  assign _062_ = _012_[0] & _012_[1];
  assign _013_[0] = _053_[0] & _053_[1];
  assign _057_ = _013_[0] & _013_[1];
  assign hwif_out_threshold_via_ref_count_incrthreshold = _056_ | _057_;
  assign _014_[0] = _069_[0] & _069_[1];
  assign _014_[1] = _069_[2] & _069_[3];
  assign _072_ = _014_[0] & _014_[1];
  assign hwif_out_threshold_via_ref_count_decrthreshold = _071_ | _072_;
  assign _015_[1] = cpuif_addr[2] | cpuif_addr[3];
  assign _019_ = ~_015_[1];
  assign _020_ = ~_016_;
  assign _021_ = ~_017_;
  assign _022_ = ~_018_;
  assign _027_ = ~cpuif_req_is_wr;
  assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
  assign field_combo_threshold_control_max_load_next = decoded_reg_strb_threshold_control & cpuif_req_is_wr;
  assign _023_ = decoded_reg_strb_threshold_via_bool & _027_;
  assign _024_ = decoded_reg_strb_threshold_via_const & _027_;
  assign _025_ = decoded_reg_strb_threshold_via_ref & _027_;
  assign _026_ = decoded_reg_strb_threshold_control & _027_;
  assign \readback_array[0] [0] = _023_ ? field_storage_threshold_via_bool_count_value[0] : 1'h0;
  assign \readback_array[0] [1] = _023_ ? field_storage_threshold_via_bool_count_value[1] : 1'h0;
  assign \readback_array[0] [2] = _023_ ? field_storage_threshold_via_bool_count_value[2] : 1'h0;
  assign \readback_array[0] [3] = _023_ ? field_storage_threshold_via_bool_count_value[3] : 1'h0;
  assign \readback_array[1] [0] = _024_ ? field_storage_threshold_via_const_count_value[0] : 1'h0;
  assign \readback_array[1] [1] = _024_ ? field_storage_threshold_via_const_count_value[1] : 1'h0;
  assign \readback_array[1] [2] = _024_ ? field_storage_threshold_via_const_count_value[2] : 1'h0;
  assign \readback_array[1] [3] = _024_ ? field_storage_threshold_via_const_count_value[3] : 1'h0;
  assign \readback_array[2] [0] = _025_ ? field_storage_threshold_via_ref_count_value[0] : 1'h0;
  assign \readback_array[2] [1] = _025_ ? field_storage_threshold_via_ref_count_value[1] : 1'h0;
  assign \readback_array[2] [2] = _025_ ? field_storage_threshold_via_ref_count_value[2] : 1'h0;
  assign \readback_array[2] [3] = _025_ ? field_storage_threshold_via_ref_count_value[3] : 1'h0;
  assign \readback_array[3] [0] = _026_ ? field_storage_threshold_control_min_value[0] : 1'h0;
  assign \readback_array[3] [1] = _026_ ? field_storage_threshold_control_min_value[1] : 1'h0;
  assign \readback_array[3] [2] = _026_ ? field_storage_threshold_control_min_value[2] : 1'h0;
  assign \readback_array[3] [3] = _026_ ? field_storage_threshold_control_min_value[3] : 1'h0;
  assign \readback_array[3] [4] = _026_ ? field_storage_threshold_control_max_value[0] : 1'h0;
  assign \readback_array[3] [5] = _026_ ? field_storage_threshold_control_max_value[1] : 1'h0;
  assign \readback_array[3] [6] = _026_ ? field_storage_threshold_control_max_value[2] : 1'h0;
  assign \readback_array[3] [7] = _026_ ? field_storage_threshold_control_max_value[3] : 1'h0;
  assign field_combo_threshold_via_ref_count_load_next = hwif_in_threshold_via_ref_count_decr ? 1'h1 : hwif_in_threshold_via_ref_count_incr;
  assign field_combo_threshold_via_ref_count_next[0] = hwif_in_threshold_via_ref_count_decr ? _084_[0] : _081_[0];
  assign field_combo_threshold_via_ref_count_next[1] = hwif_in_threshold_via_ref_count_decr ? _084_[1] : _081_[1];
  assign field_combo_threshold_via_ref_count_next[2] = hwif_in_threshold_via_ref_count_decr ? _084_[2] : _081_[2];
  assign field_combo_threshold_via_ref_count_next[3] = hwif_in_threshold_via_ref_count_decr ? _084_[3] : _081_[3];
  assign _081_[0] = hwif_in_threshold_via_ref_count_incr ? _042_[0] : field_storage_threshold_via_ref_count_value[0];
  assign _081_[1] = hwif_in_threshold_via_ref_count_incr ? _043_[1] : field_storage_threshold_via_ref_count_value[1];
  assign _081_[2] = hwif_in_threshold_via_ref_count_incr ? _043_[2] : field_storage_threshold_via_ref_count_value[2];
  assign _081_[3] = hwif_in_threshold_via_ref_count_incr ? _043_[3] : field_storage_threshold_via_ref_count_value[3];
  assign field_combo_threshold_via_const_count_load_next = hwif_in_threshold_via_const_count_decr ? 1'h1 : hwif_in_threshold_via_const_count_incr;
  assign field_combo_threshold_via_const_count_next[0] = hwif_in_threshold_via_const_count_decr ? _080_[0] : _077_[0];
  assign field_combo_threshold_via_const_count_next[1] = hwif_in_threshold_via_const_count_decr ? _080_[1] : _077_[1];
  assign field_combo_threshold_via_const_count_next[2] = hwif_in_threshold_via_const_count_decr ? _080_[2] : _077_[2];
  assign field_combo_threshold_via_const_count_next[3] = hwif_in_threshold_via_const_count_decr ? _080_[3] : _077_[3];
  assign _077_[0] = hwif_in_threshold_via_const_count_incr ? _039_[0] : field_storage_threshold_via_const_count_value[0];
  assign _077_[1] = hwif_in_threshold_via_const_count_incr ? _040_[1] : field_storage_threshold_via_const_count_value[1];
  assign _077_[2] = hwif_in_threshold_via_const_count_incr ? _040_[2] : field_storage_threshold_via_const_count_value[2];
  assign _077_[3] = hwif_in_threshold_via_const_count_incr ? _040_[3] : field_storage_threshold_via_const_count_value[3];
  assign field_combo_threshold_via_bool_count_load_next = hwif_in_threshold_via_bool_count_decr ? 1'h1 : hwif_in_threshold_via_bool_count_incr;
  assign field_combo_threshold_via_bool_count_next[0] = hwif_in_threshold_via_bool_count_decr ? _076_[0] : _073_[0];
  assign field_combo_threshold_via_bool_count_next[1] = hwif_in_threshold_via_bool_count_decr ? _076_[1] : _073_[1];
  assign field_combo_threshold_via_bool_count_next[2] = hwif_in_threshold_via_bool_count_decr ? _076_[2] : _073_[2];
  assign field_combo_threshold_via_bool_count_next[3] = hwif_in_threshold_via_bool_count_decr ? _076_[3] : _073_[3];
  assign _073_[0] = hwif_in_threshold_via_bool_count_incr ? _036_[0] : field_storage_threshold_via_bool_count_value[0];
  assign _073_[1] = hwif_in_threshold_via_bool_count_incr ? _037_[1] : field_storage_threshold_via_bool_count_value[1];
  assign _073_[2] = hwif_in_threshold_via_bool_count_incr ? _037_[2] : field_storage_threshold_via_bool_count_value[2];
  assign _073_[3] = hwif_in_threshold_via_bool_count_incr ? _037_[3] : field_storage_threshold_via_bool_count_value[3];
  assign _033_ = ~s_apb_pready;
  assign _034_ = is_active ? _033_ : s_apb_psel;
  assign _051_[0] = ~field_storage_threshold_control_max_value[0];
  assign _051_[1] = ~field_storage_threshold_control_max_value[1];
  assign _051_[2] = ~field_storage_threshold_control_max_value[2];
  assign _051_[3] = ~field_storage_threshold_control_max_value[3];
  assign _067_[0] = ~field_storage_threshold_control_min_value[0];
  assign _067_[1] = ~field_storage_threshold_control_min_value[1];
  assign _067_[2] = ~field_storage_threshold_control_min_value[2];
  assign _067_[3] = ~field_storage_threshold_control_min_value[3];
  assign _028_[3] = ~cpuif_wr_biten[6];
  assign _006_ = ~is_active;
  assign _065_ = ~_063_[3];
  assign _056_ = ~_058_;
  assign _047_ = ~_044_[3];
  assign _048_ = ~_050_;
  assign _061_ = ~_059_[3];
  assign _055_ = ~_052_[3];
  assign _071_ = ~_068_[3];
  assign _080_[2] = _079_[2] ^ _078_[1];
  assign _080_[3] = _079_[3] ^ _078_[2];
  assign _040_[1] = field_storage_threshold_via_const_count_value[1] ^ field_storage_threshold_via_const_count_value[0];
  assign _040_[2] = field_storage_threshold_via_const_count_value[2] ^ _038_[1];
  assign _040_[3] = field_storage_threshold_via_const_count_value[3] ^ _038_[2];
  assign _053_[0] = field_storage_threshold_via_ref_count_value[0] ^ _051_[0];
  assign _053_[1] = field_storage_threshold_via_ref_count_value[1] ^ _051_[1];
  assign _053_[2] = field_storage_threshold_via_ref_count_value[2] ^ _051_[2];
  assign _053_[3] = field_storage_threshold_via_ref_count_value[3] ^ _051_[3];
  assign _054_[0] = field_storage_threshold_via_ref_count_value[0] & _051_[0];
  assign _054_[1] = field_storage_threshold_via_ref_count_value[1] & _051_[1];
  assign _054_[2] = field_storage_threshold_via_ref_count_value[2] & _051_[2];
  assign _054_[3] = field_storage_threshold_via_ref_count_value[3] & _051_[3];
  assign _084_[1] = _083_[1] ^ _081_[0];
  assign _084_[2] = _083_[2] ^ _082_[1];
  assign _084_[3] = _083_[3] ^ _082_[2];
  assign _069_[0] = field_storage_threshold_via_ref_count_value[0] ^ _067_[0];
  assign _069_[1] = field_storage_threshold_via_ref_count_value[1] ^ _067_[1];
  assign _069_[2] = field_storage_threshold_via_ref_count_value[2] ^ _067_[2];
  assign _069_[3] = field_storage_threshold_via_ref_count_value[3] ^ _067_[3];
  assign _070_[0] = field_storage_threshold_via_ref_count_value[0] & _067_[0];
  assign _070_[1] = field_storage_threshold_via_ref_count_value[1] & _067_[1];
  assign _070_[2] = field_storage_threshold_via_ref_count_value[2] & _067_[2];
  assign _070_[3] = field_storage_threshold_via_ref_count_value[3] & _067_[3];
  assign _098_ = _075_[1] & _073_[0];
  assign _099_ = _075_[2] & _074_[1];
  assign _074_[1] = _073_[1] | _098_;
  assign _074_[2] = _073_[2] | _099_;
  assign hwif_out_threshold_via_bool_count_incrthreshold = _009_[1] & _035_[1];
  assign _035_[2] = field_storage_threshold_via_bool_count_value[2] & _035_[1];
  assign _093_ = _010_[1] & _063_[1];
  assign _063_[1] = field_storage_threshold_via_const_count_value[1] | _010_[0];
  assign _063_[3] = field_storage_threshold_via_const_count_value[3] | _093_;
  assign _041_[1] = field_storage_threshold_via_ref_count_value[1] & field_storage_threshold_via_ref_count_value[0];
  assign _041_[2] = field_storage_threshold_via_ref_count_value[2] & _041_[1];
  assign _100_ = _079_[1] & _077_[0];
  assign _101_ = _079_[2] & _078_[1];
  assign _078_[1] = _077_[1] | _100_;
  assign _078_[2] = _077_[2] | _101_;
  assign _085_ = field_storage_threshold_via_const_count_value[3] & field_storage_threshold_via_const_count_value[2];
  assign _086_ = _011_[1] & field_storage_threshold_via_const_count_value[1];
  assign _044_[3] = _085_ | _086_;
  assign _038_[1] = field_storage_threshold_via_const_count_value[1] & field_storage_threshold_via_const_count_value[0];
  assign _038_[2] = field_storage_threshold_via_const_count_value[2] & _038_[1];
  assign _091_ = _060_[3] & field_storage_threshold_via_bool_count_value[2];
  assign _092_ = field_storage_threshold_via_bool_count_value[3] | _091_;
  assign _059_[3] = _092_ | _012_[1];
  assign _087_ = _053_[1] & _052_[0];
  assign _088_ = _053_[3] & _054_[2];
  assign _089_ = _013_[1] & _052_[1];
  assign _013_[1] = _053_[3] & _053_[2];
  assign _052_[0] = _054_[0] | _053_[0];
  assign _052_[1] = _054_[1] | _087_;
  assign _090_ = _054_[3] | _088_;
  assign _052_[3] = _090_ | _089_;
  assign _102_ = _083_[1] & _081_[0];
  assign _103_ = _083_[2] & _082_[1];
  assign _082_[1] = _081_[1] | _102_;
  assign _082_[2] = _081_[2] | _103_;
  assign _094_ = _069_[1] & _068_[0];
  assign _095_ = _069_[3] & _070_[2];
  assign _096_ = _014_[1] & _068_[1];
  assign _068_[0] = _070_[0] | _069_[0];
  assign _068_[1] = _070_[1] | _094_;
  assign _097_ = _070_[3] | _095_;
  assign _068_[3] = _097_ | _096_;
  assign decoded_reg_strb_threshold_via_bool = cpuif_req & _019_;
  assign decoded_reg_strb_threshold_via_const = cpuif_req & _020_;
  assign decoded_reg_strb_threshold_via_ref = cpuif_req & _021_;
  assign decoded_reg_strb_threshold_control = cpuif_req & _022_;
  assign _000_[0] = field_storage_threshold_control_min_value[0] & _028_[3];
  assign _000_[1] = field_storage_threshold_control_min_value[1] & _028_[3];
  assign _000_[2] = field_storage_threshold_control_min_value[2] & _028_[3];
  assign _000_[3] = field_storage_threshold_control_min_value[3] & _028_[3];
  assign _001_[0] = cpuif_wr_data[0] & cpuif_wr_biten[6];
  assign _001_[1] = cpuif_wr_data[1] & cpuif_wr_biten[6];
  assign _001_[2] = cpuif_wr_data[2] & cpuif_wr_biten[6];
  assign _001_[3] = cpuif_wr_data[3] & cpuif_wr_biten[6];
  assign _029_[0] = _000_[0] | _001_[0];
  assign _029_[1] = _000_[1] | _001_[1];
  assign _029_[2] = _000_[2] | _001_[2];
  assign _029_[3] = _000_[3] | _001_[3];
  assign _002_[0] = field_storage_threshold_control_max_value[0] & _028_[3];
  assign _002_[1] = field_storage_threshold_control_max_value[1] & _028_[3];
  assign _002_[2] = field_storage_threshold_control_max_value[2] & _028_[3];
  assign _002_[3] = field_storage_threshold_control_max_value[3] & _028_[3];
  assign _003_[0] = cpuif_wr_data[4] & cpuif_wr_biten[6];
  assign _003_[1] = cpuif_wr_data[5] & cpuif_wr_biten[6];
  assign _003_[2] = cpuif_wr_data[6] & cpuif_wr_biten[6];
  assign _003_[3] = cpuif_wr_data[7] & cpuif_wr_biten[6];
  assign _030_[0] = _002_[0] | _003_[0];
  assign _030_[1] = _002_[1] | _003_[1];
  assign _030_[2] = _002_[2] | _003_[2];
  assign _030_[3] = _002_[3] | _003_[3];
  assign cpuif_wr_ack = cpuif_req & cpuif_req_is_wr;
  assign cpuif_rd_ack = cpuif_req & _027_;
  assign _031_[0] = \readback_array[0] [0] | \readback_array[1] [0];
  assign _031_[1] = \readback_array[0] [1] | \readback_array[1] [1];
  assign _031_[2] = \readback_array[0] [2] | \readback_array[1] [2];
  assign _031_[3] = \readback_array[0] [3] | \readback_array[1] [3];
  assign _032_[0] = _031_[0] | \readback_array[2] [0];
  assign _032_[1] = _031_[1] | \readback_array[2] [1];
  assign _032_[2] = _031_[2] | \readback_array[2] [2];
  assign _032_[3] = _031_[3] | \readback_array[2] [3];
  assign s_apb_prdata[0] = _032_[0] | \readback_array[3] [0];
  assign s_apb_prdata[1] = _032_[1] | \readback_array[3] [1];
  assign s_apb_prdata[2] = _032_[2] | \readback_array[3] [2];
  assign s_apb_prdata[3] = _032_[3] | \readback_array[3] [3];
  assign _058_ = _055_ | _057_;
  assign _050_ = _047_ | _049_;
  assign _076_[1] = _075_[1] ^ _073_[0];
  assign _076_[2] = _075_[2] ^ _074_[1];
  assign _076_[3] = _075_[3] ^ _074_[2];
  assign _037_[1] = field_storage_threshold_via_bool_count_value[1] ^ field_storage_threshold_via_bool_count_value[0];
  assign _037_[2] = field_storage_threshold_via_bool_count_value[2] ^ _035_[1];
  assign _037_[3] = field_storage_threshold_via_bool_count_value[3] ^ _035_[2];
  assign _043_[1] = field_storage_threshold_via_ref_count_value[1] ^ field_storage_threshold_via_ref_count_value[0];
  assign _043_[2] = field_storage_threshold_via_ref_count_value[2] ^ _041_[1];
  assign _043_[3] = field_storage_threshold_via_ref_count_value[3] ^ _041_[2];
  assign _080_[1] = _079_[1] ^ _077_[0];
  assign _009_[0] = _035_[1];
  assign _015_[0] = 1'h0;
  assign _028_[2:0] = { _028_[3], _028_[3], _028_[3] };
  assign _031_[31:4] = 28'h0000000;
  assign _032_[31:4] = 28'h0000000;
  assign { _035_[3], _035_[0] } = { hwif_out_threshold_via_bool_count_incrthreshold, field_storage_threshold_via_bool_count_value[0] };
  assign _036_[3:1] = field_storage_threshold_via_bool_count_value[3:1];
  assign _037_[0] = _036_[0];
  assign _038_[0] = field_storage_threshold_via_const_count_value[0];
  assign _039_[3:1] = field_storage_threshold_via_const_count_value[3:1];
  assign _040_[0] = _039_[0];
  assign _041_[0] = field_storage_threshold_via_ref_count_value[0];
  assign _042_[3:1] = field_storage_threshold_via_ref_count_value[3:1];
  assign _043_[0] = _042_[0];
  assign _044_[1:0] = { field_storage_threshold_via_const_count_value[1], 1'h1 };
  assign { _045_[3], _045_[1:0] } = { field_storage_threshold_via_const_count_value[3], field_storage_threshold_via_const_count_value[1], _039_[0] };
  assign _046_[0] = field_storage_threshold_via_const_count_value[0];
  assign _059_[2:0] = 3'h7;
  assign _060_[0] = _036_[0];
  assign _063_[0] = field_storage_threshold_via_const_count_value[0];
  assign _064_[2:0] = { field_storage_threshold_via_const_count_value[2], _046_[1], field_storage_threshold_via_const_count_value[0] };
  assign _074_[0] = _073_[0];
  assign _075_[0] = _073_[0];
  assign _078_[0] = _077_[0];
  assign _079_[0] = _077_[0];
  assign _082_[0] = _081_[0];
  assign _083_[0] = _081_[0];
  assign cpuif_addr[1:0] = 2'h0;
  assign cpuif_rd_data = { 24'h000000, \readback_array[3] [7:4], s_apb_prdata[3:0] };
  assign cpuif_rd_err = 1'h0;
  assign cpuif_req_masked = cpuif_req;
  assign cpuif_req_stall_rd = 1'h0;
  assign cpuif_req_stall_wr = 1'h0;
  assign { cpuif_wr_biten[7], cpuif_wr_biten[5:0] } = { cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6] };
  assign cpuif_wr_err = 1'h0;
  assign decoded_req = cpuif_req;
  assign decoded_req_is_wr = cpuif_req_is_wr;
  assign decoded_wr_biten = { cpuif_wr_biten[31:8], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6], cpuif_wr_biten[6] };
  assign decoded_wr_data = cpuif_wr_data;
  assign field_combo_threshold_control_min_load_next = field_combo_threshold_control_max_load_next;
  assign field_combo_threshold_via_bool_count_decrthreshold = hwif_out_threshold_via_bool_count_decrthreshold;
  assign field_combo_threshold_via_bool_count_incrthreshold = hwif_out_threshold_via_bool_count_incrthreshold;
  assign field_combo_threshold_via_const_count_decrthreshold = hwif_out_threshold_via_const_count_decrthreshold;
  assign field_combo_threshold_via_const_count_incrthreshold = hwif_out_threshold_via_const_count_incrthreshold;
  assign field_combo_threshold_via_ref_count_decrthreshold = hwif_out_threshold_via_ref_count_decrthreshold;
  assign field_combo_threshold_via_ref_count_incrthreshold = hwif_out_threshold_via_ref_count_incrthreshold;
  assign hwif_out_threshold_via_bool_count = field_storage_threshold_via_bool_count_value;
  assign hwif_out_threshold_via_const_count = field_storage_threshold_via_const_count_value;
  assign hwif_out_threshold_via_ref_count = field_storage_threshold_via_ref_count_value;
  assign \readback_array[0] [31:4] = 28'h0000000;
  assign \readback_array[1] [31:4] = 28'h0000000;
  assign \readback_array[2] [31:4] = 28'h0000000;
  assign \readback_array[3] [31:8] = 24'h000000;
  assign readback_data = { 24'h000000, \readback_array[3] [7:4], s_apb_prdata[3:0] };
  assign readback_done = cpuif_rd_ack;
  assign readback_err = 1'h0;
  assign readback_external_rd_ack = 1'h0;
  assign s_apb_prdata[31:4] = { 24'h000000, \readback_array[3] [7:4] };
  assign s_apb_pslverr = 1'h0;
endmodule
