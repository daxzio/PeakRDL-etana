// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module regblock (
        input wire clk,
        input wire rst,

        input wire root_cpuif_reset,
        input wire [15:0] r5f2_resetvalue,

        input wire s_apb_psel,
        input wire s_apb_penable,
        input wire s_apb_pwrite,
        input wire [2:0] s_apb_pprot,
        input wire [4:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,

        input regblock_pkg::regblock__in_t hwif_in
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [4:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    // Request
    logic is_active;
    always_ff @(posedge clk) begin
        if(root_cpuif_reset) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= {s_apb_paddr[4:2], 2'b0};
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<4; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic r1;
        logic r2;
        logic r3;
        logic r4;
        logic r5;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_err;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        automatic logic is_valid_addr;
        automatic logic is_invalid_rw;
        is_valid_addr = '1; // No error checking on valid address access
        is_invalid_rw = '0;
        decoded_reg_strb.r1 = cpuif_req_masked & (cpuif_addr == 5'h0);
        decoded_reg_strb.r2 = cpuif_req_masked & (cpuif_addr == 5'h4);
        decoded_reg_strb.r3 = cpuif_req_masked & (cpuif_addr == 5'h8);
        decoded_reg_strb.r4 = cpuif_req_masked & (cpuif_addr == 5'hc);
        decoded_reg_strb.r5 = cpuif_req_masked & (cpuif_addr == 5'h10);
        decoded_err = (~is_valid_addr | is_invalid_rw) & decoded_req;
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic [15:0] next;
                logic load_next;
            } f1;
            struct {
                logic [15:0] next;
                logic load_next;
            } f2;
        } r1;
        struct {
            struct {
                logic [15:0] next;
                logic load_next;
            } f1;
            struct {
                logic [15:0] next;
                logic load_next;
            } f2;
        } r2;
        struct {
            struct {
                logic [15:0] next;
                logic load_next;
            } f1;
            struct {
                logic [15:0] next;
                logic load_next;
            } f2;
        } r3;
        struct {
            struct {
                logic [15:0] next;
                logic load_next;
            } f1;
            struct {
                logic [15:0] next;
                logic load_next;
            } f2;
        } r4;
        struct {
            struct {
                logic [15:0] next;
                logic load_next;
            } f1;
            struct {
                logic [15:0] next;
                logic load_next;
            } f2;
        } r5;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic [15:0] value;
            } f1;
            struct {
                logic [15:0] value;
            } f2;
        } r1;
        struct {
            struct {
                logic [15:0] value;
            } f1;
            struct {
                logic [15:0] value;
            } f2;
        } r2;
        struct {
            struct {
                logic [15:0] value;
            } f1;
            struct {
                logic [15:0] value;
            } f2;
        } r3;
        struct {
            struct {
                logic [15:0] value;
            } f1;
            struct {
                logic [15:0] value;
            } f2;
        } r4;
        struct {
            struct {
                logic [15:0] value;
            } f1;
            struct {
                logic [15:0] value;
            } f2;
        } r5;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: regblock.r1.f1
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.r1.f1.value;
        load_next_c = '0;
        if(decoded_reg_strb.r1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.r1.f1.value & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
            load_next_c = '1;
        end
        field_combo.r1.f1.next = next_c;
        field_combo.r1.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.r1.f1.value <= 16'h1234;
        end else begin
            if(field_combo.r1.f1.load_next) begin
                field_storage.r1.f1.value <= field_combo.r1.f1.next;
            end
        end
    end
    // Field: regblock.r1.f2
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.r1.f2.value;
        load_next_c = '0;
        if(decoded_reg_strb.r1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.r1.f2.value & ~decoded_wr_biten[31:16]) | (decoded_wr_data[31:16] & decoded_wr_biten[31:16]);
            load_next_c = '1;
        end
        field_combo.r1.f2.next = next_c;
        field_combo.r1.f2.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(hwif_in.f2_reset) begin
            field_storage.r1.f2.value <= 16'h5678;
        end else begin
            if(field_combo.r1.f2.load_next) begin
                field_storage.r1.f2.value <= field_combo.r1.f2.next;
            end
        end
    end
    // Field: regblock.r2.f1
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.r2.f1.value;
        load_next_c = '0;
        if(decoded_reg_strb.r2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.r2.f1.value & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
            load_next_c = '1;
        end
        field_combo.r2.f1.next = next_c;
        field_combo.r2.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(hwif_in.r2.my_reset) begin
            field_storage.r2.f1.value <= 16'h1234;
        end else begin
            if(field_combo.r2.f1.load_next) begin
                field_storage.r2.f1.value <= field_combo.r2.f1.next;
            end
        end
    end
    // Field: regblock.r2.f2
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.r2.f2.value;
        load_next_c = '0;
        if(decoded_reg_strb.r2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.r2.f2.value & ~decoded_wr_biten[31:16]) | (decoded_wr_data[31:16] & decoded_wr_biten[31:16]);
            load_next_c = '1;
        end
        field_combo.r2.f2.next = next_c;
        field_combo.r2.f2.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(hwif_in.f2_reset) begin
            field_storage.r2.f2.value <= 16'h5678;
        end else begin
            if(field_combo.r2.f2.load_next) begin
                field_storage.r2.f2.value <= field_combo.r2.f2.next;
            end
        end
    end
    // Field: regblock.r3.f1
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.r3.f1.value;
        load_next_c = '0;
        if(decoded_reg_strb.r3 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.r3.f1.value & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
            load_next_c = '1;
        end
        field_combo.r3.f1.next = next_c;
        field_combo.r3.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk or posedge hwif_in.r3.my_areset) begin
        if(hwif_in.r3.my_areset) begin
            field_storage.r3.f1.value <= 16'h1234;
        end else begin
            if(field_combo.r3.f1.load_next) begin
                field_storage.r3.f1.value <= field_combo.r3.f1.next;
            end
        end
    end
    // Field: regblock.r3.f2
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.r3.f2.value;
        load_next_c = '0;
        if(decoded_reg_strb.r3 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.r3.f2.value & ~decoded_wr_biten[31:16]) | (decoded_wr_data[31:16] & decoded_wr_biten[31:16]);
            load_next_c = '1;
        end
        field_combo.r3.f2.next = next_c;
        field_combo.r3.f2.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(hwif_in.f2_reset) begin
            field_storage.r3.f2.value <= 16'h5678;
        end else begin
            if(field_combo.r3.f2.load_next) begin
                field_storage.r3.f2.value <= field_combo.r3.f2.next;
            end
        end
    end
    // Field: regblock.r4.f1
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.r4.f1.value;
        load_next_c = '0;
        if(decoded_reg_strb.r4 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.r4.f1.value & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
            load_next_c = '1;
        end
        field_combo.r4.f1.next = next_c;
        field_combo.r4.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(~hwif_in.r4.my_reset_n) begin
            field_storage.r4.f1.value <= 16'h1234;
        end else begin
            if(field_combo.r4.f1.load_next) begin
                field_storage.r4.f1.value <= field_combo.r4.f1.next;
            end
        end
    end
    // Field: regblock.r4.f2
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.r4.f2.value;
        load_next_c = '0;
        if(decoded_reg_strb.r4 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.r4.f2.value & ~decoded_wr_biten[31:16]) | (decoded_wr_data[31:16] & decoded_wr_biten[31:16]);
            load_next_c = '1;
        end
        field_combo.r4.f2.next = next_c;
        field_combo.r4.f2.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(hwif_in.f2_reset) begin
            field_storage.r4.f2.value <= 16'h5678;
        end else begin
            if(field_combo.r4.f2.load_next) begin
                field_storage.r4.f2.value <= field_combo.r4.f2.next;
            end
        end
    end
    // Field: regblock.r5.f1
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.r5.f1.value;
        load_next_c = '0;
        if(decoded_reg_strb.r5 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.r5.f1.value & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
            load_next_c = '1;
        end
        field_combo.r5.f1.next = next_c;
        field_combo.r5.f1.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.r5.my_areset_n) begin
        if(~hwif_in.r5.my_areset_n) begin
            field_storage.r5.f1.value <= 16'h1234;
        end else begin
            if(field_combo.r5.f1.load_next) begin
                field_storage.r5.f1.value <= field_combo.r5.f1.next;
            end
        end
    end
    // Field: regblock.r5.f2
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.r5.f2.value;
        load_next_c = '0;
        if(decoded_reg_strb.r5 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.r5.f2.value & ~decoded_wr_biten[31:16]) | (decoded_wr_data[31:16] & decoded_wr_biten[31:16]);
            load_next_c = '1;
        end
        field_combo.r5.f2.next = next_c;
        field_combo.r5.f2.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(hwif_in.f2_reset) begin
            field_storage.r5.f2.value <= r5f2_resetvalue;
        end else begin
            if(field_combo.r5.f2.load_next) begin
                field_storage.r5.f2.value <= field_combo.r5.f2.next;
            end
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[5];
    assign readback_array[0][15:0] = (decoded_reg_strb.r1 && !decoded_req_is_wr) ? field_storage.r1.f1.value : '0;
    assign readback_array[0][31:16] = (decoded_reg_strb.r1 && !decoded_req_is_wr) ? field_storage.r1.f2.value : '0;
    assign readback_array[1][15:0] = (decoded_reg_strb.r2 && !decoded_req_is_wr) ? field_storage.r2.f1.value : '0;
    assign readback_array[1][31:16] = (decoded_reg_strb.r2 && !decoded_req_is_wr) ? field_storage.r2.f2.value : '0;
    assign readback_array[2][15:0] = (decoded_reg_strb.r3 && !decoded_req_is_wr) ? field_storage.r3.f1.value : '0;
    assign readback_array[2][31:16] = (decoded_reg_strb.r3 && !decoded_req_is_wr) ? field_storage.r3.f2.value : '0;
    assign readback_array[3][15:0] = (decoded_reg_strb.r4 && !decoded_req_is_wr) ? field_storage.r4.f1.value : '0;
    assign readback_array[3][31:16] = (decoded_reg_strb.r4 && !decoded_req_is_wr) ? field_storage.r4.f2.value : '0;
    assign readback_array[4][15:0] = (decoded_reg_strb.r5 && !decoded_req_is_wr) ? field_storage.r5.f1.value : '0;
    assign readback_array[4][31:16] = (decoded_reg_strb.r5 && !decoded_req_is_wr) ? field_storage.r5.f2.value : '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<5; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
