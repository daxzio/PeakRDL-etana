// Generated by PeakRDL-etana HWIF Wrapper Tool
//  https://github.com/daxzio/PeakRDL-etana
//
// This is a wrapper module that flattens the hwif structs into individual signals

module regblock_wrapper (
        input wire clk,
        input wire rst,
        input wire s_apb_psel,
        input wire s_apb_penable,
        input wire s_apb_pwrite,
        input wire [2:0] s_apb_pprot,
        input wire [4:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,
        input logic [7:0] hwif_in_r1_f,
        input logic hwif_in_r1_f_we,
        input logic hwif_in_r1_f_hwclr,
        input logic hwif_in_r1_f_hwset,
        input logic [7:0] hwif_in_r2_f,
        input logic hwif_in_r2_f_we,
        input logic hwif_in_r2_f_hwclr,
        input logic hwif_in_r2_f_hwset,
        input logic [7:0] hwif_in_r3_f,
        input logic [7:0] hwif_in_r4_f,
        input logic [7:0] hwif_in_r5_f_next_value,
        input logic hwif_in_r5_f_we
    );

    //--------------------------------------------------------------------------
    // Internal hwif struct signals
    //--------------------------------------------------------------------------
    regblock_pkg::regblock__in_t hwif_in;

    //--------------------------------------------------------------------------
    // Flatten struct to individual signals
    //--------------------------------------------------------------------------
    assign hwif_in.r1.f.next = hwif_in_r1_f;
    assign hwif_in.r1.f.we = hwif_in_r1_f_we;
    assign hwif_in.r1.f.hwclr = hwif_in_r1_f_hwclr;
    assign hwif_in.r1.f.hwset = hwif_in_r1_f_hwset;
    assign hwif_in.r2.f.next = hwif_in_r2_f;
    assign hwif_in.r2.f.we = hwif_in_r2_f_we;
    assign hwif_in.r2.f.hwclr = hwif_in_r2_f_hwclr;
    assign hwif_in.r2.f.hwset = hwif_in_r2_f_hwset;
    assign hwif_in.r3.f.next = hwif_in_r3_f;
    assign hwif_in.r4.f.next = hwif_in_r4_f;
    assign hwif_in.r5.f_next_value = hwif_in_r5_f_next_value;
    assign hwif_in.r5.f_we = hwif_in_r5_f_we;

    //--------------------------------------------------------------------------
    // Instantiate the main regblock module
    //--------------------------------------------------------------------------
    regblock i_regblock (
        .clk(clk),
        .rst(rst),
        .s_apb_psel(s_apb_psel),
        .s_apb_penable(s_apb_penable),
        .s_apb_pwrite(s_apb_pwrite),
        .s_apb_pprot(s_apb_pprot),
        .s_apb_paddr(s_apb_paddr),
        .s_apb_pwdata(s_apb_pwdata),
        .s_apb_pstrb(s_apb_pstrb),
        .s_apb_pready(s_apb_pready),
        .s_apb_prdata(s_apb_prdata),
        .s_apb_pslverr(s_apb_pslverr),
        .hwif_in(hwif_in)
    );

endmodule
