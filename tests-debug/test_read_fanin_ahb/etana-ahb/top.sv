// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module top (
        input wire clk,
        input wire rst_n,

        input wire s_ahb_hsel,
        input wire s_ahb_hwrite,
        input wire [1:0] s_ahb_htrans,
        input wire [2:0] s_ahb_hsize,
        input wire [7:0] s_ahb_haddr,
        input wire [255:0] s_ahb_hwdata,
        output logic s_ahb_hready,
        output logic [255:0] s_ahb_hrdata,
        output logic s_ahb_hresp


    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [7:0] cpuif_addr;
    logic [255:0] cpuif_wr_data;
    logic [255:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [255:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    // AHB Transfer Types
    //localparam [1:0] HTRANS_IDLE   = 2'b00;
    //localparam [1:0] HTRANS_BUSY   = 2'b01;
    localparam [1:0] HTRANS_NONSEQ = 2'b10;
    localparam [1:0] HTRANS_SEQ    = 2'b11;

    // AHB Response Types
    localparam HRESP_OKAY  = 1'b0;
    localparam HRESP_ERROR = 1'b1;

    // Request
    logic is_active;
    logic [7:0] addr_captured;
    logic [4:0] addr_offset_captured;
    logic write_captured;
    logic [2:0] size_captured;

    always @(posedge clk) begin
        if(~rst_n) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
            addr_captured <= '0;
            addr_offset_captured <= '0;
            write_captured <= '0;
            size_captured <= '0;
        end else begin
            if(~is_active) begin
                // Address Phase: Detect new transfer and capture address/control
                if(s_ahb_hsel && (s_ahb_htrans == HTRANS_NONSEQ || s_ahb_htrans == HTRANS_SEQ)) begin
                    is_active <= '1;
                    // Capture word-aligned address for register selection
                    addr_captured <= {s_ahb_haddr[7:5], 5'b0};
                    // Capture original address offset for byte enable calculation
                    addr_offset_captured <= s_ahb_haddr[0+:5];
                    write_captured <= s_ahb_hwrite;
                    size_captured <= s_ahb_hsize;
                end
            end else begin
                // Data Phase: Start request with captured data
                cpuif_req <= '1;
                cpuif_req_is_wr <= write_captured;
                cpuif_addr <= addr_captured;

                // Replicate data based on captured HSIZE for proper lane placement
                case(size_captured)
                    3'b000: begin // Byte access - replicate byte across all lanes
                        cpuif_wr_data <= { 32{ s_ahb_hwdata[0+:8] } };
                    end
                    3'b001: begin // Halfword access - replicate halfword across all lanes
                        cpuif_wr_data <= { 16{ s_ahb_hwdata[0+:16] } };
                    end
                    3'b010: begin // Word access - replicate word across all lanes
                        cpuif_wr_data <= { 8{ s_ahb_hwdata[0+:32] } };
                    end
                    3'b011: begin // Doubleword access - replicate doubleword across all lanes
                        cpuif_wr_data <= { 4{ s_ahb_hwdata[0+:64] } };
                    end
                    3'b100: begin // 128-bit access - replicate 128-bit data across all lanes
                        cpuif_wr_data <= { 2{ s_ahb_hwdata[0+:128] } };
                    end
                    3'b101: begin // 256-bit access - replicate 256-bit data across all lanes
                        cpuif_wr_data <= s_ahb_hwdata[0+:256];
                    end
                    default: begin // Larger than supported accesses (full width)
                        cpuif_wr_data <= s_ahb_hwdata;
                    end
                    endcase

                // Generate byte enable based on captured HSIZE and original address offset
                cpuif_wr_biten <= '0;
                case(size_captured)
                    3'b000: begin // Byte access
                        cpuif_wr_biten[addr_offset_captured*8 +: 8] <= '1;
                    end
                    3'b001: begin // Halfword access
                        cpuif_wr_biten[addr_offset_captured[4:1]*16 +: 16] <= '1;
                    end
                    3'b010: begin // Word access
                        cpuif_wr_biten[addr_offset_captured[4:2]*32 +: 32] <= '1;
                    end
                    3'b011: begin // Doubleword access
                        cpuif_wr_biten[addr_offset_captured[4:3]*64 +: 64] <= '1;
                    end
                    3'b100: begin // 128-bit access
                        cpuif_wr_biten[addr_offset_captured[4:4]*128 +: 128] <= '1;
                    end
                    3'b101: begin // 256-bit access
                        cpuif_wr_biten <= '1;
                    end
                    default: begin // Default to full width access
                        cpuif_wr_biten <= '1;
                    end
                endcase

                // End transaction when acknowledged
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                    cpuif_req <= '0;
                end
            end
        end
    end

    // Response
    logic [255:0] read_data_extracted;

    // Extract read data based on captured HSIZE and address offset
    always @(*) begin
        case(size_captured)
            3'b000: begin // Byte access - extract specific byte
                read_data_extracted = { 248'd0, cpuif_rd_data[(addr_offset_captured*8)+:8] };
            end
            3'b001: begin // Halfword access - extract specific halfword
                read_data_extracted = { 240'd0, cpuif_rd_data[(addr_offset_captured[4:1]*16)+:16] };
            end
            3'b010: begin // Word access - extract specific word
                read_data_extracted = { 224'd0, cpuif_rd_data[(addr_offset_captured[4:2]*32)+:32] };
            end
            3'b011: begin // Doubleword access - extract specific doubleword
                read_data_extracted = { 192'd0, cpuif_rd_data[(addr_offset_captured[4:3]*64)+:64] };
            end
            3'b100: begin // 128-bit access - extract specific 128-bit data
                read_data_extracted = { 128'd0, cpuif_rd_data[(addr_offset_captured[4:4]*128)+:128] };
            end
            3'b101: begin // 256-bit access - extract specific 256-bit data
                read_data_extracted = cpuif_rd_data;
            end
            default: begin // Full width access for larger sizes
                read_data_extracted = cpuif_rd_data;
            end
        endcase
    end

    assign s_ahb_hready = (cpuif_rd_ack | cpuif_wr_ack | ~is_active);
    assign s_ahb_hrdata = read_data_extracted;
    assign s_ahb_hresp = (cpuif_rd_err | cpuif_wr_err) ? HRESP_ERROR : HRESP_OKAY;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    logic [0:0] decoded_reg_strb_regs [8];
    logic decoded_req;
    logic decoded_req_is_wr;
    /* verilator lint_off UNUSEDSIGNAL */
    logic [255:0] decoded_wr_data;
    logic [255:0] decoded_wr_biten;
    /* verilator lint_on UNUSEDSIGNAL */

    always @(*) begin
        /* verilator lint_off UNUSEDSIGNAL */
        integer next_cpuif_addr;
        /* verilator lint_on UNUSEDSIGNAL */
        for(int i0=0; i0<8; i0++) begin : gen_loop_3
            next_cpuif_addr = 32'h0 + i0*8'h20;
            decoded_reg_strb_regs[i0] = cpuif_req_masked & (cpuif_addr == next_cpuif_addr[7:0]);
        end
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------

    // Field: top.regs[].f
    logic [255:0] field_storage_regs_f_value [8] ;
    logic [255:0] field_combo_regs_f_next [8] ;
    logic field_combo_regs_f_load_next [8] ;
    for(genvar i0=0; i0<8; i0++) begin : gen_loop_4
        // always_comb begin
        always @(*) begin
            logic [255:0] next_c;
            logic load_next_c;
            next_c = field_storage_regs_f_value[i0];
            load_next_c = '0;
            if(decoded_reg_strb_regs[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage_regs_f_value[i0] & ~decoded_wr_biten[255:0]) | (decoded_wr_data[255:0] & decoded_wr_biten[255:0]);
                load_next_c = '1;
            end
            field_combo_regs_f_next[i0] = next_c;
            field_combo_regs_f_load_next[i0] = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(~rst_n) begin
                field_storage_regs_f_value[i0] <= 256'h1;
            end else if(field_combo_regs_f_load_next[i0]) begin
                field_storage_regs_f_value[i0] <= field_combo_regs_f_next[i0];
            end
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

//--------------------------------------------------------------------------
// Readback
//--------------------------------------------------------------------------
    logic readback_external_rd_ack;
    assign readback_external_rd_ack = 0;

    logic readback_err;
    logic readback_done;
    logic [255:0] readback_data;

    // Assign readback values to a flattened array
    logic [255:0] readback_array[8];
    for(genvar i0=0; i0<8; i0++) begin : gen_loop_1
        assign readback_array[i0*1 + 0][255:0] = (decoded_reg_strb_regs[i0] && !decoded_req_is_wr) ? field_storage_regs_f_value[i0] : '0;
    end

    // Reduce the array
    // always_comb begin
    always @(*) begin
        logic [255:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<8; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
